
software.elf:     file format elf32-littlenios2
software.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0001202c memsz 0x0001202c flags r-x
    LOAD off    0x0001304c vaddr 0x0081204c paddr 0x00813d68 align 2**12
         filesz 0x00001d1c memsz 0x00001d1c flags rw-
    LOAD off    0x00015a84 vaddr 0x00815a84 paddr 0x00815a84 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011800  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000608  00811a44  00811a44  00012a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d1c  0081204c  00813d68  0001304c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00815a84  00815a84  00015a84  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00815be4  00815be4  00014d68  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01008000  01008000  00014d68  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00014d68  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000010b0  00000000  00000000  00014d90  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00029990  00000000  00000000  00015e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a882  00000000  00000000  0003f7d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000cf36  00000000  00000000  0004a052  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002620  00000000  00000000  00056f88  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000040ed  00000000  00000000  000595a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001823c  00000000  00000000  0005d695  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  000758d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000019a0  00000000  00000000  00075938  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007aa6a  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0007aa6d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007aa70  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007aa71  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0007aa72  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0007aa7b  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0007aa84  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000e  00000000  00000000  0007aa8d  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000035  00000000  00000000  0007aa9b  2**0
                  CONTENTS, READONLY
 27 .jdi          00004d44  00000000  00000000  0007aad0  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00087127  00000000  00000000  0007f814  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00811a44 l    d  .rodata	00000000 .rodata
0081204c l    d  .rwdata	00000000 .rwdata
00815a84 l    d  .bss	00000000 .bss
00815be4 l    d  .sdram	00000000 .sdram
01008000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../software_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 impure.c
0081204c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00801914 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00811aea l     O .rodata	00000010 zeroes.4404
00803f40 l     F .text	000000bc __sbprintf
00811afa l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00804204 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00805d34 l     F .text	00000008 __fp_unlock
00805d48 l     F .text	0000019c __sinit.part.1
00805ee4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00812898 l     O .rwdata	00000020 lc_ctype_charset
00812878 l     O .rwdata	00000020 lc_message_charset
008128b8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00811b28 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00808820 l     F .text	000000fc __sprint_r.part.0
00811c5c l     O .rodata	00000010 blanks.4348
00811c4c l     O .rodata	00000010 zeroes.4349
00809dac l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0080d844 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080d950 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080d97c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080da68 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080db48 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080dc34 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0080de08 l     F .text	0000003c alt_get_errno
0080de44 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0080e05c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00813d50 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080e2a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080e3dc l     F .text	00000034 alt_dev_reg
00812a98 l     O .rwdata	00001060 jtag_uart
00813af8 l     O .rwdata	00000120 lcd
00813c18 l     O .rwdata	000000c4 uart
00813cdc l     O .rwdata	00000044 video_rgb_resampler_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080e7e4 l     F .text	0000020c altera_avalon_jtag_uart_irq
0080e9f0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00813d54 l     O .rwdata	00000004 colstart
0080f028 l     F .text	000000b8 lcd_write_command
0080f0e0 l     F .text	000000d8 lcd_write_data
0080f1b8 l     F .text	000000d0 lcd_clear_screen
0080f288 l     F .text	000001ec lcd_repaint_screen
0080f474 l     F .text	000000cc lcd_scroll_up
0080f540 l     F .text	000002ac lcd_handle_escape
0080fcc4 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080ff04 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
008101b4 l     F .text	0000009c altera_avalon_uart_irq
00810250 l     F .text	000000e4 altera_avalon_uart_rxirq
00810334 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
008104d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
008106e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00810a44 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008110f4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00811ecc l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00815ab8 g     O .bss	00000004 alt_instruction_exception_handler
00807f94 g     F .text	00000074 _mprec_log10
00808080 g     F .text	0000008c __any_on
00806bf8 g     F .text	00000054 _isatty_r
00811b34 g     O .rodata	00000028 __mprec_tinytens
0080dd44 g     F .text	0000007c alt_main
00801840 g     F .text	000000c0 _puts_r
00815ae4 g     O .bss	00000100 alt_irq
00806d28 g     F .text	00000060 _lseek_r
00813d68 g       *ABS*	00000000 __flash_rwdata_start
008060d4 g     F .text	000000ac __sflags
0080c370 g     F .text	00000088 .hidden __eqdf2
00815be4 g       *ABS*	00000000 __alt_heap_start
0080a390 g     F .text	0000009c _wcrtomb_r
00801c30 g     F .text	0000005c __sseek
00806084 g     F .text	00000010 __sinit
0080a238 g     F .text	00000140 __swbuf_r
00806c4c g     F .text	0000007c _setlocale_r
00805eec g     F .text	00000068 __sfmoreglue
0080dde4 g     F .text	00000024 __malloc_unlock
00806fb4 g     F .text	0000015c memmove
0080606c g     F .text	00000018 _cleanup
00807110 g     F .text	000000a8 _Balloc
0080c3f8 g     F .text	000000dc .hidden __gtdf2
00811408 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00800c94 g     F .text	0000005c _fstat_r
00815a84 g     O .bss	00000004 errno
00801bac g     F .text	00000008 __seofread
00815aa4 g     O .bss	00000004 alt_argv
0081bd20 g       *ABS*	00000000 _gp
008113d8 g     F .text	00000030 usleep
00812918 g     O .rwdata	00000180 alt_fd_list
00810be4 g     F .text	00000090 alt_find_dev
00806e6c g     F .text	00000148 memcpy
00805d3c g     F .text	0000000c _cleanup_r
0080d65c g     F .text	000000dc .hidden __floatsidf
008111b8 g     F .text	0000007c alt_io_redirect
0080c4d4 g     F .text	000000f4 .hidden __ltdf2
00811a44 g       *ABS*	00000000 __DTOR_END__
00801900 g     F .text	00000014 puts
00811614 g     F .text	0000009c alt_exception_cause_generated_bad_addr
008086d0 g     F .text	00000074 __fpclassifyd
00807ef0 g     F .text	000000a4 __ratio
00809d90 g     F .text	0000001c __vfiprintf_internal
0080ebe8 g     F .text	0000021c altera_avalon_jtag_uart_read
0080b120 g     F .text	00000064 .hidden __udivsi3
0080daa4 g     F .text	000000a4 isatty
00811b84 g     O .rodata	000000c8 __mprec_tens
00806cc8 g     F .text	0000000c __locale_charset
00811584 g     F .text	00000090 alt_icache_flush
00815a90 g     O .bss	00000004 __malloc_top_pad
00813d30 g     O .rwdata	00000004 __mb_cur_max
00806cf8 g     F .text	0000000c _localeconv_r
0080751c g     F .text	0000003c __i2b
008065b4 g     F .text	000004bc __sfvwrite_r
00801b04 g     F .text	00000054 _sbrk_r
0080810c g     F .text	00000060 _read_r
00813d48 g     O .rwdata	00000004 alt_max_fd
00809f2c g     F .text	000000f0 _fclose_r
00805d04 g     F .text	00000030 fflush
00815a8c g     O .bss	00000004 __malloc_max_sbrked_mem
0080b1dc g     F .text	000008ac .hidden __adddf3
00807c98 g     F .text	0000010c __b2d
0080aaf0 g     F .text	00000538 .hidden __umoddi3
0080dc70 g     F .text	000000d4 lseek
00813d20 g     O .rwdata	00000004 _global_impure_ptr
0080816c g     F .text	00000564 _realloc_r
00815be4 g       *ABS*	00000000 __bss_end
00811004 g     F .text	000000f0 alt_iic_isr_register
008112d0 g     F .text	00000108 alt_tick
0080a578 g     F .text	00000578 .hidden __udivdi3
0080a194 g     F .text	00000024 _fputwc_r
00811b5c g     O .rodata	00000028 __mprec_bigtens
00807300 g     F .text	00000104 __s2b
0080d738 g     F .text	000000a8 .hidden __floatunsidf
008079d8 g     F .text	00000060 __mcmp
00810108 g     F .text	000000ac altera_avalon_uart_init
008060a4 g     F .text	00000018 __fp_lock_all
00810fb8 g     F .text	0000004c alt_ic_irq_enabled
00811234 g     F .text	0000009c alt_alarm_stop
00815aac g     O .bss	00000004 alt_irq_active
00800834 g     F .text	00000444 _fseeko_r
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
008128f0 g     O .rwdata	00000028 alt_dev_null
008109fc g     F .text	00000048 alt_dcache_flush_all
00807404 g     F .text	00000068 __hi0bits
0080d5dc g     F .text	00000080 .hidden __fixdfsi
00813d68 g       *ABS*	00000000 __ram_rwdata_end
00813d40 g     O .rwdata	00000008 alt_dev_list
0080e2e4 g     F .text	000000f8 write
0081204c g       *ABS*	00000000 __ram_rodata_end
0080d9b8 g     F .text	000000b0 fstat
008007f0 g     F .text	00000024 fprintf
0080c4d4 g     F .text	000000f4 .hidden __ledf2
00807750 g     F .text	00000140 __pow5mult
00808934 g     F .text	0000145c ___vfiprintf_internal_r
00815a9c g     O .bss	00000004 __nlocale_changed
0080b184 g     F .text	00000058 .hidden __umodsi3
00815be4 g       *ABS*	00000000 end
0080f7ec g     F .text	000004d8 altera_avalon_lcd_16207_write
00800c78 g     F .text	0000001c fseeko
00810724 g     F .text	000001ac altera_avalon_uart_write
00800818 g     F .text	0000001c fseek
0080e724 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00811a44 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080ff7c g     F .text	0000007c alt_avalon_timer_sc_init
00810058 g     F .text	00000060 altera_avalon_uart_write_fd
0080d7e0 g     F .text	00000064 .hidden __clzsi2
008100b8 g     F .text	00000050 altera_avalon_uart_close_fd
0080ee04 g     F .text	00000224 altera_avalon_jtag_uart_write
00806094 g     F .text	00000004 __sfp_lock_acquire
00806d88 g     F .text	000000e4 memchr
00801d2c g     F .text	000021f8 ___vfprintf_internal_r
008062a4 g     F .text	00000310 _free_r
00806cd4 g     F .text	00000010 __locale_mb_cur_max
00811890 g     F .text	00000180 __call_exitprocs
00815a98 g     O .bss	00000004 __mlocale_changed
00813d28 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
00815ab0 g     O .bss	00000004 _alt_tick_rate
00807890 g     F .text	00000148 __lshift
00815ab4 g     O .bss	00000004 _alt_nticks
0080e098 g     F .text	000000fc read
0080e448 g     F .text	00000178 alt_sys_init
008017e0 g     F .text	00000060 _open_r
00811778 g     F .text	00000118 __register_exitproc
00807558 g     F .text	000001f8 __multiply
0080ea90 g     F .text	00000068 altera_avalon_jtag_uart_close
0081204c g       *ABS*	00000000 __ram_rwdata_start
00811a44 g       *ABS*	00000000 __ram_rodata_start
00815abc g     O .bss	00000028 __malloc_current_mallinfo
00807da4 g     F .text	0000014c __d2b
0080e5c0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00810d7c g     F .text	000000a4 alt_get_fd
0081142c g     F .text	00000158 alt_busy_sleep
008041b0 g     F .text	00000054 _close_r
008116fc g     F .text	0000007c memcmp
0080e680 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00815be4 g       *ABS*	00000000 __alt_stack_base
0080e6d0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0080405c g     F .text	00000154 __swsetup_r
0080ba88 g     F .text	000008e8 .hidden __divdf3
00805f54 g     F .text	00000118 __sfp
00808008 g     F .text	00000078 __copybits
00812470 g     O .rwdata	00000408 __malloc_av_
008060a0 g     F .text	00000004 __sinit_lock_release
0080c5c8 g     F .text	00000718 .hidden __muldf3
00801b58 g     F .text	00000054 __sread
00810c74 g     F .text	00000108 alt_find_file
00810a80 g     F .text	000000a4 alt_dev_llist_insert
0080ddc0 g     F .text	00000024 __malloc_lock
008007c8 g     F .text	00000028 _fprintf_r
0080e1f8 g     F .text	000000b0 sbrk
00805ca8 g     F .text	0000005c _fflush_r
00809e68 g     F .text	000000c4 _calloc_r
008007b0 g     F .text	00000018 fopen
00815a84 g       *ABS*	00000000 __bss_start
008016b8 g     F .text	00000128 memset
00800290 g     F .text	0000042c main
00815aa8 g     O .bss	00000004 alt_envp
00815a88 g     O .bss	00000004 __malloc_max_total_mem
0080e620 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080a378 g     F .text	00000018 __swbuf
0080fd70 g     F .text	00000134 altera_avalon_lcd_16207_init
00801c8c g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080a01c g     F .text	00000014 fclose
00804404 g     F .text	00001688 _dtoa_r
00800eac g     F .text	0000080c _malloc_r
0080a4ec g     F .text	00000030 __ascii_wctomb
00813d4c g     O .rwdata	00000004 alt_errno
00806a70 g     F .text	000000c4 _fwalk
0080b028 g     F .text	00000084 .hidden __divsi3
00806180 g     F .text	00000124 _malloc_trim_r
00811a44 g       *ABS*	00000000 __CTOR_END__
00808744 g     F .text	000000dc strcmp
00811a44 g       *ABS*	00000000 __flash_rodata_start
00811a44 g       *ABS*	00000000 __DTOR_LIST__
0080c370 g     F .text	00000088 .hidden __nedf2
0080e410 g     F .text	00000038 alt_irq_init
0080e194 g     F .text	00000064 alt_release_fd
00811c6c g     O .rodata	00000100 .hidden __clz_tab
00815a94 g     O .bss	00000004 _PathLocale
008116b0 g     F .text	00000014 atexit
00803ffc g     F .text	00000060 _write_r
00806d04 g     F .text	00000018 setlocale
00813d24 g     O .rwdata	00000004 _impure_ptr
00815aa0 g     O .bss	00000004 alt_argc
00805a8c g     F .text	0000021c __sflush_r
00810b84 g     F .text	00000060 _do_dtors
00806cf0 g     F .text	00000008 __locale_cjk_lang
00800814 g     F .text	00000004 _fseek_r
00801930 g     F .text	000001d4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
00807c34 g     F .text	00000064 __ulp
008060bc g     F .text	00000018 __fp_unlock_all
0080fea4 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00813d38 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00806d1c g     F .text	0000000c localeconv
00810e54 g     F .text	00000050 alt_ic_isr_register
00813d68 g       *ABS*	00000000 _edata
0080fff8 g     F .text	00000060 altera_avalon_uart_read_fd
00815be4 g       *ABS*	00000000 _end
0080a030 g     F .text	00000164 __fputwc
00800244 g       *ABS*	00000000 __ram_exceptions_end
0080eaf8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00810f2c g     F .text	0000008c alt_ic_irq_disable
00801bb4 g     F .text	0000007c __swrite
00813d2c g     O .rwdata	00000004 __malloc_trim_threshold
00806ce4 g     F .text	0000000c __locale_msgcharset
008116c4 g     F .text	00000038 exit
00806b34 g     F .text	000000c4 _fwalk_reent
00807a38 g     F .text	000001fc __mdiff
0080b0ac g     F .text	00000074 .hidden __modsi3
00813d64 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00806098 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
00811dcb g     O .rodata	00000101 _ctype_
0081047c g     F .text	00000054 altera_avalon_uart_close
008006bc g     F .text	000000f4 _fopen_r
00811a10 g     F .text	00000034 _exit
008108d0 g     F .text	0000012c alt_alarm_start
00800cf0 g     F .text	000001bc __smakebuf_r
00801c94 g     F .text	00000098 strlen
0080df08 g     F .text	00000154 open
0080c3f8 g     F .text	000000dc .hidden __gedf2
00813d34 g     O .rwdata	00000004 __wctomb
0080891c g     F .text	00000018 __sprint_r
00810e20 g     F .text	00000034 alt_icache_flush_all
00813d58 g     O .rwdata	00000004 alt_priority_mask
00810ea4 g     F .text	00000088 alt_ic_irq_enable
00803f24 g     F .text	0000001c __vfprintf_internal
0081050c g     F .text	000001dc altera_avalon_uart_read
0080a51c g     F .text	0000005c _wctomb_r
0080cce0 g     F .text	000008fc .hidden __subdf3
0080746c g     F .text	000000b0 __lo0bits
00813d5c g     O .rwdata	00000008 alt_alarm_list
00810b24 g     F .text	00000060 _do_ctors
0080a42c g     F .text	000000c0 wcrtomb
0080d880 g     F .text	000000d0 close
0080dbb0 g     F .text	00000084 alt_load
0080a1b8 g     F .text	00000080 fputwc
0080609c g     F .text	00000004 __sinit_lock_acquire
008071e0 g     F .text	00000120 __multadd
008071b8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff7f8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	1096b904 	addi	r2,r2,23268
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	1096b904 	addi	r2,r2,23268
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff7f812c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff7f8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a76617 	ldw	r2,-25192(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a76617 	ldw	r2,-25192(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff7f8248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6af4814 	ori	gp,gp,48416
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	1096a114 	ori	r2,r2,23172

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18d6f914 	ori	r3,r3,23524

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff7f8278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	080dbb00 	call	80dbb0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	080dd440 	call	80dd44 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff7f828c>

00800290 <main>:




int main()
{
  800290:	deffeb04 	addi	sp,sp,-84
  800294:	dfc01415 	stw	ra,80(sp)
  800298:	df001315 	stw	fp,76(sp)
  80029c:	df001304 	addi	fp,sp,76
  printf("Hello from Nios II!\n");
  8002a0:	01002074 	movhi	r4,129
  8002a4:	21069104 	addi	r4,r4,6724
  8002a8:	08019000 	call	801900 <puts>
  unsigned int uiSwitchValue = 0;
  8002ac:	e03ff415 	stw	zero,-48(fp)
 // smoothing = [1,1,1,1,1,1,1,1,1]
  unsigned char smoothing[9] = {0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1};
  8002b0:	00800044 	movi	r2,1
  8002b4:	e0bff705 	stb	r2,-36(fp)
  8002b8:	00800044 	movi	r2,1
  8002bc:	e0bff745 	stb	r2,-35(fp)
  8002c0:	00800044 	movi	r2,1
  8002c4:	e0bff785 	stb	r2,-34(fp)
  8002c8:	00800044 	movi	r2,1
  8002cc:	e0bff7c5 	stb	r2,-33(fp)
  8002d0:	00800044 	movi	r2,1
  8002d4:	e0bff805 	stb	r2,-32(fp)
  8002d8:	00800044 	movi	r2,1
  8002dc:	e0bff845 	stb	r2,-31(fp)
  8002e0:	00800044 	movi	r2,1
  8002e4:	e0bff885 	stb	r2,-30(fp)
  8002e8:	00800044 	movi	r2,1
  8002ec:	e0bff8c5 	stb	r2,-29(fp)
  8002f0:	00800044 	movi	r2,1
  8002f4:	e0bff905 	stb	r2,-28(fp)

  // Sobel Edge X = [-1,0,1,-2,0,2,-1,0,1]
  //signed char sobelX[9] = {0xFFFF, 0x0,0x1,0xFFFE,0x0,0x2,0xFFFF,0x0,0x1};
  signed char sobelX[9] = {0xFFFF, 0x0,0x1,0xFFFE,0x0,0x2,0xFFFF,0x0,0x1};
  8002f8:	00bfffc4 	movi	r2,-1
  8002fc:	e0bff945 	stb	r2,-27(fp)
  800300:	e03ff985 	stb	zero,-26(fp)
  800304:	00800044 	movi	r2,1
  800308:	e0bff9c5 	stb	r2,-25(fp)
  80030c:	00bfff84 	movi	r2,-2
  800310:	e0bffa05 	stb	r2,-24(fp)
  800314:	e03ffa45 	stb	zero,-23(fp)
  800318:	00800084 	movi	r2,2
  80031c:	e0bffa85 	stb	r2,-22(fp)
  800320:	00bfffc4 	movi	r2,-1
  800324:	e0bffac5 	stb	r2,-21(fp)
  800328:	e03ffb05 	stb	zero,-20(fp)
  80032c:	00800044 	movi	r2,1
  800330:	e0bffb45 	stb	r2,-19(fp)


  // sobel Edge Y = [-1,-2,-1,0,0,0,1,2,1]
  signed char sobelY[9] = {0xFFFF,0xFFFE,0xFFFF,0x0,0x0,0x0,0x1,0x2,0x1};
  800334:	00bfffc4 	movi	r2,-1
  800338:	e0bffb85 	stb	r2,-18(fp)
  80033c:	00bfff84 	movi	r2,-2
  800340:	e0bffbc5 	stb	r2,-17(fp)
  800344:	00bfffc4 	movi	r2,-1
  800348:	e0bffc05 	stb	r2,-16(fp)
  80034c:	e03ffc45 	stb	zero,-15(fp)
  800350:	e03ffc85 	stb	zero,-14(fp)
  800354:	e03ffcc5 	stb	zero,-13(fp)
  800358:	00800044 	movi	r2,1
  80035c:	e0bffd05 	stb	r2,-12(fp)
  800360:	00800084 	movi	r2,2
  800364:	e0bffd45 	stb	r2,-11(fp)
  800368:	00800044 	movi	r2,1
  80036c:	e0bffd85 	stb	r2,-10(fp)

  // identity = [0,0,0,0,1,0,0,0,0]
  unsigned char identity[9] = {0b000,0b000,0b000,0b000,0b001,0b000,0b000,0b000,0b000};
  800370:	e03ffdc5 	stb	zero,-9(fp)
  800374:	e03ffe05 	stb	zero,-8(fp)
  800378:	e03ffe45 	stb	zero,-7(fp)
  80037c:	e03ffe85 	stb	zero,-6(fp)
  800380:	00800044 	movi	r2,1
  800384:	e0bffec5 	stb	r2,-5(fp)
  800388:	e03fff05 	stb	zero,-4(fp)
  80038c:	e03fff45 	stb	zero,-3(fp)
  800390:	e03fff85 	stb	zero,-2(fp)
  800394:	e03fffc5 	stb	zero,-1(fp)


  char* stringToOutput = "example1";
  800398:	00802074 	movhi	r2,129
  80039c:	10869604 	addi	r2,r2,6744
  8003a0:	e0bfed15 	stw	r2,-76(fp)
//  int index;
  int previousSwitch = 0;
  8003a4:	e03fee15 	stw	zero,-72(fp)
//  //////////////
//
  FILE *lcd;
  lcd = fopen(LCD_NAME, "w");
  8003a8:	01402074 	movhi	r5,129
  8003ac:	29469904 	addi	r5,r5,6756
  8003b0:	01002074 	movhi	r4,129
  8003b4:	21069a04 	addi	r4,r4,6760
  8003b8:	08007b00 	call	8007b0 <fopen>
  8003bc:	e0bff515 	stw	r2,-44(fp)
  int lcdTrigger = 0;
  8003c0:	e03fef15 	stw	zero,-68(fp)
  while(1){

	  uiSwitchValue = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  8003c4:	00804074 	movhi	r2,257
  8003c8:	10861c04 	addi	r2,r2,6256
  8003cc:	10800037 	ldwio	r2,0(r2)
  8003d0:	e0bff415 	stw	r2,-48(fp)
	  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, uiSwitchValue);
  8003d4:	e0fff417 	ldw	r3,-48(fp)
  8003d8:	00804074 	movhi	r2,257
  8003dc:	10862004 	addi	r2,r2,6272
  8003e0:	10c00035 	stwio	r3,0(r2)
	  int switchValueInteger = (int)(uiSwitchValue);
  8003e4:	e0bff417 	ldw	r2,-48(fp)
  8003e8:	e0bff615 	stw	r2,-40(fp)


	  if ((switchValueInteger==1)&& (previousSwitch!=1)){ // Smoothing
  8003ec:	e0bff617 	ldw	r2,-40(fp)
  8003f0:	10800058 	cmpnei	r2,r2,1
  8003f4:	1000271e 	bne	r2,zero,800494 <main+0x204>
  8003f8:	e0bfee17 	ldw	r2,-72(fp)
  8003fc:	10800060 	cmpeqi	r2,r2,1
  800400:	1000241e 	bne	r2,zero,800494 <main+0x204>
		  previousSwitch =1;
  800404:	00800044 	movi	r2,1
  800408:	e0bfee15 	stw	r2,-72(fp)
		  lcdTrigger=1;
  80040c:	00800044 	movi	r2,1
  800410:	e0bfef15 	stw	r2,-68(fp)
		  for(int i = 1; i <= 9; i++) {
  800414:	00800044 	movi	r2,1
  800418:	e0bff015 	stw	r2,-64(fp)
  80041c:	00001206 	br	800468 <main+0x1d8>
		  				  IOWR(ALT_VIP_CL_2DFIR_0_BASE, 6+i, smoothing[i-1]);
  800420:	e0bff017 	ldw	r2,-64(fp)
  800424:	10800184 	addi	r2,r2,6
  800428:	1085883a 	add	r2,r2,r2
  80042c:	1085883a 	add	r2,r2,r2
  800430:	1007883a 	mov	r3,r2
  800434:	00804074 	movhi	r2,257
  800438:	10820004 	addi	r2,r2,2048
  80043c:	1885883a 	add	r2,r3,r2
  800440:	e0fff017 	ldw	r3,-64(fp)
  800444:	18ffffc4 	addi	r3,r3,-1
  800448:	e13ff704 	addi	r4,fp,-36
  80044c:	20c7883a 	add	r3,r4,r3
  800450:	18c00003 	ldbu	r3,0(r3)
  800454:	18c03fcc 	andi	r3,r3,255
  800458:	10c00035 	stwio	r3,0(r2)


	  if ((switchValueInteger==1)&& (previousSwitch!=1)){ // Smoothing
		  previousSwitch =1;
		  lcdTrigger=1;
		  for(int i = 1; i <= 9; i++) {
  80045c:	e0bff017 	ldw	r2,-64(fp)
  800460:	10800044 	addi	r2,r2,1
  800464:	e0bff015 	stw	r2,-64(fp)
  800468:	e0bff017 	ldw	r2,-64(fp)
  80046c:	10800290 	cmplti	r2,r2,10
  800470:	103feb1e 	bne	r2,zero,800420 <__alt_mem_onchip_mem+0xff7f8420>
		  				  IOWR(ALT_VIP_CL_2DFIR_0_BASE, 6+i, smoothing[i-1]);
		  			  }
		  IOWR(ALT_VIP_CL_2DFIR_0_BASE, 6, 0b111111111);
  800474:	00c07fc4 	movi	r3,511
  800478:	00804074 	movhi	r2,257
  80047c:	10820604 	addi	r2,r2,2072
  800480:	10c00035 	stwio	r3,0(r2)
		  			stringToOutput = "Smooth";
  800484:	00802074 	movhi	r2,129
  800488:	10869d04 	addi	r2,r2,6772
  80048c:	e0bfed15 	stw	r2,-76(fp)
  800490:	00007e06 	br	80068c <main+0x3fc>
	  }
	  else if ((switchValueInteger==2)&& (previousSwitch!=2)){// Sobel X
  800494:	e0bff617 	ldw	r2,-40(fp)
  800498:	10800098 	cmpnei	r2,r2,2
  80049c:	1000291e 	bne	r2,zero,800544 <main+0x2b4>
  8004a0:	e0bfee17 	ldw	r2,-72(fp)
  8004a4:	108000a0 	cmpeqi	r2,r2,2
  8004a8:	1000261e 	bne	r2,zero,800544 <main+0x2b4>
		  previousSwitch =2;
  8004ac:	00800084 	movi	r2,2
  8004b0:	e0bfee15 	stw	r2,-72(fp)
		  lcdTrigger=1;
  8004b4:	00800044 	movi	r2,1
  8004b8:	e0bfef15 	stw	r2,-68(fp)
		  for(int i = 1; i <= 9; i++) {
  8004bc:	00800044 	movi	r2,1
  8004c0:	e0bff115 	stw	r2,-60(fp)
  8004c4:	00001406 	br	800518 <main+0x288>
		  				  IOWR(ALT_VIP_CL_2DFIR_0_BASE, 6+i, sobelX[i-1]);
  8004c8:	e0bff117 	ldw	r2,-60(fp)
  8004cc:	10800184 	addi	r2,r2,6
  8004d0:	1085883a 	add	r2,r2,r2
  8004d4:	1085883a 	add	r2,r2,r2
  8004d8:	1007883a 	mov	r3,r2
  8004dc:	00804074 	movhi	r2,257
  8004e0:	10820004 	addi	r2,r2,2048
  8004e4:	1885883a 	add	r2,r3,r2
  8004e8:	e0fff117 	ldw	r3,-60(fp)
  8004ec:	18ffffc4 	addi	r3,r3,-1
  8004f0:	e13ff944 	addi	r4,fp,-27
  8004f4:	20c7883a 	add	r3,r4,r3
  8004f8:	18c00003 	ldbu	r3,0(r3)
  8004fc:	18c03fcc 	andi	r3,r3,255
  800500:	18c0201c 	xori	r3,r3,128
  800504:	18ffe004 	addi	r3,r3,-128
  800508:	10c00035 	stwio	r3,0(r2)
		  			stringToOutput = "Smooth";
	  }
	  else if ((switchValueInteger==2)&& (previousSwitch!=2)){// Sobel X
		  previousSwitch =2;
		  lcdTrigger=1;
		  for(int i = 1; i <= 9; i++) {
  80050c:	e0bff117 	ldw	r2,-60(fp)
  800510:	10800044 	addi	r2,r2,1
  800514:	e0bff115 	stw	r2,-60(fp)
  800518:	e0bff117 	ldw	r2,-60(fp)
  80051c:	10800290 	cmplti	r2,r2,10
  800520:	103fe91e 	bne	r2,zero,8004c8 <__alt_mem_onchip_mem+0xff7f84c8>
		  				  IOWR(ALT_VIP_CL_2DFIR_0_BASE, 6+i, sobelX[i-1]);
		  			  }
		  IOWR(ALT_VIP_CL_2DFIR_0_BASE, 6, 0b111111111);
  800524:	00c07fc4 	movi	r3,511
  800528:	00804074 	movhi	r2,257
  80052c:	10820604 	addi	r2,r2,2072
  800530:	10c00035 	stwio	r3,0(r2)
		  			stringToOutput = "SobelX";
  800534:	00802074 	movhi	r2,129
  800538:	10869f04 	addi	r2,r2,6780
  80053c:	e0bfed15 	stw	r2,-76(fp)
  800540:	00005206 	br	80068c <main+0x3fc>
	  }

	  else if ((switchValueInteger==4)&& (previousSwitch!=4)){// SobelY
  800544:	e0bff617 	ldw	r2,-40(fp)
  800548:	10800118 	cmpnei	r2,r2,4
  80054c:	1000291e 	bne	r2,zero,8005f4 <main+0x364>
  800550:	e0bfee17 	ldw	r2,-72(fp)
  800554:	10800120 	cmpeqi	r2,r2,4
  800558:	1000261e 	bne	r2,zero,8005f4 <main+0x364>
		  previousSwitch =4;
  80055c:	00800104 	movi	r2,4
  800560:	e0bfee15 	stw	r2,-72(fp)
		  lcdTrigger=1;
  800564:	00800044 	movi	r2,1
  800568:	e0bfef15 	stw	r2,-68(fp)
		  	  for(int i = 1; i <= 9; i++) {
  80056c:	00800044 	movi	r2,1
  800570:	e0bff215 	stw	r2,-56(fp)
  800574:	00001406 	br	8005c8 <main+0x338>
		  		 IOWR(ALT_VIP_CL_2DFIR_0_BASE, 6+i, sobelY[i-1]);
  800578:	e0bff217 	ldw	r2,-56(fp)
  80057c:	10800184 	addi	r2,r2,6
  800580:	1085883a 	add	r2,r2,r2
  800584:	1085883a 	add	r2,r2,r2
  800588:	1007883a 	mov	r3,r2
  80058c:	00804074 	movhi	r2,257
  800590:	10820004 	addi	r2,r2,2048
  800594:	1885883a 	add	r2,r3,r2
  800598:	e0fff217 	ldw	r3,-56(fp)
  80059c:	18ffffc4 	addi	r3,r3,-1
  8005a0:	e13ffb84 	addi	r4,fp,-18
  8005a4:	20c7883a 	add	r3,r4,r3
  8005a8:	18c00003 	ldbu	r3,0(r3)
  8005ac:	18c03fcc 	andi	r3,r3,255
  8005b0:	18c0201c 	xori	r3,r3,128
  8005b4:	18ffe004 	addi	r3,r3,-128
  8005b8:	10c00035 	stwio	r3,0(r2)
	  }

	  else if ((switchValueInteger==4)&& (previousSwitch!=4)){// SobelY
		  previousSwitch =4;
		  lcdTrigger=1;
		  	  for(int i = 1; i <= 9; i++) {
  8005bc:	e0bff217 	ldw	r2,-56(fp)
  8005c0:	10800044 	addi	r2,r2,1
  8005c4:	e0bff215 	stw	r2,-56(fp)
  8005c8:	e0bff217 	ldw	r2,-56(fp)
  8005cc:	10800290 	cmplti	r2,r2,10
  8005d0:	103fe91e 	bne	r2,zero,800578 <__alt_mem_onchip_mem+0xff7f8578>
		  		 IOWR(ALT_VIP_CL_2DFIR_0_BASE, 6+i, sobelY[i-1]);
		  		}
		  	 IOWR(ALT_VIP_CL_2DFIR_0_BASE, 6, 0b111111111);
  8005d4:	00c07fc4 	movi	r3,511
  8005d8:	00804074 	movhi	r2,257
  8005dc:	10820604 	addi	r2,r2,2072
  8005e0:	10c00035 	stwio	r3,0(r2)
		  		stringToOutput = "SobelY";
  8005e4:	00802074 	movhi	r2,129
  8005e8:	1086a104 	addi	r2,r2,6788
  8005ec:	e0bfed15 	stw	r2,-76(fp)
  8005f0:	00002606 	br	80068c <main+0x3fc>

	  }

	  else{//identity
		  if(previousSwitch != switchValueInteger){
  8005f4:	e0ffee17 	ldw	r3,-72(fp)
  8005f8:	e0bff617 	ldw	r2,-40(fp)
  8005fc:	18802326 	beq	r3,r2,80068c <main+0x3fc>
			  previousSwitch = switchValueInteger;
  800600:	e0bff617 	ldw	r2,-40(fp)
  800604:	e0bfee15 	stw	r2,-72(fp)
			  lcdTrigger=1;
  800608:	00800044 	movi	r2,1
  80060c:	e0bfef15 	stw	r2,-68(fp)
			  for(int i = 1; i <= 9; i++) {
  800610:	00800044 	movi	r2,1
  800614:	e0bff315 	stw	r2,-52(fp)
  800618:	00001206 	br	800664 <main+0x3d4>
				  IOWR(ALT_VIP_CL_2DFIR_0_BASE, 6+i, identity[i-1]);
  80061c:	e0bff317 	ldw	r2,-52(fp)
  800620:	10800184 	addi	r2,r2,6
  800624:	1085883a 	add	r2,r2,r2
  800628:	1085883a 	add	r2,r2,r2
  80062c:	1007883a 	mov	r3,r2
  800630:	00804074 	movhi	r2,257
  800634:	10820004 	addi	r2,r2,2048
  800638:	1885883a 	add	r2,r3,r2
  80063c:	e0fff317 	ldw	r3,-52(fp)
  800640:	18ffffc4 	addi	r3,r3,-1
  800644:	e13ffdc4 	addi	r4,fp,-9
  800648:	20c7883a 	add	r3,r4,r3
  80064c:	18c00003 	ldbu	r3,0(r3)
  800650:	18c03fcc 	andi	r3,r3,255
  800654:	10c00035 	stwio	r3,0(r2)

	  else{//identity
		  if(previousSwitch != switchValueInteger){
			  previousSwitch = switchValueInteger;
			  lcdTrigger=1;
			  for(int i = 1; i <= 9; i++) {
  800658:	e0bff317 	ldw	r2,-52(fp)
  80065c:	10800044 	addi	r2,r2,1
  800660:	e0bff315 	stw	r2,-52(fp)
  800664:	e0bff317 	ldw	r2,-52(fp)
  800668:	10800290 	cmplti	r2,r2,10
  80066c:	103feb1e 	bne	r2,zero,80061c <__alt_mem_onchip_mem+0xff7f861c>
				  IOWR(ALT_VIP_CL_2DFIR_0_BASE, 6+i, identity[i-1]);
			  }
			  IOWR(ALT_VIP_CL_2DFIR_0_BASE, 6, 0b111111111);
  800670:	00c07fc4 	movi	r3,511
  800674:	00804074 	movhi	r2,257
  800678:	10820604 	addi	r2,r2,2072
  80067c:	10c00035 	stwio	r3,0(r2)
			  stringToOutput = "Identity";
  800680:	00802074 	movhi	r2,129
  800684:	1086a304 	addi	r2,r2,6796
  800688:	e0bfed15 	stw	r2,-76(fp)

		  }
	  }


			if (lcd != NULL) // check if the UART is open successfully
  80068c:	e0bff517 	ldw	r2,-44(fp)
  800690:	10000826 	beq	r2,zero,8006b4 <main+0x424>
		{
				if (lcdTrigger==1){
  800694:	e0bfef17 	ldw	r2,-68(fp)
  800698:	10800058 	cmpnei	r2,r2,1
  80069c:	1000051e 	bne	r2,zero,8006b4 <main+0x424>

					fprintf(lcd, "%s\n\n", stringToOutput);
  8006a0:	e1bfed17 	ldw	r6,-76(fp)
  8006a4:	01402074 	movhi	r5,129
  8006a8:	2946a604 	addi	r5,r5,6808
  8006ac:	e13ff517 	ldw	r4,-44(fp)
  8006b0:	08007f00 	call	8007f0 <fprintf>

				}
		}

		//reset lcd trigger to 0
			lcdTrigger=0;
  8006b4:	e03fef15 	stw	zero,-68(fp)
  }
  8006b8:	003f4206 	br	8003c4 <__alt_mem_onchip_mem+0xff7f83c4>

008006bc <_fopen_r>:
  8006bc:	defffa04 	addi	sp,sp,-24
  8006c0:	3005883a 	mov	r2,r6
  8006c4:	dcc00415 	stw	r19,16(sp)
  8006c8:	d80d883a 	mov	r6,sp
  8006cc:	2827883a 	mov	r19,r5
  8006d0:	100b883a 	mov	r5,r2
  8006d4:	dc800315 	stw	r18,12(sp)
  8006d8:	dfc00515 	stw	ra,20(sp)
  8006dc:	dc400215 	stw	r17,8(sp)
  8006e0:	dc000115 	stw	r16,4(sp)
  8006e4:	2025883a 	mov	r18,r4
  8006e8:	08060d40 	call	8060d4 <__sflags>
  8006ec:	10002726 	beq	r2,zero,80078c <_fopen_r+0xd0>
  8006f0:	9009883a 	mov	r4,r18
  8006f4:	1023883a 	mov	r17,r2
  8006f8:	0805f540 	call	805f54 <__sfp>
  8006fc:	1021883a 	mov	r16,r2
  800700:	10002226 	beq	r2,zero,80078c <_fopen_r+0xd0>
  800704:	d9800017 	ldw	r6,0(sp)
  800708:	01c06d84 	movi	r7,438
  80070c:	980b883a 	mov	r5,r19
  800710:	9009883a 	mov	r4,r18
  800714:	08017e00 	call	8017e0 <_open_r>
  800718:	10001916 	blt	r2,zero,800780 <_fopen_r+0xc4>
  80071c:	8080038d 	sth	r2,14(r16)
  800720:	00802034 	movhi	r2,128
  800724:	1086d604 	addi	r2,r2,7000
  800728:	80800815 	stw	r2,32(r16)
  80072c:	00802034 	movhi	r2,128
  800730:	1086ed04 	addi	r2,r2,7092
  800734:	80800915 	stw	r2,36(r16)
  800738:	00802034 	movhi	r2,128
  80073c:	10870c04 	addi	r2,r2,7216
  800740:	80800a15 	stw	r2,40(r16)
  800744:	00802034 	movhi	r2,128
  800748:	10872304 	addi	r2,r2,7308
  80074c:	8440030d 	sth	r17,12(r16)
  800750:	84000715 	stw	r16,28(r16)
  800754:	80800b15 	stw	r2,44(r16)
  800758:	8c40400c 	andi	r17,r17,256
  80075c:	88000d1e 	bne	r17,zero,800794 <_fopen_r+0xd8>
  800760:	8005883a 	mov	r2,r16
  800764:	dfc00517 	ldw	ra,20(sp)
  800768:	dcc00417 	ldw	r19,16(sp)
  80076c:	dc800317 	ldw	r18,12(sp)
  800770:	dc400217 	ldw	r17,8(sp)
  800774:	dc000117 	ldw	r16,4(sp)
  800778:	dec00604 	addi	sp,sp,24
  80077c:	f800283a 	ret
  800780:	08060940 	call	806094 <__sfp_lock_acquire>
  800784:	8000030d 	sth	zero,12(r16)
  800788:	08060980 	call	806098 <__sfp_lock_release>
  80078c:	0005883a 	mov	r2,zero
  800790:	003ff406 	br	800764 <__alt_mem_onchip_mem+0xff7f8764>
  800794:	01c00084 	movi	r7,2
  800798:	000d883a 	mov	r6,zero
  80079c:	800b883a 	mov	r5,r16
  8007a0:	9009883a 	mov	r4,r18
  8007a4:	08008140 	call	800814 <_fseek_r>
  8007a8:	8005883a 	mov	r2,r16
  8007ac:	003fed06 	br	800764 <__alt_mem_onchip_mem+0xff7f8764>

008007b0 <fopen>:
  8007b0:	00802074 	movhi	r2,129
  8007b4:	108f4904 	addi	r2,r2,15652
  8007b8:	280d883a 	mov	r6,r5
  8007bc:	200b883a 	mov	r5,r4
  8007c0:	11000017 	ldw	r4,0(r2)
  8007c4:	08006bc1 	jmpi	8006bc <_fopen_r>

008007c8 <_fprintf_r>:
  8007c8:	defffe04 	addi	sp,sp,-8
  8007cc:	2809883a 	mov	r4,r5
  8007d0:	300b883a 	mov	r5,r6
  8007d4:	dfc00015 	stw	ra,0(sp)
  8007d8:	d9c00115 	stw	r7,4(sp)
  8007dc:	d9800104 	addi	r6,sp,4
  8007e0:	0803f240 	call	803f24 <__vfprintf_internal>
  8007e4:	dfc00017 	ldw	ra,0(sp)
  8007e8:	dec00204 	addi	sp,sp,8
  8007ec:	f800283a 	ret

008007f0 <fprintf>:
  8007f0:	defffd04 	addi	sp,sp,-12
  8007f4:	dfc00015 	stw	ra,0(sp)
  8007f8:	d9800115 	stw	r6,4(sp)
  8007fc:	d9c00215 	stw	r7,8(sp)
  800800:	d9800104 	addi	r6,sp,4
  800804:	0803f240 	call	803f24 <__vfprintf_internal>
  800808:	dfc00017 	ldw	ra,0(sp)
  80080c:	dec00304 	addi	sp,sp,12
  800810:	f800283a 	ret

00800814 <_fseek_r>:
  800814:	08008341 	jmpi	800834 <_fseeko_r>

00800818 <fseek>:
  800818:	00802074 	movhi	r2,129
  80081c:	108f4904 	addi	r2,r2,15652
  800820:	300f883a 	mov	r7,r6
  800824:	280d883a 	mov	r6,r5
  800828:	200b883a 	mov	r5,r4
  80082c:	11000017 	ldw	r4,0(r2)
  800830:	08008341 	jmpi	800834 <_fseeko_r>

00800834 <_fseeko_r>:
  800834:	deffe804 	addi	sp,sp,-96
  800838:	dd401415 	stw	r21,80(sp)
  80083c:	dc801115 	stw	r18,68(sp)
  800840:	dc401015 	stw	r17,64(sp)
  800844:	dc000f15 	stw	r16,60(sp)
  800848:	dfc01715 	stw	ra,92(sp)
  80084c:	ddc01615 	stw	r23,88(sp)
  800850:	dd801515 	stw	r22,84(sp)
  800854:	dd001315 	stw	r20,76(sp)
  800858:	dcc01215 	stw	r19,72(sp)
  80085c:	2023883a 	mov	r17,r4
  800860:	2821883a 	mov	r16,r5
  800864:	302b883a 	mov	r21,r6
  800868:	3825883a 	mov	r18,r7
  80086c:	20000226 	beq	r4,zero,800878 <_fseeko_r+0x44>
  800870:	20800e17 	ldw	r2,56(r4)
  800874:	10005a26 	beq	r2,zero,8009e0 <_fseeko_r+0x1ac>
  800878:	8080030b 	ldhu	r2,12(r16)
  80087c:	00c04204 	movi	r3,264
  800880:	1080420c 	andi	r2,r2,264
  800884:	10c05b26 	beq	r2,r3,8009f4 <_fseeko_r+0x1c0>
  800888:	85000a17 	ldw	r20,40(r16)
  80088c:	a000f626 	beq	r20,zero,800c68 <_fseeko_r+0x434>
  800890:	00800044 	movi	r2,1
  800894:	90803e26 	beq	r18,r2,800990 <_fseeko_r+0x15c>
  800898:	00800084 	movi	r2,2
  80089c:	90801026 	beq	r18,r2,8008e0 <_fseeko_r+0xac>
  8008a0:	90000f26 	beq	r18,zero,8008e0 <_fseeko_r+0xac>
  8008a4:	00800584 	movi	r2,22
  8008a8:	88800015 	stw	r2,0(r17)
  8008ac:	04ffffc4 	movi	r19,-1
  8008b0:	9805883a 	mov	r2,r19
  8008b4:	dfc01717 	ldw	ra,92(sp)
  8008b8:	ddc01617 	ldw	r23,88(sp)
  8008bc:	dd801517 	ldw	r22,84(sp)
  8008c0:	dd401417 	ldw	r21,80(sp)
  8008c4:	dd001317 	ldw	r20,76(sp)
  8008c8:	dcc01217 	ldw	r19,72(sp)
  8008cc:	dc801117 	ldw	r18,68(sp)
  8008d0:	dc401017 	ldw	r17,64(sp)
  8008d4:	dc000f17 	ldw	r16,60(sp)
  8008d8:	dec01804 	addi	sp,sp,96
  8008dc:	f800283a 	ret
  8008e0:	80800417 	ldw	r2,16(r16)
  8008e4:	002f883a 	mov	r23,zero
  8008e8:	0027883a 	mov	r19,zero
  8008ec:	1000cb26 	beq	r2,zero,800c1c <_fseeko_r+0x3e8>
  8008f0:	8080030b 	ldhu	r2,12(r16)
  8008f4:	10c2068c 	andi	r3,r2,2074
  8008f8:	1800071e 	bne	r3,zero,800918 <_fseeko_r+0xe4>
  8008fc:	10c1000c 	andi	r3,r2,1024
  800900:	1800451e 	bne	r3,zero,800a18 <_fseeko_r+0x1e4>
  800904:	00c02034 	movhi	r3,128
  800908:	18c70c04 	addi	r3,r3,7216
  80090c:	a0c0b726 	beq	r20,r3,800bec <_fseeko_r+0x3b8>
  800910:	10820014 	ori	r2,r2,2048
  800914:	8080030d 	sth	r2,12(r16)
  800918:	800b883a 	mov	r5,r16
  80091c:	8809883a 	mov	r4,r17
  800920:	0805ca80 	call	805ca8 <_fflush_r>
  800924:	1027883a 	mov	r19,r2
  800928:	103fe01e 	bne	r2,zero,8008ac <__alt_mem_onchip_mem+0xff7f88ac>
  80092c:	81400717 	ldw	r5,28(r16)
  800930:	900f883a 	mov	r7,r18
  800934:	a80d883a 	mov	r6,r21
  800938:	8809883a 	mov	r4,r17
  80093c:	a03ee83a 	callr	r20
  800940:	00ffffc4 	movi	r3,-1
  800944:	10ffd926 	beq	r2,r3,8008ac <__alt_mem_onchip_mem+0xff7f88ac>
  800948:	81400c17 	ldw	r5,48(r16)
  80094c:	28000526 	beq	r5,zero,800964 <_fseeko_r+0x130>
  800950:	80801004 	addi	r2,r16,64
  800954:	28800226 	beq	r5,r2,800960 <_fseeko_r+0x12c>
  800958:	8809883a 	mov	r4,r17
  80095c:	08062a40 	call	8062a4 <_free_r>
  800960:	80000c15 	stw	zero,48(r16)
  800964:	8080030b 	ldhu	r2,12(r16)
  800968:	80c00417 	ldw	r3,16(r16)
  80096c:	80000115 	stw	zero,4(r16)
  800970:	10bdf7cc 	andi	r2,r2,63455
  800974:	80c00015 	stw	r3,0(r16)
  800978:	8080030d 	sth	r2,12(r16)
  80097c:	01800204 	movi	r6,8
  800980:	000b883a 	mov	r5,zero
  800984:	81001704 	addi	r4,r16,92
  800988:	08016b80 	call	8016b8 <memset>
  80098c:	003fc806 	br	8008b0 <__alt_mem_onchip_mem+0xff7f88b0>
  800990:	800b883a 	mov	r5,r16
  800994:	8809883a 	mov	r4,r17
  800998:	0805ca80 	call	805ca8 <_fflush_r>
  80099c:	8080030b 	ldhu	r2,12(r16)
  8009a0:	10c4000c 	andi	r3,r2,4096
  8009a4:	18008726 	beq	r3,zero,800bc4 <_fseeko_r+0x390>
  8009a8:	84c01417 	ldw	r19,80(r16)
  8009ac:	10c0010c 	andi	r3,r2,4
  8009b0:	1800431e 	bne	r3,zero,800ac0 <_fseeko_r+0x28c>
  8009b4:	1080020c 	andi	r2,r2,8
  8009b8:	10008026 	beq	r2,zero,800bbc <_fseeko_r+0x388>
  8009bc:	80c00017 	ldw	r3,0(r16)
  8009c0:	80800417 	ldw	r2,16(r16)
  8009c4:	18000226 	beq	r3,zero,8009d0 <_fseeko_r+0x19c>
  8009c8:	1887c83a 	sub	r3,r3,r2
  8009cc:	98e7883a 	add	r19,r19,r3
  8009d0:	aceb883a 	add	r21,r21,r19
  8009d4:	05c00044 	movi	r23,1
  8009d8:	0025883a 	mov	r18,zero
  8009dc:	003fc306 	br	8008ec <__alt_mem_onchip_mem+0xff7f88ec>
  8009e0:	08060840 	call	806084 <__sinit>
  8009e4:	8080030b 	ldhu	r2,12(r16)
  8009e8:	00c04204 	movi	r3,264
  8009ec:	1080420c 	andi	r2,r2,264
  8009f0:	10ffa51e 	bne	r2,r3,800888 <__alt_mem_onchip_mem+0xff7f8888>
  8009f4:	800b883a 	mov	r5,r16
  8009f8:	8809883a 	mov	r4,r17
  8009fc:	0805ca80 	call	805ca8 <_fflush_r>
  800a00:	003fa106 	br	800888 <__alt_mem_onchip_mem+0xff7f8888>
  800a04:	8080030b 	ldhu	r2,12(r16)
  800a08:	00c10004 	movi	r3,1024
  800a0c:	80c01315 	stw	r3,76(r16)
  800a10:	10c4b03a 	or	r2,r2,r3
  800a14:	8080030d 	sth	r2,12(r16)
  800a18:	9000311e 	bne	r18,zero,800ae0 <_fseeko_r+0x2ac>
  800a1c:	a82d883a 	mov	r22,r21
  800a20:	b800371e 	bne	r23,zero,800b00 <_fseeko_r+0x2cc>
  800a24:	8080030b 	ldhu	r2,12(r16)
  800a28:	1084000c 	andi	r2,r2,4096
  800a2c:	10007f26 	beq	r2,zero,800c2c <_fseeko_r+0x3f8>
  800a30:	80801417 	ldw	r2,80(r16)
  800a34:	81800117 	ldw	r6,4(r16)
  800a38:	81400c17 	ldw	r5,48(r16)
  800a3c:	11a7c83a 	sub	r19,r2,r6
  800a40:	28008226 	beq	r5,zero,800c4c <_fseeko_r+0x418>
  800a44:	81c00f17 	ldw	r7,60(r16)
  800a48:	99e7c83a 	sub	r19,r19,r7
  800a4c:	81000e17 	ldw	r4,56(r16)
  800a50:	80800417 	ldw	r2,16(r16)
  800a54:	99a7883a 	add	r19,r19,r6
  800a58:	2087c83a 	sub	r3,r4,r2
  800a5c:	98e7c83a 	sub	r19,r19,r3
  800a60:	38c7883a 	add	r3,r7,r3
  800a64:	b4c02b16 	blt	r22,r19,800b14 <_fseeko_r+0x2e0>
  800a68:	98c9883a 	add	r4,r19,r3
  800a6c:	b100292e 	bgeu	r22,r4,800b14 <_fseeko_r+0x2e0>
  800a70:	b4e7c83a 	sub	r19,r22,r19
  800a74:	14c5883a 	add	r2,r2,r19
  800a78:	1ce7c83a 	sub	r19,r3,r19
  800a7c:	80800015 	stw	r2,0(r16)
  800a80:	84c00115 	stw	r19,4(r16)
  800a84:	28000526 	beq	r5,zero,800a9c <_fseeko_r+0x268>
  800a88:	80801004 	addi	r2,r16,64
  800a8c:	28800226 	beq	r5,r2,800a98 <_fseeko_r+0x264>
  800a90:	8809883a 	mov	r4,r17
  800a94:	08062a40 	call	8062a4 <_free_r>
  800a98:	80000c15 	stw	zero,48(r16)
  800a9c:	8080030b 	ldhu	r2,12(r16)
  800aa0:	01800204 	movi	r6,8
  800aa4:	000b883a 	mov	r5,zero
  800aa8:	10bff7cc 	andi	r2,r2,65503
  800aac:	8080030d 	sth	r2,12(r16)
  800ab0:	81001704 	addi	r4,r16,92
  800ab4:	08016b80 	call	8016b8 <memset>
  800ab8:	0027883a 	mov	r19,zero
  800abc:	003f7c06 	br	8008b0 <__alt_mem_onchip_mem+0xff7f88b0>
  800ac0:	80c00117 	ldw	r3,4(r16)
  800ac4:	80800c17 	ldw	r2,48(r16)
  800ac8:	98e7c83a 	sub	r19,r19,r3
  800acc:	10003b26 	beq	r2,zero,800bbc <_fseeko_r+0x388>
  800ad0:	80c00f17 	ldw	r3,60(r16)
  800ad4:	80800417 	ldw	r2,16(r16)
  800ad8:	98e7c83a 	sub	r19,r19,r3
  800adc:	003fbc06 	br	8009d0 <__alt_mem_onchip_mem+0xff7f89d0>
  800ae0:	8140038f 	ldh	r5,14(r16)
  800ae4:	d80d883a 	mov	r6,sp
  800ae8:	8809883a 	mov	r4,r17
  800aec:	0800c940 	call	800c94 <_fstat_r>
  800af0:	103f891e 	bne	r2,zero,800918 <__alt_mem_onchip_mem+0xff7f8918>
  800af4:	dd800417 	ldw	r22,16(sp)
  800af8:	adad883a 	add	r22,r21,r22
  800afc:	b83fc926 	beq	r23,zero,800a24 <__alt_mem_onchip_mem+0xff7f8a24>
  800b00:	81400c17 	ldw	r5,48(r16)
  800b04:	81800117 	ldw	r6,4(r16)
  800b08:	28005026 	beq	r5,zero,800c4c <_fseeko_r+0x418>
  800b0c:	81c00f17 	ldw	r7,60(r16)
  800b10:	003fce06 	br	800a4c <__alt_mem_onchip_mem+0xff7f8a4c>
  800b14:	84c01317 	ldw	r19,76(r16)
  800b18:	81400717 	ldw	r5,28(r16)
  800b1c:	000f883a 	mov	r7,zero
  800b20:	04e7c83a 	sub	r19,zero,r19
  800b24:	9da6703a 	and	r19,r19,r22
  800b28:	980d883a 	mov	r6,r19
  800b2c:	8809883a 	mov	r4,r17
  800b30:	a03ee83a 	callr	r20
  800b34:	00ffffc4 	movi	r3,-1
  800b38:	10ff7726 	beq	r2,r3,800918 <__alt_mem_onchip_mem+0xff7f8918>
  800b3c:	80800417 	ldw	r2,16(r16)
  800b40:	81400c17 	ldw	r5,48(r16)
  800b44:	80000115 	stw	zero,4(r16)
  800b48:	80800015 	stw	r2,0(r16)
  800b4c:	28000526 	beq	r5,zero,800b64 <_fseeko_r+0x330>
  800b50:	80801004 	addi	r2,r16,64
  800b54:	28800226 	beq	r5,r2,800b60 <_fseeko_r+0x32c>
  800b58:	8809883a 	mov	r4,r17
  800b5c:	08062a40 	call	8062a4 <_free_r>
  800b60:	80000c15 	stw	zero,48(r16)
  800b64:	8080030b 	ldhu	r2,12(r16)
  800b68:	b4e7c83a 	sub	r19,r22,r19
  800b6c:	10bff7cc 	andi	r2,r2,65503
  800b70:	8080030d 	sth	r2,12(r16)
  800b74:	98000b26 	beq	r19,zero,800ba4 <_fseeko_r+0x370>
  800b78:	800b883a 	mov	r5,r16
  800b7c:	8809883a 	mov	r4,r17
  800b80:	08019300 	call	801930 <__srefill_r>
  800b84:	103f641e 	bne	r2,zero,800918 <__alt_mem_onchip_mem+0xff7f8918>
  800b88:	80800117 	ldw	r2,4(r16)
  800b8c:	14ff6236 	bltu	r2,r19,800918 <__alt_mem_onchip_mem+0xff7f8918>
  800b90:	80c00017 	ldw	r3,0(r16)
  800b94:	14c5c83a 	sub	r2,r2,r19
  800b98:	80800115 	stw	r2,4(r16)
  800b9c:	1ce7883a 	add	r19,r3,r19
  800ba0:	84c00015 	stw	r19,0(r16)
  800ba4:	01800204 	movi	r6,8
  800ba8:	000b883a 	mov	r5,zero
  800bac:	81001704 	addi	r4,r16,92
  800bb0:	08016b80 	call	8016b8 <memset>
  800bb4:	0027883a 	mov	r19,zero
  800bb8:	003f3d06 	br	8008b0 <__alt_mem_onchip_mem+0xff7f88b0>
  800bbc:	80800417 	ldw	r2,16(r16)
  800bc0:	003f8306 	br	8009d0 <__alt_mem_onchip_mem+0xff7f89d0>
  800bc4:	81400717 	ldw	r5,28(r16)
  800bc8:	900f883a 	mov	r7,r18
  800bcc:	000d883a 	mov	r6,zero
  800bd0:	8809883a 	mov	r4,r17
  800bd4:	a03ee83a 	callr	r20
  800bd8:	1027883a 	mov	r19,r2
  800bdc:	00bfffc4 	movi	r2,-1
  800be0:	98bf3226 	beq	r19,r2,8008ac <__alt_mem_onchip_mem+0xff7f88ac>
  800be4:	8080030b 	ldhu	r2,12(r16)
  800be8:	003f7006 	br	8009ac <__alt_mem_onchip_mem+0xff7f89ac>
  800bec:	8140038f 	ldh	r5,14(r16)
  800bf0:	283f4716 	blt	r5,zero,800910 <__alt_mem_onchip_mem+0xff7f8910>
  800bf4:	d80d883a 	mov	r6,sp
  800bf8:	8809883a 	mov	r4,r17
  800bfc:	0800c940 	call	800c94 <_fstat_r>
  800c00:	1000041e 	bne	r2,zero,800c14 <_fseeko_r+0x3e0>
  800c04:	d8800117 	ldw	r2,4(sp)
  800c08:	00e00014 	movui	r3,32768
  800c0c:	10bc000c 	andi	r2,r2,61440
  800c10:	10ff7c26 	beq	r2,r3,800a04 <__alt_mem_onchip_mem+0xff7f8a04>
  800c14:	8080030b 	ldhu	r2,12(r16)
  800c18:	003f3d06 	br	800910 <__alt_mem_onchip_mem+0xff7f8910>
  800c1c:	800b883a 	mov	r5,r16
  800c20:	8809883a 	mov	r4,r17
  800c24:	0800cf00 	call	800cf0 <__smakebuf_r>
  800c28:	003f3106 	br	8008f0 <__alt_mem_onchip_mem+0xff7f88f0>
  800c2c:	81400717 	ldw	r5,28(r16)
  800c30:	01c00044 	movi	r7,1
  800c34:	000d883a 	mov	r6,zero
  800c38:	8809883a 	mov	r4,r17
  800c3c:	a03ee83a 	callr	r20
  800c40:	00ffffc4 	movi	r3,-1
  800c44:	10ff7b1e 	bne	r2,r3,800a34 <__alt_mem_onchip_mem+0xff7f8a34>
  800c48:	003f3306 	br	800918 <__alt_mem_onchip_mem+0xff7f8918>
  800c4c:	80c00017 	ldw	r3,0(r16)
  800c50:	80800417 	ldw	r2,16(r16)
  800c54:	000b883a 	mov	r5,zero
  800c58:	1887c83a 	sub	r3,r3,r2
  800c5c:	98e7c83a 	sub	r19,r19,r3
  800c60:	30c7883a 	add	r3,r6,r3
  800c64:	003f7f06 	br	800a64 <__alt_mem_onchip_mem+0xff7f8a64>
  800c68:	00800744 	movi	r2,29
  800c6c:	88800015 	stw	r2,0(r17)
  800c70:	04ffffc4 	movi	r19,-1
  800c74:	003f0e06 	br	8008b0 <__alt_mem_onchip_mem+0xff7f88b0>

00800c78 <fseeko>:
  800c78:	00802074 	movhi	r2,129
  800c7c:	108f4904 	addi	r2,r2,15652
  800c80:	300f883a 	mov	r7,r6
  800c84:	280d883a 	mov	r6,r5
  800c88:	200b883a 	mov	r5,r4
  800c8c:	11000017 	ldw	r4,0(r2)
  800c90:	08008341 	jmpi	800834 <_fseeko_r>

00800c94 <_fstat_r>:
  800c94:	defffd04 	addi	sp,sp,-12
  800c98:	2805883a 	mov	r2,r5
  800c9c:	dc000015 	stw	r16,0(sp)
  800ca0:	04002074 	movhi	r16,129
  800ca4:	dc400115 	stw	r17,4(sp)
  800ca8:	8416a104 	addi	r16,r16,23172
  800cac:	2023883a 	mov	r17,r4
  800cb0:	300b883a 	mov	r5,r6
  800cb4:	1009883a 	mov	r4,r2
  800cb8:	dfc00215 	stw	ra,8(sp)
  800cbc:	80000015 	stw	zero,0(r16)
  800cc0:	080d9b80 	call	80d9b8 <fstat>
  800cc4:	00ffffc4 	movi	r3,-1
  800cc8:	10c00526 	beq	r2,r3,800ce0 <_fstat_r+0x4c>
  800ccc:	dfc00217 	ldw	ra,8(sp)
  800cd0:	dc400117 	ldw	r17,4(sp)
  800cd4:	dc000017 	ldw	r16,0(sp)
  800cd8:	dec00304 	addi	sp,sp,12
  800cdc:	f800283a 	ret
  800ce0:	80c00017 	ldw	r3,0(r16)
  800ce4:	183ff926 	beq	r3,zero,800ccc <__alt_mem_onchip_mem+0xff7f8ccc>
  800ce8:	88c00015 	stw	r3,0(r17)
  800cec:	003ff706 	br	800ccc <__alt_mem_onchip_mem+0xff7f8ccc>

00800cf0 <__smakebuf_r>:
  800cf0:	2880030b 	ldhu	r2,12(r5)
  800cf4:	10c0008c 	andi	r3,r2,2
  800cf8:	1800411e 	bne	r3,zero,800e00 <__smakebuf_r+0x110>
  800cfc:	deffec04 	addi	sp,sp,-80
  800d00:	dc000f15 	stw	r16,60(sp)
  800d04:	2821883a 	mov	r16,r5
  800d08:	2940038f 	ldh	r5,14(r5)
  800d0c:	dc401015 	stw	r17,64(sp)
  800d10:	dfc01315 	stw	ra,76(sp)
  800d14:	dcc01215 	stw	r19,72(sp)
  800d18:	dc801115 	stw	r18,68(sp)
  800d1c:	2023883a 	mov	r17,r4
  800d20:	28001c16 	blt	r5,zero,800d94 <__smakebuf_r+0xa4>
  800d24:	d80d883a 	mov	r6,sp
  800d28:	0800c940 	call	800c94 <_fstat_r>
  800d2c:	10001816 	blt	r2,zero,800d90 <__smakebuf_r+0xa0>
  800d30:	d8800117 	ldw	r2,4(sp)
  800d34:	00e00014 	movui	r3,32768
  800d38:	10bc000c 	andi	r2,r2,61440
  800d3c:	14c80020 	cmpeqi	r19,r2,8192
  800d40:	10c03726 	beq	r2,r3,800e20 <__smakebuf_r+0x130>
  800d44:	80c0030b 	ldhu	r3,12(r16)
  800d48:	18c20014 	ori	r3,r3,2048
  800d4c:	80c0030d 	sth	r3,12(r16)
  800d50:	00c80004 	movi	r3,8192
  800d54:	10c0521e 	bne	r2,r3,800ea0 <__smakebuf_r+0x1b0>
  800d58:	8140038f 	ldh	r5,14(r16)
  800d5c:	8809883a 	mov	r4,r17
  800d60:	0806bf80 	call	806bf8 <_isatty_r>
  800d64:	10004c26 	beq	r2,zero,800e98 <__smakebuf_r+0x1a8>
  800d68:	8080030b 	ldhu	r2,12(r16)
  800d6c:	80c010c4 	addi	r3,r16,67
  800d70:	80c00015 	stw	r3,0(r16)
  800d74:	10800054 	ori	r2,r2,1
  800d78:	8080030d 	sth	r2,12(r16)
  800d7c:	00800044 	movi	r2,1
  800d80:	80c00415 	stw	r3,16(r16)
  800d84:	80800515 	stw	r2,20(r16)
  800d88:	04810004 	movi	r18,1024
  800d8c:	00000706 	br	800dac <__smakebuf_r+0xbc>
  800d90:	8080030b 	ldhu	r2,12(r16)
  800d94:	10c0200c 	andi	r3,r2,128
  800d98:	18001f1e 	bne	r3,zero,800e18 <__smakebuf_r+0x128>
  800d9c:	04810004 	movi	r18,1024
  800da0:	10820014 	ori	r2,r2,2048
  800da4:	8080030d 	sth	r2,12(r16)
  800da8:	0027883a 	mov	r19,zero
  800dac:	900b883a 	mov	r5,r18
  800db0:	8809883a 	mov	r4,r17
  800db4:	0800eac0 	call	800eac <_malloc_r>
  800db8:	10002c26 	beq	r2,zero,800e6c <__smakebuf_r+0x17c>
  800dbc:	80c0030b 	ldhu	r3,12(r16)
  800dc0:	01002034 	movhi	r4,128
  800dc4:	21174f04 	addi	r4,r4,23868
  800dc8:	89000f15 	stw	r4,60(r17)
  800dcc:	18c02014 	ori	r3,r3,128
  800dd0:	80c0030d 	sth	r3,12(r16)
  800dd4:	80800015 	stw	r2,0(r16)
  800dd8:	80800415 	stw	r2,16(r16)
  800ddc:	84800515 	stw	r18,20(r16)
  800de0:	98001a1e 	bne	r19,zero,800e4c <__smakebuf_r+0x15c>
  800de4:	dfc01317 	ldw	ra,76(sp)
  800de8:	dcc01217 	ldw	r19,72(sp)
  800dec:	dc801117 	ldw	r18,68(sp)
  800df0:	dc401017 	ldw	r17,64(sp)
  800df4:	dc000f17 	ldw	r16,60(sp)
  800df8:	dec01404 	addi	sp,sp,80
  800dfc:	f800283a 	ret
  800e00:	288010c4 	addi	r2,r5,67
  800e04:	28800015 	stw	r2,0(r5)
  800e08:	28800415 	stw	r2,16(r5)
  800e0c:	00800044 	movi	r2,1
  800e10:	28800515 	stw	r2,20(r5)
  800e14:	f800283a 	ret
  800e18:	04801004 	movi	r18,64
  800e1c:	003fe006 	br	800da0 <__alt_mem_onchip_mem+0xff7f8da0>
  800e20:	81000a17 	ldw	r4,40(r16)
  800e24:	00c02034 	movhi	r3,128
  800e28:	18c70c04 	addi	r3,r3,7216
  800e2c:	20ffc51e 	bne	r4,r3,800d44 <__alt_mem_onchip_mem+0xff7f8d44>
  800e30:	8080030b 	ldhu	r2,12(r16)
  800e34:	04810004 	movi	r18,1024
  800e38:	84801315 	stw	r18,76(r16)
  800e3c:	1484b03a 	or	r2,r2,r18
  800e40:	8080030d 	sth	r2,12(r16)
  800e44:	0027883a 	mov	r19,zero
  800e48:	003fd806 	br	800dac <__alt_mem_onchip_mem+0xff7f8dac>
  800e4c:	8140038f 	ldh	r5,14(r16)
  800e50:	8809883a 	mov	r4,r17
  800e54:	0806bf80 	call	806bf8 <_isatty_r>
  800e58:	103fe226 	beq	r2,zero,800de4 <__alt_mem_onchip_mem+0xff7f8de4>
  800e5c:	8080030b 	ldhu	r2,12(r16)
  800e60:	10800054 	ori	r2,r2,1
  800e64:	8080030d 	sth	r2,12(r16)
  800e68:	003fde06 	br	800de4 <__alt_mem_onchip_mem+0xff7f8de4>
  800e6c:	8080030b 	ldhu	r2,12(r16)
  800e70:	10c0800c 	andi	r3,r2,512
  800e74:	183fdb1e 	bne	r3,zero,800de4 <__alt_mem_onchip_mem+0xff7f8de4>
  800e78:	10800094 	ori	r2,r2,2
  800e7c:	80c010c4 	addi	r3,r16,67
  800e80:	8080030d 	sth	r2,12(r16)
  800e84:	00800044 	movi	r2,1
  800e88:	80c00015 	stw	r3,0(r16)
  800e8c:	80c00415 	stw	r3,16(r16)
  800e90:	80800515 	stw	r2,20(r16)
  800e94:	003fd306 	br	800de4 <__alt_mem_onchip_mem+0xff7f8de4>
  800e98:	04810004 	movi	r18,1024
  800e9c:	003fc306 	br	800dac <__alt_mem_onchip_mem+0xff7f8dac>
  800ea0:	0027883a 	mov	r19,zero
  800ea4:	04810004 	movi	r18,1024
  800ea8:	003fc006 	br	800dac <__alt_mem_onchip_mem+0xff7f8dac>

00800eac <_malloc_r>:
  800eac:	defff504 	addi	sp,sp,-44
  800eb0:	dc800315 	stw	r18,12(sp)
  800eb4:	dfc00a15 	stw	ra,40(sp)
  800eb8:	df000915 	stw	fp,36(sp)
  800ebc:	ddc00815 	stw	r23,32(sp)
  800ec0:	dd800715 	stw	r22,28(sp)
  800ec4:	dd400615 	stw	r21,24(sp)
  800ec8:	dd000515 	stw	r20,20(sp)
  800ecc:	dcc00415 	stw	r19,16(sp)
  800ed0:	dc400215 	stw	r17,8(sp)
  800ed4:	dc000115 	stw	r16,4(sp)
  800ed8:	288002c4 	addi	r2,r5,11
  800edc:	00c00584 	movi	r3,22
  800ee0:	2025883a 	mov	r18,r4
  800ee4:	18807f2e 	bgeu	r3,r2,8010e4 <_malloc_r+0x238>
  800ee8:	047ffe04 	movi	r17,-8
  800eec:	1462703a 	and	r17,r2,r17
  800ef0:	8800a316 	blt	r17,zero,801180 <_malloc_r+0x2d4>
  800ef4:	8940a236 	bltu	r17,r5,801180 <_malloc_r+0x2d4>
  800ef8:	080ddc00 	call	80ddc0 <__malloc_lock>
  800efc:	00807dc4 	movi	r2,503
  800f00:	1441e92e 	bgeu	r2,r17,8016a8 <_malloc_r+0x7fc>
  800f04:	8804d27a 	srli	r2,r17,9
  800f08:	1000a126 	beq	r2,zero,801190 <_malloc_r+0x2e4>
  800f0c:	00c00104 	movi	r3,4
  800f10:	18811e36 	bltu	r3,r2,80138c <_malloc_r+0x4e0>
  800f14:	8804d1ba 	srli	r2,r17,6
  800f18:	12000e44 	addi	r8,r2,57
  800f1c:	11c00e04 	addi	r7,r2,56
  800f20:	4209883a 	add	r4,r8,r8
  800f24:	04c02074 	movhi	r19,129
  800f28:	2109883a 	add	r4,r4,r4
  800f2c:	9cc91c04 	addi	r19,r19,9328
  800f30:	2109883a 	add	r4,r4,r4
  800f34:	9909883a 	add	r4,r19,r4
  800f38:	24000117 	ldw	r16,4(r4)
  800f3c:	213ffe04 	addi	r4,r4,-8
  800f40:	24009726 	beq	r4,r16,8011a0 <_malloc_r+0x2f4>
  800f44:	80800117 	ldw	r2,4(r16)
  800f48:	01bfff04 	movi	r6,-4
  800f4c:	014003c4 	movi	r5,15
  800f50:	1184703a 	and	r2,r2,r6
  800f54:	1447c83a 	sub	r3,r2,r17
  800f58:	28c00716 	blt	r5,r3,800f78 <_malloc_r+0xcc>
  800f5c:	1800920e 	bge	r3,zero,8011a8 <_malloc_r+0x2fc>
  800f60:	84000317 	ldw	r16,12(r16)
  800f64:	24008e26 	beq	r4,r16,8011a0 <_malloc_r+0x2f4>
  800f68:	80800117 	ldw	r2,4(r16)
  800f6c:	1184703a 	and	r2,r2,r6
  800f70:	1447c83a 	sub	r3,r2,r17
  800f74:	28fff90e 	bge	r5,r3,800f5c <__alt_mem_onchip_mem+0xff7f8f5c>
  800f78:	3809883a 	mov	r4,r7
  800f7c:	01802074 	movhi	r6,129
  800f80:	9c000417 	ldw	r16,16(r19)
  800f84:	31891c04 	addi	r6,r6,9328
  800f88:	32000204 	addi	r8,r6,8
  800f8c:	82013426 	beq	r16,r8,801460 <_malloc_r+0x5b4>
  800f90:	80c00117 	ldw	r3,4(r16)
  800f94:	00bfff04 	movi	r2,-4
  800f98:	188e703a 	and	r7,r3,r2
  800f9c:	3c45c83a 	sub	r2,r7,r17
  800fa0:	00c003c4 	movi	r3,15
  800fa4:	18811f16 	blt	r3,r2,801424 <_malloc_r+0x578>
  800fa8:	32000515 	stw	r8,20(r6)
  800fac:	32000415 	stw	r8,16(r6)
  800fb0:	10007f0e 	bge	r2,zero,8011b0 <_malloc_r+0x304>
  800fb4:	00807fc4 	movi	r2,511
  800fb8:	11c0fd36 	bltu	r2,r7,8013b0 <_malloc_r+0x504>
  800fbc:	3806d0fa 	srli	r3,r7,3
  800fc0:	01c00044 	movi	r7,1
  800fc4:	30800117 	ldw	r2,4(r6)
  800fc8:	19400044 	addi	r5,r3,1
  800fcc:	294b883a 	add	r5,r5,r5
  800fd0:	1807d0ba 	srai	r3,r3,2
  800fd4:	294b883a 	add	r5,r5,r5
  800fd8:	294b883a 	add	r5,r5,r5
  800fdc:	298b883a 	add	r5,r5,r6
  800fe0:	38c6983a 	sll	r3,r7,r3
  800fe4:	29c00017 	ldw	r7,0(r5)
  800fe8:	2a7ffe04 	addi	r9,r5,-8
  800fec:	1886b03a 	or	r3,r3,r2
  800ff0:	82400315 	stw	r9,12(r16)
  800ff4:	81c00215 	stw	r7,8(r16)
  800ff8:	30c00115 	stw	r3,4(r6)
  800ffc:	2c000015 	stw	r16,0(r5)
  801000:	3c000315 	stw	r16,12(r7)
  801004:	2005d0ba 	srai	r2,r4,2
  801008:	01400044 	movi	r5,1
  80100c:	288a983a 	sll	r5,r5,r2
  801010:	19406f36 	bltu	r3,r5,8011d0 <_malloc_r+0x324>
  801014:	28c4703a 	and	r2,r5,r3
  801018:	10000a1e 	bne	r2,zero,801044 <_malloc_r+0x198>
  80101c:	00bfff04 	movi	r2,-4
  801020:	294b883a 	add	r5,r5,r5
  801024:	2088703a 	and	r4,r4,r2
  801028:	28c4703a 	and	r2,r5,r3
  80102c:	21000104 	addi	r4,r4,4
  801030:	1000041e 	bne	r2,zero,801044 <_malloc_r+0x198>
  801034:	294b883a 	add	r5,r5,r5
  801038:	28c4703a 	and	r2,r5,r3
  80103c:	21000104 	addi	r4,r4,4
  801040:	103ffc26 	beq	r2,zero,801034 <__alt_mem_onchip_mem+0xff7f9034>
  801044:	02bfff04 	movi	r10,-4
  801048:	024003c4 	movi	r9,15
  80104c:	21800044 	addi	r6,r4,1
  801050:	318d883a 	add	r6,r6,r6
  801054:	318d883a 	add	r6,r6,r6
  801058:	318d883a 	add	r6,r6,r6
  80105c:	998d883a 	add	r6,r19,r6
  801060:	333ffe04 	addi	r12,r6,-8
  801064:	2017883a 	mov	r11,r4
  801068:	31800104 	addi	r6,r6,4
  80106c:	34000017 	ldw	r16,0(r6)
  801070:	31fffd04 	addi	r7,r6,-12
  801074:	81c0041e 	bne	r16,r7,801088 <_malloc_r+0x1dc>
  801078:	0000fb06 	br	801468 <_malloc_r+0x5bc>
  80107c:	1801030e 	bge	r3,zero,80148c <_malloc_r+0x5e0>
  801080:	84000317 	ldw	r16,12(r16)
  801084:	81c0f826 	beq	r16,r7,801468 <_malloc_r+0x5bc>
  801088:	80800117 	ldw	r2,4(r16)
  80108c:	1284703a 	and	r2,r2,r10
  801090:	1447c83a 	sub	r3,r2,r17
  801094:	48fff90e 	bge	r9,r3,80107c <__alt_mem_onchip_mem+0xff7f907c>
  801098:	80800317 	ldw	r2,12(r16)
  80109c:	81000217 	ldw	r4,8(r16)
  8010a0:	89400054 	ori	r5,r17,1
  8010a4:	81400115 	stw	r5,4(r16)
  8010a8:	20800315 	stw	r2,12(r4)
  8010ac:	11000215 	stw	r4,8(r2)
  8010b0:	8463883a 	add	r17,r16,r17
  8010b4:	9c400515 	stw	r17,20(r19)
  8010b8:	9c400415 	stw	r17,16(r19)
  8010bc:	18800054 	ori	r2,r3,1
  8010c0:	88800115 	stw	r2,4(r17)
  8010c4:	8a000315 	stw	r8,12(r17)
  8010c8:	8a000215 	stw	r8,8(r17)
  8010cc:	88e3883a 	add	r17,r17,r3
  8010d0:	88c00015 	stw	r3,0(r17)
  8010d4:	9009883a 	mov	r4,r18
  8010d8:	080dde40 	call	80dde4 <__malloc_unlock>
  8010dc:	80800204 	addi	r2,r16,8
  8010e0:	00001b06 	br	801150 <_malloc_r+0x2a4>
  8010e4:	04400404 	movi	r17,16
  8010e8:	89402536 	bltu	r17,r5,801180 <_malloc_r+0x2d4>
  8010ec:	080ddc00 	call	80ddc0 <__malloc_lock>
  8010f0:	00800184 	movi	r2,6
  8010f4:	01000084 	movi	r4,2
  8010f8:	04c02074 	movhi	r19,129
  8010fc:	1085883a 	add	r2,r2,r2
  801100:	9cc91c04 	addi	r19,r19,9328
  801104:	1085883a 	add	r2,r2,r2
  801108:	9885883a 	add	r2,r19,r2
  80110c:	14000117 	ldw	r16,4(r2)
  801110:	10fffe04 	addi	r3,r2,-8
  801114:	80c0d926 	beq	r16,r3,80147c <_malloc_r+0x5d0>
  801118:	80c00117 	ldw	r3,4(r16)
  80111c:	81000317 	ldw	r4,12(r16)
  801120:	00bfff04 	movi	r2,-4
  801124:	1884703a 	and	r2,r3,r2
  801128:	81400217 	ldw	r5,8(r16)
  80112c:	8085883a 	add	r2,r16,r2
  801130:	10c00117 	ldw	r3,4(r2)
  801134:	29000315 	stw	r4,12(r5)
  801138:	21400215 	stw	r5,8(r4)
  80113c:	18c00054 	ori	r3,r3,1
  801140:	10c00115 	stw	r3,4(r2)
  801144:	9009883a 	mov	r4,r18
  801148:	080dde40 	call	80dde4 <__malloc_unlock>
  80114c:	80800204 	addi	r2,r16,8
  801150:	dfc00a17 	ldw	ra,40(sp)
  801154:	df000917 	ldw	fp,36(sp)
  801158:	ddc00817 	ldw	r23,32(sp)
  80115c:	dd800717 	ldw	r22,28(sp)
  801160:	dd400617 	ldw	r21,24(sp)
  801164:	dd000517 	ldw	r20,20(sp)
  801168:	dcc00417 	ldw	r19,16(sp)
  80116c:	dc800317 	ldw	r18,12(sp)
  801170:	dc400217 	ldw	r17,8(sp)
  801174:	dc000117 	ldw	r16,4(sp)
  801178:	dec00b04 	addi	sp,sp,44
  80117c:	f800283a 	ret
  801180:	00800304 	movi	r2,12
  801184:	90800015 	stw	r2,0(r18)
  801188:	0005883a 	mov	r2,zero
  80118c:	003ff006 	br	801150 <__alt_mem_onchip_mem+0xff7f9150>
  801190:	01002004 	movi	r4,128
  801194:	02001004 	movi	r8,64
  801198:	01c00fc4 	movi	r7,63
  80119c:	003f6106 	br	800f24 <__alt_mem_onchip_mem+0xff7f8f24>
  8011a0:	4009883a 	mov	r4,r8
  8011a4:	003f7506 	br	800f7c <__alt_mem_onchip_mem+0xff7f8f7c>
  8011a8:	81000317 	ldw	r4,12(r16)
  8011ac:	003fde06 	br	801128 <__alt_mem_onchip_mem+0xff7f9128>
  8011b0:	81c5883a 	add	r2,r16,r7
  8011b4:	11400117 	ldw	r5,4(r2)
  8011b8:	9009883a 	mov	r4,r18
  8011bc:	29400054 	ori	r5,r5,1
  8011c0:	11400115 	stw	r5,4(r2)
  8011c4:	080dde40 	call	80dde4 <__malloc_unlock>
  8011c8:	80800204 	addi	r2,r16,8
  8011cc:	003fe006 	br	801150 <__alt_mem_onchip_mem+0xff7f9150>
  8011d0:	9c000217 	ldw	r16,8(r19)
  8011d4:	00bfff04 	movi	r2,-4
  8011d8:	85800117 	ldw	r22,4(r16)
  8011dc:	b0ac703a 	and	r22,r22,r2
  8011e0:	b4400336 	bltu	r22,r17,8011f0 <_malloc_r+0x344>
  8011e4:	b445c83a 	sub	r2,r22,r17
  8011e8:	00c003c4 	movi	r3,15
  8011ec:	18805d16 	blt	r3,r2,801364 <_malloc_r+0x4b8>
  8011f0:	05c02074 	movhi	r23,129
  8011f4:	00802074 	movhi	r2,129
  8011f8:	1096a404 	addi	r2,r2,23184
  8011fc:	bdcf4a04 	addi	r23,r23,15656
  801200:	15400017 	ldw	r21,0(r2)
  801204:	b8c00017 	ldw	r3,0(r23)
  801208:	00bfffc4 	movi	r2,-1
  80120c:	858d883a 	add	r6,r16,r22
  801210:	8d6b883a 	add	r21,r17,r21
  801214:	1880ea26 	beq	r3,r2,8015c0 <_malloc_r+0x714>
  801218:	ad4403c4 	addi	r21,r21,4111
  80121c:	00bc0004 	movi	r2,-4096
  801220:	a8aa703a 	and	r21,r21,r2
  801224:	a80b883a 	mov	r5,r21
  801228:	9009883a 	mov	r4,r18
  80122c:	d9800015 	stw	r6,0(sp)
  801230:	0801b040 	call	801b04 <_sbrk_r>
  801234:	1029883a 	mov	r20,r2
  801238:	00bfffc4 	movi	r2,-1
  80123c:	d9800017 	ldw	r6,0(sp)
  801240:	a080e826 	beq	r20,r2,8015e4 <_malloc_r+0x738>
  801244:	a180a636 	bltu	r20,r6,8014e0 <_malloc_r+0x634>
  801248:	07002074 	movhi	fp,129
  80124c:	e716af04 	addi	fp,fp,23228
  801250:	e0800017 	ldw	r2,0(fp)
  801254:	a887883a 	add	r3,r21,r2
  801258:	e0c00015 	stw	r3,0(fp)
  80125c:	3500e626 	beq	r6,r20,8015f8 <_malloc_r+0x74c>
  801260:	b9000017 	ldw	r4,0(r23)
  801264:	00bfffc4 	movi	r2,-1
  801268:	2080ee26 	beq	r4,r2,801624 <_malloc_r+0x778>
  80126c:	a185c83a 	sub	r2,r20,r6
  801270:	10c5883a 	add	r2,r2,r3
  801274:	e0800015 	stw	r2,0(fp)
  801278:	a0c001cc 	andi	r3,r20,7
  80127c:	1800bc26 	beq	r3,zero,801570 <_malloc_r+0x6c4>
  801280:	a0e9c83a 	sub	r20,r20,r3
  801284:	00840204 	movi	r2,4104
  801288:	a5000204 	addi	r20,r20,8
  80128c:	10c7c83a 	sub	r3,r2,r3
  801290:	a545883a 	add	r2,r20,r21
  801294:	1083ffcc 	andi	r2,r2,4095
  801298:	18abc83a 	sub	r21,r3,r2
  80129c:	a80b883a 	mov	r5,r21
  8012a0:	9009883a 	mov	r4,r18
  8012a4:	0801b040 	call	801b04 <_sbrk_r>
  8012a8:	00ffffc4 	movi	r3,-1
  8012ac:	10c0e126 	beq	r2,r3,801634 <_malloc_r+0x788>
  8012b0:	1505c83a 	sub	r2,r2,r20
  8012b4:	1545883a 	add	r2,r2,r21
  8012b8:	10800054 	ori	r2,r2,1
  8012bc:	e0c00017 	ldw	r3,0(fp)
  8012c0:	9d000215 	stw	r20,8(r19)
  8012c4:	a0800115 	stw	r2,4(r20)
  8012c8:	a8c7883a 	add	r3,r21,r3
  8012cc:	e0c00015 	stw	r3,0(fp)
  8012d0:	84c00e26 	beq	r16,r19,80130c <_malloc_r+0x460>
  8012d4:	018003c4 	movi	r6,15
  8012d8:	3580a72e 	bgeu	r6,r22,801578 <_malloc_r+0x6cc>
  8012dc:	81400117 	ldw	r5,4(r16)
  8012e0:	013ffe04 	movi	r4,-8
  8012e4:	b0bffd04 	addi	r2,r22,-12
  8012e8:	1104703a 	and	r2,r2,r4
  8012ec:	2900004c 	andi	r4,r5,1
  8012f0:	2088b03a 	or	r4,r4,r2
  8012f4:	81000115 	stw	r4,4(r16)
  8012f8:	01400144 	movi	r5,5
  8012fc:	8089883a 	add	r4,r16,r2
  801300:	21400115 	stw	r5,4(r4)
  801304:	21400215 	stw	r5,8(r4)
  801308:	3080cd36 	bltu	r6,r2,801640 <_malloc_r+0x794>
  80130c:	00802074 	movhi	r2,129
  801310:	1096a304 	addi	r2,r2,23180
  801314:	11000017 	ldw	r4,0(r2)
  801318:	20c0012e 	bgeu	r4,r3,801320 <_malloc_r+0x474>
  80131c:	10c00015 	stw	r3,0(r2)
  801320:	00802074 	movhi	r2,129
  801324:	1096a204 	addi	r2,r2,23176
  801328:	11000017 	ldw	r4,0(r2)
  80132c:	9c000217 	ldw	r16,8(r19)
  801330:	20c0012e 	bgeu	r4,r3,801338 <_malloc_r+0x48c>
  801334:	10c00015 	stw	r3,0(r2)
  801338:	80c00117 	ldw	r3,4(r16)
  80133c:	00bfff04 	movi	r2,-4
  801340:	1886703a 	and	r3,r3,r2
  801344:	1c45c83a 	sub	r2,r3,r17
  801348:	1c400236 	bltu	r3,r17,801354 <_malloc_r+0x4a8>
  80134c:	00c003c4 	movi	r3,15
  801350:	18800416 	blt	r3,r2,801364 <_malloc_r+0x4b8>
  801354:	9009883a 	mov	r4,r18
  801358:	080dde40 	call	80dde4 <__malloc_unlock>
  80135c:	0005883a 	mov	r2,zero
  801360:	003f7b06 	br	801150 <__alt_mem_onchip_mem+0xff7f9150>
  801364:	88c00054 	ori	r3,r17,1
  801368:	80c00115 	stw	r3,4(r16)
  80136c:	8463883a 	add	r17,r16,r17
  801370:	10800054 	ori	r2,r2,1
  801374:	9c400215 	stw	r17,8(r19)
  801378:	88800115 	stw	r2,4(r17)
  80137c:	9009883a 	mov	r4,r18
  801380:	080dde40 	call	80dde4 <__malloc_unlock>
  801384:	80800204 	addi	r2,r16,8
  801388:	003f7106 	br	801150 <__alt_mem_onchip_mem+0xff7f9150>
  80138c:	00c00504 	movi	r3,20
  801390:	18804a2e 	bgeu	r3,r2,8014bc <_malloc_r+0x610>
  801394:	00c01504 	movi	r3,84
  801398:	18806e36 	bltu	r3,r2,801554 <_malloc_r+0x6a8>
  80139c:	8804d33a 	srli	r2,r17,12
  8013a0:	12001bc4 	addi	r8,r2,111
  8013a4:	11c01b84 	addi	r7,r2,110
  8013a8:	4209883a 	add	r4,r8,r8
  8013ac:	003edd06 	br	800f24 <__alt_mem_onchip_mem+0xff7f8f24>
  8013b0:	3804d27a 	srli	r2,r7,9
  8013b4:	00c00104 	movi	r3,4
  8013b8:	1880442e 	bgeu	r3,r2,8014cc <_malloc_r+0x620>
  8013bc:	00c00504 	movi	r3,20
  8013c0:	18808136 	bltu	r3,r2,8015c8 <_malloc_r+0x71c>
  8013c4:	11401704 	addi	r5,r2,92
  8013c8:	10c016c4 	addi	r3,r2,91
  8013cc:	294b883a 	add	r5,r5,r5
  8013d0:	294b883a 	add	r5,r5,r5
  8013d4:	294b883a 	add	r5,r5,r5
  8013d8:	994b883a 	add	r5,r19,r5
  8013dc:	28800017 	ldw	r2,0(r5)
  8013e0:	01802074 	movhi	r6,129
  8013e4:	297ffe04 	addi	r5,r5,-8
  8013e8:	31891c04 	addi	r6,r6,9328
  8013ec:	28806526 	beq	r5,r2,801584 <_malloc_r+0x6d8>
  8013f0:	01bfff04 	movi	r6,-4
  8013f4:	10c00117 	ldw	r3,4(r2)
  8013f8:	1986703a 	and	r3,r3,r6
  8013fc:	38c0022e 	bgeu	r7,r3,801408 <_malloc_r+0x55c>
  801400:	10800217 	ldw	r2,8(r2)
  801404:	28bffb1e 	bne	r5,r2,8013f4 <__alt_mem_onchip_mem+0xff7f93f4>
  801408:	11400317 	ldw	r5,12(r2)
  80140c:	98c00117 	ldw	r3,4(r19)
  801410:	81400315 	stw	r5,12(r16)
  801414:	80800215 	stw	r2,8(r16)
  801418:	2c000215 	stw	r16,8(r5)
  80141c:	14000315 	stw	r16,12(r2)
  801420:	003ef806 	br	801004 <__alt_mem_onchip_mem+0xff7f9004>
  801424:	88c00054 	ori	r3,r17,1
  801428:	80c00115 	stw	r3,4(r16)
  80142c:	8463883a 	add	r17,r16,r17
  801430:	34400515 	stw	r17,20(r6)
  801434:	34400415 	stw	r17,16(r6)
  801438:	10c00054 	ori	r3,r2,1
  80143c:	8a000315 	stw	r8,12(r17)
  801440:	8a000215 	stw	r8,8(r17)
  801444:	88c00115 	stw	r3,4(r17)
  801448:	88a3883a 	add	r17,r17,r2
  80144c:	88800015 	stw	r2,0(r17)
  801450:	9009883a 	mov	r4,r18
  801454:	080dde40 	call	80dde4 <__malloc_unlock>
  801458:	80800204 	addi	r2,r16,8
  80145c:	003f3c06 	br	801150 <__alt_mem_onchip_mem+0xff7f9150>
  801460:	30c00117 	ldw	r3,4(r6)
  801464:	003ee706 	br	801004 <__alt_mem_onchip_mem+0xff7f9004>
  801468:	5ac00044 	addi	r11,r11,1
  80146c:	588000cc 	andi	r2,r11,3
  801470:	31800204 	addi	r6,r6,8
  801474:	103efd1e 	bne	r2,zero,80106c <__alt_mem_onchip_mem+0xff7f906c>
  801478:	00002406 	br	80150c <_malloc_r+0x660>
  80147c:	14000317 	ldw	r16,12(r2)
  801480:	143f251e 	bne	r2,r16,801118 <__alt_mem_onchip_mem+0xff7f9118>
  801484:	21000084 	addi	r4,r4,2
  801488:	003ebc06 	br	800f7c <__alt_mem_onchip_mem+0xff7f8f7c>
  80148c:	8085883a 	add	r2,r16,r2
  801490:	10c00117 	ldw	r3,4(r2)
  801494:	81000317 	ldw	r4,12(r16)
  801498:	81400217 	ldw	r5,8(r16)
  80149c:	18c00054 	ori	r3,r3,1
  8014a0:	10c00115 	stw	r3,4(r2)
  8014a4:	29000315 	stw	r4,12(r5)
  8014a8:	21400215 	stw	r5,8(r4)
  8014ac:	9009883a 	mov	r4,r18
  8014b0:	080dde40 	call	80dde4 <__malloc_unlock>
  8014b4:	80800204 	addi	r2,r16,8
  8014b8:	003f2506 	br	801150 <__alt_mem_onchip_mem+0xff7f9150>
  8014bc:	12001704 	addi	r8,r2,92
  8014c0:	11c016c4 	addi	r7,r2,91
  8014c4:	4209883a 	add	r4,r8,r8
  8014c8:	003e9606 	br	800f24 <__alt_mem_onchip_mem+0xff7f8f24>
  8014cc:	3804d1ba 	srli	r2,r7,6
  8014d0:	11400e44 	addi	r5,r2,57
  8014d4:	10c00e04 	addi	r3,r2,56
  8014d8:	294b883a 	add	r5,r5,r5
  8014dc:	003fbc06 	br	8013d0 <__alt_mem_onchip_mem+0xff7f93d0>
  8014e0:	84ff5926 	beq	r16,r19,801248 <__alt_mem_onchip_mem+0xff7f9248>
  8014e4:	00802074 	movhi	r2,129
  8014e8:	10891c04 	addi	r2,r2,9328
  8014ec:	14000217 	ldw	r16,8(r2)
  8014f0:	00bfff04 	movi	r2,-4
  8014f4:	80c00117 	ldw	r3,4(r16)
  8014f8:	1886703a 	and	r3,r3,r2
  8014fc:	003f9106 	br	801344 <__alt_mem_onchip_mem+0xff7f9344>
  801500:	60800217 	ldw	r2,8(r12)
  801504:	213fffc4 	addi	r4,r4,-1
  801508:	1300651e 	bne	r2,r12,8016a0 <_malloc_r+0x7f4>
  80150c:	208000cc 	andi	r2,r4,3
  801510:	633ffe04 	addi	r12,r12,-8
  801514:	103ffa1e 	bne	r2,zero,801500 <__alt_mem_onchip_mem+0xff7f9500>
  801518:	98800117 	ldw	r2,4(r19)
  80151c:	0146303a 	nor	r3,zero,r5
  801520:	1884703a 	and	r2,r3,r2
  801524:	98800115 	stw	r2,4(r19)
  801528:	294b883a 	add	r5,r5,r5
  80152c:	117f2836 	bltu	r2,r5,8011d0 <__alt_mem_onchip_mem+0xff7f91d0>
  801530:	283f2726 	beq	r5,zero,8011d0 <__alt_mem_onchip_mem+0xff7f91d0>
  801534:	2886703a 	and	r3,r5,r2
  801538:	5809883a 	mov	r4,r11
  80153c:	183ec31e 	bne	r3,zero,80104c <__alt_mem_onchip_mem+0xff7f904c>
  801540:	294b883a 	add	r5,r5,r5
  801544:	2886703a 	and	r3,r5,r2
  801548:	21000104 	addi	r4,r4,4
  80154c:	183ffc26 	beq	r3,zero,801540 <__alt_mem_onchip_mem+0xff7f9540>
  801550:	003ebe06 	br	80104c <__alt_mem_onchip_mem+0xff7f904c>
  801554:	00c05504 	movi	r3,340
  801558:	18801236 	bltu	r3,r2,8015a4 <_malloc_r+0x6f8>
  80155c:	8804d3fa 	srli	r2,r17,15
  801560:	12001e04 	addi	r8,r2,120
  801564:	11c01dc4 	addi	r7,r2,119
  801568:	4209883a 	add	r4,r8,r8
  80156c:	003e6d06 	br	800f24 <__alt_mem_onchip_mem+0xff7f8f24>
  801570:	00c40004 	movi	r3,4096
  801574:	003f4606 	br	801290 <__alt_mem_onchip_mem+0xff7f9290>
  801578:	00800044 	movi	r2,1
  80157c:	a0800115 	stw	r2,4(r20)
  801580:	003f7406 	br	801354 <__alt_mem_onchip_mem+0xff7f9354>
  801584:	1805d0ba 	srai	r2,r3,2
  801588:	01c00044 	movi	r7,1
  80158c:	30c00117 	ldw	r3,4(r6)
  801590:	388e983a 	sll	r7,r7,r2
  801594:	2805883a 	mov	r2,r5
  801598:	38c6b03a 	or	r3,r7,r3
  80159c:	30c00115 	stw	r3,4(r6)
  8015a0:	003f9b06 	br	801410 <__alt_mem_onchip_mem+0xff7f9410>
  8015a4:	00c15504 	movi	r3,1364
  8015a8:	18801a36 	bltu	r3,r2,801614 <_malloc_r+0x768>
  8015ac:	8804d4ba 	srli	r2,r17,18
  8015b0:	12001f44 	addi	r8,r2,125
  8015b4:	11c01f04 	addi	r7,r2,124
  8015b8:	4209883a 	add	r4,r8,r8
  8015bc:	003e5906 	br	800f24 <__alt_mem_onchip_mem+0xff7f8f24>
  8015c0:	ad400404 	addi	r21,r21,16
  8015c4:	003f1706 	br	801224 <__alt_mem_onchip_mem+0xff7f9224>
  8015c8:	00c01504 	movi	r3,84
  8015cc:	18802336 	bltu	r3,r2,80165c <_malloc_r+0x7b0>
  8015d0:	3804d33a 	srli	r2,r7,12
  8015d4:	11401bc4 	addi	r5,r2,111
  8015d8:	10c01b84 	addi	r3,r2,110
  8015dc:	294b883a 	add	r5,r5,r5
  8015e0:	003f7b06 	br	8013d0 <__alt_mem_onchip_mem+0xff7f93d0>
  8015e4:	9c000217 	ldw	r16,8(r19)
  8015e8:	00bfff04 	movi	r2,-4
  8015ec:	80c00117 	ldw	r3,4(r16)
  8015f0:	1886703a 	and	r3,r3,r2
  8015f4:	003f5306 	br	801344 <__alt_mem_onchip_mem+0xff7f9344>
  8015f8:	3083ffcc 	andi	r2,r6,4095
  8015fc:	103f181e 	bne	r2,zero,801260 <__alt_mem_onchip_mem+0xff7f9260>
  801600:	99000217 	ldw	r4,8(r19)
  801604:	b545883a 	add	r2,r22,r21
  801608:	10800054 	ori	r2,r2,1
  80160c:	20800115 	stw	r2,4(r4)
  801610:	003f3e06 	br	80130c <__alt_mem_onchip_mem+0xff7f930c>
  801614:	01003f84 	movi	r4,254
  801618:	02001fc4 	movi	r8,127
  80161c:	01c01f84 	movi	r7,126
  801620:	003e4006 	br	800f24 <__alt_mem_onchip_mem+0xff7f8f24>
  801624:	00802074 	movhi	r2,129
  801628:	108f4a04 	addi	r2,r2,15656
  80162c:	15000015 	stw	r20,0(r2)
  801630:	003f1106 	br	801278 <__alt_mem_onchip_mem+0xff7f9278>
  801634:	00800044 	movi	r2,1
  801638:	002b883a 	mov	r21,zero
  80163c:	003f1f06 	br	8012bc <__alt_mem_onchip_mem+0xff7f92bc>
  801640:	81400204 	addi	r5,r16,8
  801644:	9009883a 	mov	r4,r18
  801648:	08062a40 	call	8062a4 <_free_r>
  80164c:	00802074 	movhi	r2,129
  801650:	1096af04 	addi	r2,r2,23228
  801654:	10c00017 	ldw	r3,0(r2)
  801658:	003f2c06 	br	80130c <__alt_mem_onchip_mem+0xff7f930c>
  80165c:	00c05504 	movi	r3,340
  801660:	18800536 	bltu	r3,r2,801678 <_malloc_r+0x7cc>
  801664:	3804d3fa 	srli	r2,r7,15
  801668:	11401e04 	addi	r5,r2,120
  80166c:	10c01dc4 	addi	r3,r2,119
  801670:	294b883a 	add	r5,r5,r5
  801674:	003f5606 	br	8013d0 <__alt_mem_onchip_mem+0xff7f93d0>
  801678:	00c15504 	movi	r3,1364
  80167c:	18800536 	bltu	r3,r2,801694 <_malloc_r+0x7e8>
  801680:	3804d4ba 	srli	r2,r7,18
  801684:	11401f44 	addi	r5,r2,125
  801688:	10c01f04 	addi	r3,r2,124
  80168c:	294b883a 	add	r5,r5,r5
  801690:	003f4f06 	br	8013d0 <__alt_mem_onchip_mem+0xff7f93d0>
  801694:	01403f84 	movi	r5,254
  801698:	00c01f84 	movi	r3,126
  80169c:	003f4c06 	br	8013d0 <__alt_mem_onchip_mem+0xff7f93d0>
  8016a0:	98800117 	ldw	r2,4(r19)
  8016a4:	003fa006 	br	801528 <__alt_mem_onchip_mem+0xff7f9528>
  8016a8:	8808d0fa 	srli	r4,r17,3
  8016ac:	20800044 	addi	r2,r4,1
  8016b0:	1085883a 	add	r2,r2,r2
  8016b4:	003e9006 	br	8010f8 <__alt_mem_onchip_mem+0xff7f90f8>

008016b8 <memset>:
  8016b8:	20c000cc 	andi	r3,r4,3
  8016bc:	2005883a 	mov	r2,r4
  8016c0:	18004426 	beq	r3,zero,8017d4 <memset+0x11c>
  8016c4:	31ffffc4 	addi	r7,r6,-1
  8016c8:	30004026 	beq	r6,zero,8017cc <memset+0x114>
  8016cc:	2813883a 	mov	r9,r5
  8016d0:	200d883a 	mov	r6,r4
  8016d4:	2007883a 	mov	r3,r4
  8016d8:	00000406 	br	8016ec <memset+0x34>
  8016dc:	3a3fffc4 	addi	r8,r7,-1
  8016e0:	31800044 	addi	r6,r6,1
  8016e4:	38003926 	beq	r7,zero,8017cc <memset+0x114>
  8016e8:	400f883a 	mov	r7,r8
  8016ec:	18c00044 	addi	r3,r3,1
  8016f0:	32400005 	stb	r9,0(r6)
  8016f4:	1a0000cc 	andi	r8,r3,3
  8016f8:	403ff81e 	bne	r8,zero,8016dc <__alt_mem_onchip_mem+0xff7f96dc>
  8016fc:	010000c4 	movi	r4,3
  801700:	21c02d2e 	bgeu	r4,r7,8017b8 <memset+0x100>
  801704:	29003fcc 	andi	r4,r5,255
  801708:	200c923a 	slli	r6,r4,8
  80170c:	3108b03a 	or	r4,r6,r4
  801710:	200c943a 	slli	r6,r4,16
  801714:	218cb03a 	or	r6,r4,r6
  801718:	010003c4 	movi	r4,15
  80171c:	21c0182e 	bgeu	r4,r7,801780 <memset+0xc8>
  801720:	3b3ffc04 	addi	r12,r7,-16
  801724:	6018d13a 	srli	r12,r12,4
  801728:	1a000104 	addi	r8,r3,4
  80172c:	1ac00204 	addi	r11,r3,8
  801730:	6008913a 	slli	r4,r12,4
  801734:	1a800304 	addi	r10,r3,12
  801738:	1813883a 	mov	r9,r3
  80173c:	21000504 	addi	r4,r4,20
  801740:	1909883a 	add	r4,r3,r4
  801744:	49800015 	stw	r6,0(r9)
  801748:	41800015 	stw	r6,0(r8)
  80174c:	59800015 	stw	r6,0(r11)
  801750:	51800015 	stw	r6,0(r10)
  801754:	42000404 	addi	r8,r8,16
  801758:	4a400404 	addi	r9,r9,16
  80175c:	5ac00404 	addi	r11,r11,16
  801760:	52800404 	addi	r10,r10,16
  801764:	413ff71e 	bne	r8,r4,801744 <__alt_mem_onchip_mem+0xff7f9744>
  801768:	63000044 	addi	r12,r12,1
  80176c:	6018913a 	slli	r12,r12,4
  801770:	39c003cc 	andi	r7,r7,15
  801774:	010000c4 	movi	r4,3
  801778:	1b07883a 	add	r3,r3,r12
  80177c:	21c00e2e 	bgeu	r4,r7,8017b8 <memset+0x100>
  801780:	1813883a 	mov	r9,r3
  801784:	3811883a 	mov	r8,r7
  801788:	010000c4 	movi	r4,3
  80178c:	49800015 	stw	r6,0(r9)
  801790:	423fff04 	addi	r8,r8,-4
  801794:	4a400104 	addi	r9,r9,4
  801798:	223ffc36 	bltu	r4,r8,80178c <__alt_mem_onchip_mem+0xff7f978c>
  80179c:	393fff04 	addi	r4,r7,-4
  8017a0:	2008d0ba 	srli	r4,r4,2
  8017a4:	39c000cc 	andi	r7,r7,3
  8017a8:	21000044 	addi	r4,r4,1
  8017ac:	2109883a 	add	r4,r4,r4
  8017b0:	2109883a 	add	r4,r4,r4
  8017b4:	1907883a 	add	r3,r3,r4
  8017b8:	38000526 	beq	r7,zero,8017d0 <memset+0x118>
  8017bc:	19cf883a 	add	r7,r3,r7
  8017c0:	19400005 	stb	r5,0(r3)
  8017c4:	18c00044 	addi	r3,r3,1
  8017c8:	38fffd1e 	bne	r7,r3,8017c0 <__alt_mem_onchip_mem+0xff7f97c0>
  8017cc:	f800283a 	ret
  8017d0:	f800283a 	ret
  8017d4:	2007883a 	mov	r3,r4
  8017d8:	300f883a 	mov	r7,r6
  8017dc:	003fc706 	br	8016fc <__alt_mem_onchip_mem+0xff7f96fc>

008017e0 <_open_r>:
  8017e0:	defffd04 	addi	sp,sp,-12
  8017e4:	2805883a 	mov	r2,r5
  8017e8:	dc000015 	stw	r16,0(sp)
  8017ec:	04002074 	movhi	r16,129
  8017f0:	dc400115 	stw	r17,4(sp)
  8017f4:	300b883a 	mov	r5,r6
  8017f8:	8416a104 	addi	r16,r16,23172
  8017fc:	2023883a 	mov	r17,r4
  801800:	380d883a 	mov	r6,r7
  801804:	1009883a 	mov	r4,r2
  801808:	dfc00215 	stw	ra,8(sp)
  80180c:	80000015 	stw	zero,0(r16)
  801810:	080df080 	call	80df08 <open>
  801814:	00ffffc4 	movi	r3,-1
  801818:	10c00526 	beq	r2,r3,801830 <_open_r+0x50>
  80181c:	dfc00217 	ldw	ra,8(sp)
  801820:	dc400117 	ldw	r17,4(sp)
  801824:	dc000017 	ldw	r16,0(sp)
  801828:	dec00304 	addi	sp,sp,12
  80182c:	f800283a 	ret
  801830:	80c00017 	ldw	r3,0(r16)
  801834:	183ff926 	beq	r3,zero,80181c <__alt_mem_onchip_mem+0xff7f981c>
  801838:	88c00015 	stw	r3,0(r17)
  80183c:	003ff706 	br	80181c <__alt_mem_onchip_mem+0xff7f981c>

00801840 <_puts_r>:
  801840:	defff604 	addi	sp,sp,-40
  801844:	dc000715 	stw	r16,28(sp)
  801848:	2021883a 	mov	r16,r4
  80184c:	2809883a 	mov	r4,r5
  801850:	dc400815 	stw	r17,32(sp)
  801854:	dfc00915 	stw	ra,36(sp)
  801858:	2823883a 	mov	r17,r5
  80185c:	0801c940 	call	801c94 <strlen>
  801860:	10c00044 	addi	r3,r2,1
  801864:	d8800115 	stw	r2,4(sp)
  801868:	00802074 	movhi	r2,129
  80186c:	1086a904 	addi	r2,r2,6820
  801870:	d8800215 	stw	r2,8(sp)
  801874:	00800044 	movi	r2,1
  801878:	d8800315 	stw	r2,12(sp)
  80187c:	00800084 	movi	r2,2
  801880:	dc400015 	stw	r17,0(sp)
  801884:	d8c00615 	stw	r3,24(sp)
  801888:	dec00415 	stw	sp,16(sp)
  80188c:	d8800515 	stw	r2,20(sp)
  801890:	80000226 	beq	r16,zero,80189c <_puts_r+0x5c>
  801894:	80800e17 	ldw	r2,56(r16)
  801898:	10001426 	beq	r2,zero,8018ec <_puts_r+0xac>
  80189c:	81400217 	ldw	r5,8(r16)
  8018a0:	2880030b 	ldhu	r2,12(r5)
  8018a4:	10c8000c 	andi	r3,r2,8192
  8018a8:	1800061e 	bne	r3,zero,8018c4 <_puts_r+0x84>
  8018ac:	29001917 	ldw	r4,100(r5)
  8018b0:	00f7ffc4 	movi	r3,-8193
  8018b4:	10880014 	ori	r2,r2,8192
  8018b8:	20c6703a 	and	r3,r4,r3
  8018bc:	2880030d 	sth	r2,12(r5)
  8018c0:	28c01915 	stw	r3,100(r5)
  8018c4:	d9800404 	addi	r6,sp,16
  8018c8:	8009883a 	mov	r4,r16
  8018cc:	08065b40 	call	8065b4 <__sfvwrite_r>
  8018d0:	1000091e 	bne	r2,zero,8018f8 <_puts_r+0xb8>
  8018d4:	00800284 	movi	r2,10
  8018d8:	dfc00917 	ldw	ra,36(sp)
  8018dc:	dc400817 	ldw	r17,32(sp)
  8018e0:	dc000717 	ldw	r16,28(sp)
  8018e4:	dec00a04 	addi	sp,sp,40
  8018e8:	f800283a 	ret
  8018ec:	8009883a 	mov	r4,r16
  8018f0:	08060840 	call	806084 <__sinit>
  8018f4:	003fe906 	br	80189c <__alt_mem_onchip_mem+0xff7f989c>
  8018f8:	00bfffc4 	movi	r2,-1
  8018fc:	003ff606 	br	8018d8 <__alt_mem_onchip_mem+0xff7f98d8>

00801900 <puts>:
  801900:	00802074 	movhi	r2,129
  801904:	108f4904 	addi	r2,r2,15652
  801908:	200b883a 	mov	r5,r4
  80190c:	11000017 	ldw	r4,0(r2)
  801910:	08018401 	jmpi	801840 <_puts_r>

00801914 <lflush>:
  801914:	2080030b 	ldhu	r2,12(r4)
  801918:	00c00244 	movi	r3,9
  80191c:	1080024c 	andi	r2,r2,9
  801920:	10c00226 	beq	r2,r3,80192c <lflush+0x18>
  801924:	0005883a 	mov	r2,zero
  801928:	f800283a 	ret
  80192c:	0805d041 	jmpi	805d04 <fflush>

00801930 <__srefill_r>:
  801930:	defffc04 	addi	sp,sp,-16
  801934:	dc400115 	stw	r17,4(sp)
  801938:	dc000015 	stw	r16,0(sp)
  80193c:	dfc00315 	stw	ra,12(sp)
  801940:	dc800215 	stw	r18,8(sp)
  801944:	2023883a 	mov	r17,r4
  801948:	2821883a 	mov	r16,r5
  80194c:	20000226 	beq	r4,zero,801958 <__srefill_r+0x28>
  801950:	20800e17 	ldw	r2,56(r4)
  801954:	10003c26 	beq	r2,zero,801a48 <__srefill_r+0x118>
  801958:	80c0030b 	ldhu	r3,12(r16)
  80195c:	1908000c 	andi	r4,r3,8192
  801960:	1805883a 	mov	r2,r3
  801964:	2000071e 	bne	r4,zero,801984 <__srefill_r+0x54>
  801968:	81001917 	ldw	r4,100(r16)
  80196c:	18880014 	ori	r2,r3,8192
  801970:	00f7ffc4 	movi	r3,-8193
  801974:	20c8703a 	and	r4,r4,r3
  801978:	8080030d 	sth	r2,12(r16)
  80197c:	1007883a 	mov	r3,r2
  801980:	81001915 	stw	r4,100(r16)
  801984:	80000115 	stw	zero,4(r16)
  801988:	1100080c 	andi	r4,r2,32
  80198c:	2000571e 	bne	r4,zero,801aec <__srefill_r+0x1bc>
  801990:	1100010c 	andi	r4,r2,4
  801994:	20001f26 	beq	r4,zero,801a14 <__srefill_r+0xe4>
  801998:	81400c17 	ldw	r5,48(r16)
  80199c:	28000826 	beq	r5,zero,8019c0 <__srefill_r+0x90>
  8019a0:	80801004 	addi	r2,r16,64
  8019a4:	28800226 	beq	r5,r2,8019b0 <__srefill_r+0x80>
  8019a8:	8809883a 	mov	r4,r17
  8019ac:	08062a40 	call	8062a4 <_free_r>
  8019b0:	80800f17 	ldw	r2,60(r16)
  8019b4:	80000c15 	stw	zero,48(r16)
  8019b8:	80800115 	stw	r2,4(r16)
  8019bc:	1000391e 	bne	r2,zero,801aa4 <__srefill_r+0x174>
  8019c0:	80800417 	ldw	r2,16(r16)
  8019c4:	10004b26 	beq	r2,zero,801af4 <__srefill_r+0x1c4>
  8019c8:	8480030b 	ldhu	r18,12(r16)
  8019cc:	908000cc 	andi	r2,r18,3
  8019d0:	10001f1e 	bne	r2,zero,801a50 <__srefill_r+0x120>
  8019d4:	81800417 	ldw	r6,16(r16)
  8019d8:	80800817 	ldw	r2,32(r16)
  8019dc:	81c00517 	ldw	r7,20(r16)
  8019e0:	81400717 	ldw	r5,28(r16)
  8019e4:	81800015 	stw	r6,0(r16)
  8019e8:	8809883a 	mov	r4,r17
  8019ec:	103ee83a 	callr	r2
  8019f0:	80800115 	stw	r2,4(r16)
  8019f4:	00800e0e 	bge	zero,r2,801a30 <__srefill_r+0x100>
  8019f8:	0005883a 	mov	r2,zero
  8019fc:	dfc00317 	ldw	ra,12(sp)
  801a00:	dc800217 	ldw	r18,8(sp)
  801a04:	dc400117 	ldw	r17,4(sp)
  801a08:	dc000017 	ldw	r16,0(sp)
  801a0c:	dec00404 	addi	sp,sp,16
  801a10:	f800283a 	ret
  801a14:	1100040c 	andi	r4,r2,16
  801a18:	20003026 	beq	r4,zero,801adc <__srefill_r+0x1ac>
  801a1c:	1080020c 	andi	r2,r2,8
  801a20:	1000241e 	bne	r2,zero,801ab4 <__srefill_r+0x184>
  801a24:	18c00114 	ori	r3,r3,4
  801a28:	80c0030d 	sth	r3,12(r16)
  801a2c:	003fe406 	br	8019c0 <__alt_mem_onchip_mem+0xff7f99c0>
  801a30:	80c0030b 	ldhu	r3,12(r16)
  801a34:	1000161e 	bne	r2,zero,801a90 <__srefill_r+0x160>
  801a38:	18c00814 	ori	r3,r3,32
  801a3c:	00bfffc4 	movi	r2,-1
  801a40:	80c0030d 	sth	r3,12(r16)
  801a44:	003fed06 	br	8019fc <__alt_mem_onchip_mem+0xff7f99fc>
  801a48:	08060840 	call	806084 <__sinit>
  801a4c:	003fc206 	br	801958 <__alt_mem_onchip_mem+0xff7f9958>
  801a50:	00802074 	movhi	r2,129
  801a54:	108f4804 	addi	r2,r2,15648
  801a58:	11000017 	ldw	r4,0(r2)
  801a5c:	01402034 	movhi	r5,128
  801a60:	00800044 	movi	r2,1
  801a64:	29464504 	addi	r5,r5,6420
  801a68:	8080030d 	sth	r2,12(r16)
  801a6c:	0806a700 	call	806a70 <_fwalk>
  801a70:	00800244 	movi	r2,9
  801a74:	8480030d 	sth	r18,12(r16)
  801a78:	9480024c 	andi	r18,r18,9
  801a7c:	90bfd51e 	bne	r18,r2,8019d4 <__alt_mem_onchip_mem+0xff7f99d4>
  801a80:	800b883a 	mov	r5,r16
  801a84:	8809883a 	mov	r4,r17
  801a88:	0805a8c0 	call	805a8c <__sflush_r>
  801a8c:	003fd106 	br	8019d4 <__alt_mem_onchip_mem+0xff7f99d4>
  801a90:	18c01014 	ori	r3,r3,64
  801a94:	80000115 	stw	zero,4(r16)
  801a98:	00bfffc4 	movi	r2,-1
  801a9c:	80c0030d 	sth	r3,12(r16)
  801aa0:	003fd606 	br	8019fc <__alt_mem_onchip_mem+0xff7f99fc>
  801aa4:	80c00e17 	ldw	r3,56(r16)
  801aa8:	0005883a 	mov	r2,zero
  801aac:	80c00015 	stw	r3,0(r16)
  801ab0:	003fd206 	br	8019fc <__alt_mem_onchip_mem+0xff7f99fc>
  801ab4:	800b883a 	mov	r5,r16
  801ab8:	8809883a 	mov	r4,r17
  801abc:	0805ca80 	call	805ca8 <_fflush_r>
  801ac0:	10000a1e 	bne	r2,zero,801aec <__srefill_r+0x1bc>
  801ac4:	8080030b 	ldhu	r2,12(r16)
  801ac8:	00fffdc4 	movi	r3,-9
  801acc:	80000215 	stw	zero,8(r16)
  801ad0:	1886703a 	and	r3,r3,r2
  801ad4:	80000615 	stw	zero,24(r16)
  801ad8:	003fd206 	br	801a24 <__alt_mem_onchip_mem+0xff7f9a24>
  801adc:	00800244 	movi	r2,9
  801ae0:	88800015 	stw	r2,0(r17)
  801ae4:	18c01014 	ori	r3,r3,64
  801ae8:	80c0030d 	sth	r3,12(r16)
  801aec:	00bfffc4 	movi	r2,-1
  801af0:	003fc206 	br	8019fc <__alt_mem_onchip_mem+0xff7f99fc>
  801af4:	800b883a 	mov	r5,r16
  801af8:	8809883a 	mov	r4,r17
  801afc:	0800cf00 	call	800cf0 <__smakebuf_r>
  801b00:	003fb106 	br	8019c8 <__alt_mem_onchip_mem+0xff7f99c8>

00801b04 <_sbrk_r>:
  801b04:	defffd04 	addi	sp,sp,-12
  801b08:	dc000015 	stw	r16,0(sp)
  801b0c:	04002074 	movhi	r16,129
  801b10:	dc400115 	stw	r17,4(sp)
  801b14:	8416a104 	addi	r16,r16,23172
  801b18:	2023883a 	mov	r17,r4
  801b1c:	2809883a 	mov	r4,r5
  801b20:	dfc00215 	stw	ra,8(sp)
  801b24:	80000015 	stw	zero,0(r16)
  801b28:	080e1f80 	call	80e1f8 <sbrk>
  801b2c:	00ffffc4 	movi	r3,-1
  801b30:	10c00526 	beq	r2,r3,801b48 <_sbrk_r+0x44>
  801b34:	dfc00217 	ldw	ra,8(sp)
  801b38:	dc400117 	ldw	r17,4(sp)
  801b3c:	dc000017 	ldw	r16,0(sp)
  801b40:	dec00304 	addi	sp,sp,12
  801b44:	f800283a 	ret
  801b48:	80c00017 	ldw	r3,0(r16)
  801b4c:	183ff926 	beq	r3,zero,801b34 <__alt_mem_onchip_mem+0xff7f9b34>
  801b50:	88c00015 	stw	r3,0(r17)
  801b54:	003ff706 	br	801b34 <__alt_mem_onchip_mem+0xff7f9b34>

00801b58 <__sread>:
  801b58:	defffe04 	addi	sp,sp,-8
  801b5c:	dc000015 	stw	r16,0(sp)
  801b60:	2821883a 	mov	r16,r5
  801b64:	2940038f 	ldh	r5,14(r5)
  801b68:	dfc00115 	stw	ra,4(sp)
  801b6c:	080810c0 	call	80810c <_read_r>
  801b70:	10000716 	blt	r2,zero,801b90 <__sread+0x38>
  801b74:	80c01417 	ldw	r3,80(r16)
  801b78:	1887883a 	add	r3,r3,r2
  801b7c:	80c01415 	stw	r3,80(r16)
  801b80:	dfc00117 	ldw	ra,4(sp)
  801b84:	dc000017 	ldw	r16,0(sp)
  801b88:	dec00204 	addi	sp,sp,8
  801b8c:	f800283a 	ret
  801b90:	80c0030b 	ldhu	r3,12(r16)
  801b94:	18fbffcc 	andi	r3,r3,61439
  801b98:	80c0030d 	sth	r3,12(r16)
  801b9c:	dfc00117 	ldw	ra,4(sp)
  801ba0:	dc000017 	ldw	r16,0(sp)
  801ba4:	dec00204 	addi	sp,sp,8
  801ba8:	f800283a 	ret

00801bac <__seofread>:
  801bac:	0005883a 	mov	r2,zero
  801bb0:	f800283a 	ret

00801bb4 <__swrite>:
  801bb4:	2880030b 	ldhu	r2,12(r5)
  801bb8:	defffb04 	addi	sp,sp,-20
  801bbc:	dcc00315 	stw	r19,12(sp)
  801bc0:	dc800215 	stw	r18,8(sp)
  801bc4:	dc400115 	stw	r17,4(sp)
  801bc8:	dc000015 	stw	r16,0(sp)
  801bcc:	dfc00415 	stw	ra,16(sp)
  801bd0:	10c0400c 	andi	r3,r2,256
  801bd4:	2821883a 	mov	r16,r5
  801bd8:	2023883a 	mov	r17,r4
  801bdc:	3025883a 	mov	r18,r6
  801be0:	3827883a 	mov	r19,r7
  801be4:	18000526 	beq	r3,zero,801bfc <__swrite+0x48>
  801be8:	2940038f 	ldh	r5,14(r5)
  801bec:	01c00084 	movi	r7,2
  801bf0:	000d883a 	mov	r6,zero
  801bf4:	0806d280 	call	806d28 <_lseek_r>
  801bf8:	8080030b 	ldhu	r2,12(r16)
  801bfc:	8140038f 	ldh	r5,14(r16)
  801c00:	10bbffcc 	andi	r2,r2,61439
  801c04:	980f883a 	mov	r7,r19
  801c08:	900d883a 	mov	r6,r18
  801c0c:	8809883a 	mov	r4,r17
  801c10:	8080030d 	sth	r2,12(r16)
  801c14:	dfc00417 	ldw	ra,16(sp)
  801c18:	dcc00317 	ldw	r19,12(sp)
  801c1c:	dc800217 	ldw	r18,8(sp)
  801c20:	dc400117 	ldw	r17,4(sp)
  801c24:	dc000017 	ldw	r16,0(sp)
  801c28:	dec00504 	addi	sp,sp,20
  801c2c:	0803ffc1 	jmpi	803ffc <_write_r>

00801c30 <__sseek>:
  801c30:	defffe04 	addi	sp,sp,-8
  801c34:	dc000015 	stw	r16,0(sp)
  801c38:	2821883a 	mov	r16,r5
  801c3c:	2940038f 	ldh	r5,14(r5)
  801c40:	dfc00115 	stw	ra,4(sp)
  801c44:	0806d280 	call	806d28 <_lseek_r>
  801c48:	00ffffc4 	movi	r3,-1
  801c4c:	10c00826 	beq	r2,r3,801c70 <__sseek+0x40>
  801c50:	80c0030b 	ldhu	r3,12(r16)
  801c54:	80801415 	stw	r2,80(r16)
  801c58:	18c40014 	ori	r3,r3,4096
  801c5c:	80c0030d 	sth	r3,12(r16)
  801c60:	dfc00117 	ldw	ra,4(sp)
  801c64:	dc000017 	ldw	r16,0(sp)
  801c68:	dec00204 	addi	sp,sp,8
  801c6c:	f800283a 	ret
  801c70:	80c0030b 	ldhu	r3,12(r16)
  801c74:	18fbffcc 	andi	r3,r3,61439
  801c78:	80c0030d 	sth	r3,12(r16)
  801c7c:	dfc00117 	ldw	ra,4(sp)
  801c80:	dc000017 	ldw	r16,0(sp)
  801c84:	dec00204 	addi	sp,sp,8
  801c88:	f800283a 	ret

00801c8c <__sclose>:
  801c8c:	2940038f 	ldh	r5,14(r5)
  801c90:	08041b01 	jmpi	8041b0 <_close_r>

00801c94 <strlen>:
  801c94:	208000cc 	andi	r2,r4,3
  801c98:	10002026 	beq	r2,zero,801d1c <strlen+0x88>
  801c9c:	20800007 	ldb	r2,0(r4)
  801ca0:	10002026 	beq	r2,zero,801d24 <strlen+0x90>
  801ca4:	2005883a 	mov	r2,r4
  801ca8:	00000206 	br	801cb4 <strlen+0x20>
  801cac:	10c00007 	ldb	r3,0(r2)
  801cb0:	18001826 	beq	r3,zero,801d14 <strlen+0x80>
  801cb4:	10800044 	addi	r2,r2,1
  801cb8:	10c000cc 	andi	r3,r2,3
  801cbc:	183ffb1e 	bne	r3,zero,801cac <__alt_mem_onchip_mem+0xff7f9cac>
  801cc0:	10c00017 	ldw	r3,0(r2)
  801cc4:	01ffbff4 	movhi	r7,65279
  801cc8:	39ffbfc4 	addi	r7,r7,-257
  801ccc:	00ca303a 	nor	r5,zero,r3
  801cd0:	01a02074 	movhi	r6,32897
  801cd4:	19c7883a 	add	r3,r3,r7
  801cd8:	31a02004 	addi	r6,r6,-32640
  801cdc:	1946703a 	and	r3,r3,r5
  801ce0:	1986703a 	and	r3,r3,r6
  801ce4:	1800091e 	bne	r3,zero,801d0c <strlen+0x78>
  801ce8:	10800104 	addi	r2,r2,4
  801cec:	10c00017 	ldw	r3,0(r2)
  801cf0:	19cb883a 	add	r5,r3,r7
  801cf4:	00c6303a 	nor	r3,zero,r3
  801cf8:	28c6703a 	and	r3,r5,r3
  801cfc:	1986703a 	and	r3,r3,r6
  801d00:	183ff926 	beq	r3,zero,801ce8 <__alt_mem_onchip_mem+0xff7f9ce8>
  801d04:	00000106 	br	801d0c <strlen+0x78>
  801d08:	10800044 	addi	r2,r2,1
  801d0c:	10c00007 	ldb	r3,0(r2)
  801d10:	183ffd1e 	bne	r3,zero,801d08 <__alt_mem_onchip_mem+0xff7f9d08>
  801d14:	1105c83a 	sub	r2,r2,r4
  801d18:	f800283a 	ret
  801d1c:	2005883a 	mov	r2,r4
  801d20:	003fe706 	br	801cc0 <__alt_mem_onchip_mem+0xff7f9cc0>
  801d24:	0005883a 	mov	r2,zero
  801d28:	f800283a 	ret

00801d2c <___vfprintf_internal_r>:
  801d2c:	deffb804 	addi	sp,sp,-288
  801d30:	dfc04715 	stw	ra,284(sp)
  801d34:	ddc04515 	stw	r23,276(sp)
  801d38:	dd404315 	stw	r21,268(sp)
  801d3c:	d9002c15 	stw	r4,176(sp)
  801d40:	282f883a 	mov	r23,r5
  801d44:	302b883a 	mov	r21,r6
  801d48:	d9c02d15 	stw	r7,180(sp)
  801d4c:	df004615 	stw	fp,280(sp)
  801d50:	dd804415 	stw	r22,272(sp)
  801d54:	dd004215 	stw	r20,264(sp)
  801d58:	dcc04115 	stw	r19,260(sp)
  801d5c:	dc804015 	stw	r18,256(sp)
  801d60:	dc403f15 	stw	r17,252(sp)
  801d64:	dc003e15 	stw	r16,248(sp)
  801d68:	0806cf80 	call	806cf8 <_localeconv_r>
  801d6c:	10800017 	ldw	r2,0(r2)
  801d70:	1009883a 	mov	r4,r2
  801d74:	d8803415 	stw	r2,208(sp)
  801d78:	0801c940 	call	801c94 <strlen>
  801d7c:	d8803715 	stw	r2,220(sp)
  801d80:	d8802c17 	ldw	r2,176(sp)
  801d84:	10000226 	beq	r2,zero,801d90 <___vfprintf_internal_r+0x64>
  801d88:	10800e17 	ldw	r2,56(r2)
  801d8c:	1000f926 	beq	r2,zero,802174 <___vfprintf_internal_r+0x448>
  801d90:	b880030b 	ldhu	r2,12(r23)
  801d94:	10c8000c 	andi	r3,r2,8192
  801d98:	1800061e 	bne	r3,zero,801db4 <___vfprintf_internal_r+0x88>
  801d9c:	b9001917 	ldw	r4,100(r23)
  801da0:	00f7ffc4 	movi	r3,-8193
  801da4:	10880014 	ori	r2,r2,8192
  801da8:	20c6703a 	and	r3,r4,r3
  801dac:	b880030d 	sth	r2,12(r23)
  801db0:	b8c01915 	stw	r3,100(r23)
  801db4:	10c0020c 	andi	r3,r2,8
  801db8:	1800c126 	beq	r3,zero,8020c0 <___vfprintf_internal_r+0x394>
  801dbc:	b8c00417 	ldw	r3,16(r23)
  801dc0:	1800bf26 	beq	r3,zero,8020c0 <___vfprintf_internal_r+0x394>
  801dc4:	1080068c 	andi	r2,r2,26
  801dc8:	00c00284 	movi	r3,10
  801dcc:	10c0c426 	beq	r2,r3,8020e0 <___vfprintf_internal_r+0x3b4>
  801dd0:	d8c00404 	addi	r3,sp,16
  801dd4:	05002074 	movhi	r20,129
  801dd8:	d9001e04 	addi	r4,sp,120
  801ddc:	a506ba84 	addi	r20,r20,6890
  801de0:	d8c01e15 	stw	r3,120(sp)
  801de4:	d8002015 	stw	zero,128(sp)
  801de8:	d8001f15 	stw	zero,124(sp)
  801dec:	d8003315 	stw	zero,204(sp)
  801df0:	d8003615 	stw	zero,216(sp)
  801df4:	d8003815 	stw	zero,224(sp)
  801df8:	1811883a 	mov	r8,r3
  801dfc:	d8003915 	stw	zero,228(sp)
  801e00:	d8003a15 	stw	zero,232(sp)
  801e04:	d8002f15 	stw	zero,188(sp)
  801e08:	d9002815 	stw	r4,160(sp)
  801e0c:	a8800007 	ldb	r2,0(r21)
  801e10:	10027b26 	beq	r2,zero,802800 <___vfprintf_internal_r+0xad4>
  801e14:	00c00944 	movi	r3,37
  801e18:	a821883a 	mov	r16,r21
  801e1c:	10c0021e 	bne	r2,r3,801e28 <___vfprintf_internal_r+0xfc>
  801e20:	00001406 	br	801e74 <___vfprintf_internal_r+0x148>
  801e24:	10c00326 	beq	r2,r3,801e34 <___vfprintf_internal_r+0x108>
  801e28:	84000044 	addi	r16,r16,1
  801e2c:	80800007 	ldb	r2,0(r16)
  801e30:	103ffc1e 	bne	r2,zero,801e24 <__alt_mem_onchip_mem+0xff7f9e24>
  801e34:	8563c83a 	sub	r17,r16,r21
  801e38:	88000e26 	beq	r17,zero,801e74 <___vfprintf_internal_r+0x148>
  801e3c:	d8c02017 	ldw	r3,128(sp)
  801e40:	d8801f17 	ldw	r2,124(sp)
  801e44:	45400015 	stw	r21,0(r8)
  801e48:	1c47883a 	add	r3,r3,r17
  801e4c:	10800044 	addi	r2,r2,1
  801e50:	d8c02015 	stw	r3,128(sp)
  801e54:	44400115 	stw	r17,4(r8)
  801e58:	d8801f15 	stw	r2,124(sp)
  801e5c:	00c001c4 	movi	r3,7
  801e60:	1880a716 	blt	r3,r2,802100 <___vfprintf_internal_r+0x3d4>
  801e64:	42000204 	addi	r8,r8,8
  801e68:	d9402f17 	ldw	r5,188(sp)
  801e6c:	2c4b883a 	add	r5,r5,r17
  801e70:	d9402f15 	stw	r5,188(sp)
  801e74:	80800007 	ldb	r2,0(r16)
  801e78:	1000a826 	beq	r2,zero,80211c <___vfprintf_internal_r+0x3f0>
  801e7c:	84400047 	ldb	r17,1(r16)
  801e80:	00bfffc4 	movi	r2,-1
  801e84:	85400044 	addi	r21,r16,1
  801e88:	d8002785 	stb	zero,158(sp)
  801e8c:	0007883a 	mov	r3,zero
  801e90:	000f883a 	mov	r7,zero
  801e94:	d8802915 	stw	r2,164(sp)
  801e98:	d8003115 	stw	zero,196(sp)
  801e9c:	0025883a 	mov	r18,zero
  801ea0:	01401604 	movi	r5,88
  801ea4:	01800244 	movi	r6,9
  801ea8:	02800a84 	movi	r10,42
  801eac:	02401b04 	movi	r9,108
  801eb0:	ad400044 	addi	r21,r21,1
  801eb4:	88bff804 	addi	r2,r17,-32
  801eb8:	28830436 	bltu	r5,r2,802acc <___vfprintf_internal_r+0xda0>
  801ebc:	100490ba 	slli	r2,r2,2
  801ec0:	01002034 	movhi	r4,128
  801ec4:	2107b504 	addi	r4,r4,7892
  801ec8:	1105883a 	add	r2,r2,r4
  801ecc:	10800017 	ldw	r2,0(r2)
  801ed0:	1000683a 	jmp	r2
  801ed4:	008029ec 	andhi	r2,zero,167
  801ed8:	00802acc 	andi	r2,zero,171
  801edc:	00802acc 	andi	r2,zero,171
  801ee0:	00802a0c 	andi	r2,zero,168
  801ee4:	00802acc 	andi	r2,zero,171
  801ee8:	00802acc 	andi	r2,zero,171
  801eec:	00802acc 	andi	r2,zero,171
  801ef0:	00802acc 	andi	r2,zero,171
  801ef4:	00802acc 	andi	r2,zero,171
  801ef8:	00802acc 	andi	r2,zero,171
  801efc:	00802180 	call	80218 <__alt_mem_sdram-0x77fde8>
  801f00:	00802928 	cmpgeui	r2,zero,164
  801f04:	00802acc 	andi	r2,zero,171
  801f08:	00802048 	cmpgei	r2,zero,129
  801f0c:	008021a8 	cmpgeui	r2,zero,134
  801f10:	00802acc 	andi	r2,zero,171
  801f14:	008021e8 	cmpgeui	r2,zero,135
  801f18:	008021f4 	movhi	r2,135
  801f1c:	008021f4 	movhi	r2,135
  801f20:	008021f4 	movhi	r2,135
  801f24:	008021f4 	movhi	r2,135
  801f28:	008021f4 	movhi	r2,135
  801f2c:	008021f4 	movhi	r2,135
  801f30:	008021f4 	movhi	r2,135
  801f34:	008021f4 	movhi	r2,135
  801f38:	008021f4 	movhi	r2,135
  801f3c:	00802acc 	andi	r2,zero,171
  801f40:	00802acc 	andi	r2,zero,171
  801f44:	00802acc 	andi	r2,zero,171
  801f48:	00802acc 	andi	r2,zero,171
  801f4c:	00802acc 	andi	r2,zero,171
  801f50:	00802acc 	andi	r2,zero,171
  801f54:	00802acc 	andi	r2,zero,171
  801f58:	00802acc 	andi	r2,zero,171
  801f5c:	00802acc 	andi	r2,zero,171
  801f60:	00802acc 	andi	r2,zero,171
  801f64:	00802228 	cmpgeui	r2,zero,136
  801f68:	008022e4 	muli	r2,zero,139
  801f6c:	00802acc 	andi	r2,zero,171
  801f70:	008022e4 	muli	r2,zero,139
  801f74:	00802acc 	andi	r2,zero,171
  801f78:	00802acc 	andi	r2,zero,171
  801f7c:	00802acc 	andi	r2,zero,171
  801f80:	00802acc 	andi	r2,zero,171
  801f84:	00802384 	movi	r2,142
  801f88:	00802acc 	andi	r2,zero,171
  801f8c:	00802acc 	andi	r2,zero,171
  801f90:	00802390 	cmplti	r2,zero,142
  801f94:	00802acc 	andi	r2,zero,171
  801f98:	00802acc 	andi	r2,zero,171
  801f9c:	00802acc 	andi	r2,zero,171
  801fa0:	00802acc 	andi	r2,zero,171
  801fa4:	00802acc 	andi	r2,zero,171
  801fa8:	00802808 	cmpgei	r2,zero,160
  801fac:	00802acc 	andi	r2,zero,171
  801fb0:	00802acc 	andi	r2,zero,171
  801fb4:	00802868 	cmpgeui	r2,zero,161
  801fb8:	00802acc 	andi	r2,zero,171
  801fbc:	00802acc 	andi	r2,zero,171
  801fc0:	00802acc 	andi	r2,zero,171
  801fc4:	00802acc 	andi	r2,zero,171
  801fc8:	00802acc 	andi	r2,zero,171
  801fcc:	00802acc 	andi	r2,zero,171
  801fd0:	00802acc 	andi	r2,zero,171
  801fd4:	00802acc 	andi	r2,zero,171
  801fd8:	00802acc 	andi	r2,zero,171
  801fdc:	00802acc 	andi	r2,zero,171
  801fe0:	00802a78 	rdprs	r2,zero,169
  801fe4:	00802a18 	cmpnei	r2,zero,168
  801fe8:	008022e4 	muli	r2,zero,139
  801fec:	008022e4 	muli	r2,zero,139
  801ff0:	008022e4 	muli	r2,zero,139
  801ff4:	00802a28 	cmpgeui	r2,zero,168
  801ff8:	00802a18 	cmpnei	r2,zero,168
  801ffc:	00802acc 	andi	r2,zero,171
  802000:	00802acc 	andi	r2,zero,171
  802004:	00802a34 	movhi	r2,168
  802008:	00802acc 	andi	r2,zero,171
  80200c:	00802a44 	movi	r2,169
  802010:	00802918 	cmpnei	r2,zero,164
  802014:	00802054 	movui	r2,129
  802018:	00802938 	rdprs	r2,zero,164
  80201c:	00802acc 	andi	r2,zero,171
  802020:	00802944 	movi	r2,165
  802024:	00802acc 	andi	r2,zero,171
  802028:	008029a0 	cmpeqi	r2,zero,166
  80202c:	00802acc 	andi	r2,zero,171
  802030:	00802acc 	andi	r2,zero,171
  802034:	008029b0 	cmpltui	r2,zero,166
  802038:	d9003117 	ldw	r4,196(sp)
  80203c:	d8802d15 	stw	r2,180(sp)
  802040:	0109c83a 	sub	r4,zero,r4
  802044:	d9003115 	stw	r4,196(sp)
  802048:	94800114 	ori	r18,r18,4
  80204c:	ac400007 	ldb	r17,0(r21)
  802050:	003f9706 	br	801eb0 <__alt_mem_onchip_mem+0xff7f9eb0>
  802054:	00800c04 	movi	r2,48
  802058:	d9002d17 	ldw	r4,180(sp)
  80205c:	d9402917 	ldw	r5,164(sp)
  802060:	d8802705 	stb	r2,156(sp)
  802064:	00801e04 	movi	r2,120
  802068:	d8802745 	stb	r2,157(sp)
  80206c:	d8002785 	stb	zero,158(sp)
  802070:	20c00104 	addi	r3,r4,4
  802074:	24c00017 	ldw	r19,0(r4)
  802078:	002d883a 	mov	r22,zero
  80207c:	90800094 	ori	r2,r18,2
  802080:	28029a16 	blt	r5,zero,802aec <___vfprintf_internal_r+0xdc0>
  802084:	00bfdfc4 	movi	r2,-129
  802088:	90a4703a 	and	r18,r18,r2
  80208c:	d8c02d15 	stw	r3,180(sp)
  802090:	94800094 	ori	r18,r18,2
  802094:	9802871e 	bne	r19,zero,802ab4 <___vfprintf_internal_r+0xd88>
  802098:	00802074 	movhi	r2,129
  80209c:	1086b304 	addi	r2,r2,6860
  8020a0:	d8803915 	stw	r2,228(sp)
  8020a4:	04401e04 	movi	r17,120
  8020a8:	d8802917 	ldw	r2,164(sp)
  8020ac:	0039883a 	mov	fp,zero
  8020b0:	1001e926 	beq	r2,zero,802858 <___vfprintf_internal_r+0xb2c>
  8020b4:	0027883a 	mov	r19,zero
  8020b8:	002d883a 	mov	r22,zero
  8020bc:	00020506 	br	8028d4 <___vfprintf_internal_r+0xba8>
  8020c0:	d9002c17 	ldw	r4,176(sp)
  8020c4:	b80b883a 	mov	r5,r23
  8020c8:	080405c0 	call	80405c <__swsetup_r>
  8020cc:	1005ac1e 	bne	r2,zero,803780 <___vfprintf_internal_r+0x1a54>
  8020d0:	b880030b 	ldhu	r2,12(r23)
  8020d4:	00c00284 	movi	r3,10
  8020d8:	1080068c 	andi	r2,r2,26
  8020dc:	10ff3c1e 	bne	r2,r3,801dd0 <__alt_mem_onchip_mem+0xff7f9dd0>
  8020e0:	b880038f 	ldh	r2,14(r23)
  8020e4:	103f3a16 	blt	r2,zero,801dd0 <__alt_mem_onchip_mem+0xff7f9dd0>
  8020e8:	d9c02d17 	ldw	r7,180(sp)
  8020ec:	d9002c17 	ldw	r4,176(sp)
  8020f0:	a80d883a 	mov	r6,r21
  8020f4:	b80b883a 	mov	r5,r23
  8020f8:	0803f400 	call	803f40 <__sbprintf>
  8020fc:	00001106 	br	802144 <___vfprintf_internal_r+0x418>
  802100:	d9002c17 	ldw	r4,176(sp)
  802104:	d9801e04 	addi	r6,sp,120
  802108:	b80b883a 	mov	r5,r23
  80210c:	080891c0 	call	80891c <__sprint_r>
  802110:	1000081e 	bne	r2,zero,802134 <___vfprintf_internal_r+0x408>
  802114:	da000404 	addi	r8,sp,16
  802118:	003f5306 	br	801e68 <__alt_mem_onchip_mem+0xff7f9e68>
  80211c:	d8802017 	ldw	r2,128(sp)
  802120:	10000426 	beq	r2,zero,802134 <___vfprintf_internal_r+0x408>
  802124:	d9002c17 	ldw	r4,176(sp)
  802128:	d9801e04 	addi	r6,sp,120
  80212c:	b80b883a 	mov	r5,r23
  802130:	080891c0 	call	80891c <__sprint_r>
  802134:	b880030b 	ldhu	r2,12(r23)
  802138:	1080100c 	andi	r2,r2,64
  80213c:	1005901e 	bne	r2,zero,803780 <___vfprintf_internal_r+0x1a54>
  802140:	d8802f17 	ldw	r2,188(sp)
  802144:	dfc04717 	ldw	ra,284(sp)
  802148:	df004617 	ldw	fp,280(sp)
  80214c:	ddc04517 	ldw	r23,276(sp)
  802150:	dd804417 	ldw	r22,272(sp)
  802154:	dd404317 	ldw	r21,268(sp)
  802158:	dd004217 	ldw	r20,264(sp)
  80215c:	dcc04117 	ldw	r19,260(sp)
  802160:	dc804017 	ldw	r18,256(sp)
  802164:	dc403f17 	ldw	r17,252(sp)
  802168:	dc003e17 	ldw	r16,248(sp)
  80216c:	dec04804 	addi	sp,sp,288
  802170:	f800283a 	ret
  802174:	d9002c17 	ldw	r4,176(sp)
  802178:	08060840 	call	806084 <__sinit>
  80217c:	003f0406 	br	801d90 <__alt_mem_onchip_mem+0xff7f9d90>
  802180:	d8802d17 	ldw	r2,180(sp)
  802184:	d9002d17 	ldw	r4,180(sp)
  802188:	10800017 	ldw	r2,0(r2)
  80218c:	d8803115 	stw	r2,196(sp)
  802190:	20800104 	addi	r2,r4,4
  802194:	d9003117 	ldw	r4,196(sp)
  802198:	203fa716 	blt	r4,zero,802038 <__alt_mem_onchip_mem+0xff7fa038>
  80219c:	d8802d15 	stw	r2,180(sp)
  8021a0:	ac400007 	ldb	r17,0(r21)
  8021a4:	003f4206 	br	801eb0 <__alt_mem_onchip_mem+0xff7f9eb0>
  8021a8:	ac400007 	ldb	r17,0(r21)
  8021ac:	aac00044 	addi	r11,r21,1
  8021b0:	8a872826 	beq	r17,r10,803e54 <___vfprintf_internal_r+0x2128>
  8021b4:	88bff404 	addi	r2,r17,-48
  8021b8:	0009883a 	mov	r4,zero
  8021bc:	30867d36 	bltu	r6,r2,803bb4 <___vfprintf_internal_r+0x1e88>
  8021c0:	5c400007 	ldb	r17,0(r11)
  8021c4:	210002a4 	muli	r4,r4,10
  8021c8:	5d400044 	addi	r21,r11,1
  8021cc:	a817883a 	mov	r11,r21
  8021d0:	2089883a 	add	r4,r4,r2
  8021d4:	88bff404 	addi	r2,r17,-48
  8021d8:	30bff92e 	bgeu	r6,r2,8021c0 <__alt_mem_onchip_mem+0xff7fa1c0>
  8021dc:	2005c916 	blt	r4,zero,803904 <___vfprintf_internal_r+0x1bd8>
  8021e0:	d9002915 	stw	r4,164(sp)
  8021e4:	003f3306 	br	801eb4 <__alt_mem_onchip_mem+0xff7f9eb4>
  8021e8:	94802014 	ori	r18,r18,128
  8021ec:	ac400007 	ldb	r17,0(r21)
  8021f0:	003f2f06 	br	801eb0 <__alt_mem_onchip_mem+0xff7f9eb0>
  8021f4:	a809883a 	mov	r4,r21
  8021f8:	d8003115 	stw	zero,196(sp)
  8021fc:	88bff404 	addi	r2,r17,-48
  802200:	0017883a 	mov	r11,zero
  802204:	24400007 	ldb	r17,0(r4)
  802208:	5ac002a4 	muli	r11,r11,10
  80220c:	ad400044 	addi	r21,r21,1
  802210:	a809883a 	mov	r4,r21
  802214:	12d7883a 	add	r11,r2,r11
  802218:	88bff404 	addi	r2,r17,-48
  80221c:	30bff92e 	bgeu	r6,r2,802204 <__alt_mem_onchip_mem+0xff7fa204>
  802220:	dac03115 	stw	r11,196(sp)
  802224:	003f2306 	br	801eb4 <__alt_mem_onchip_mem+0xff7f9eb4>
  802228:	18c03fcc 	andi	r3,r3,255
  80222c:	18072b1e 	bne	r3,zero,803edc <___vfprintf_internal_r+0x21b0>
  802230:	94800414 	ori	r18,r18,16
  802234:	9080080c 	andi	r2,r18,32
  802238:	10037b26 	beq	r2,zero,803028 <___vfprintf_internal_r+0x12fc>
  80223c:	d9402d17 	ldw	r5,180(sp)
  802240:	28800117 	ldw	r2,4(r5)
  802244:	2cc00017 	ldw	r19,0(r5)
  802248:	29400204 	addi	r5,r5,8
  80224c:	d9402d15 	stw	r5,180(sp)
  802250:	102d883a 	mov	r22,r2
  802254:	10044b16 	blt	r2,zero,803384 <___vfprintf_internal_r+0x1658>
  802258:	d9402917 	ldw	r5,164(sp)
  80225c:	df002783 	ldbu	fp,158(sp)
  802260:	2803bc16 	blt	r5,zero,803154 <___vfprintf_internal_r+0x1428>
  802264:	00ffdfc4 	movi	r3,-129
  802268:	9d84b03a 	or	r2,r19,r22
  80226c:	90e4703a 	and	r18,r18,r3
  802270:	10017726 	beq	r2,zero,802850 <___vfprintf_internal_r+0xb24>
  802274:	b0038326 	beq	r22,zero,803084 <___vfprintf_internal_r+0x1358>
  802278:	dc402a15 	stw	r17,168(sp)
  80227c:	dc001e04 	addi	r16,sp,120
  802280:	b023883a 	mov	r17,r22
  802284:	402d883a 	mov	r22,r8
  802288:	9809883a 	mov	r4,r19
  80228c:	880b883a 	mov	r5,r17
  802290:	01800284 	movi	r6,10
  802294:	000f883a 	mov	r7,zero
  802298:	080aaf00 	call	80aaf0 <__umoddi3>
  80229c:	10800c04 	addi	r2,r2,48
  8022a0:	843fffc4 	addi	r16,r16,-1
  8022a4:	9809883a 	mov	r4,r19
  8022a8:	880b883a 	mov	r5,r17
  8022ac:	80800005 	stb	r2,0(r16)
  8022b0:	01800284 	movi	r6,10
  8022b4:	000f883a 	mov	r7,zero
  8022b8:	080a5780 	call	80a578 <__udivdi3>
  8022bc:	1027883a 	mov	r19,r2
  8022c0:	10c4b03a 	or	r2,r2,r3
  8022c4:	1823883a 	mov	r17,r3
  8022c8:	103fef1e 	bne	r2,zero,802288 <__alt_mem_onchip_mem+0xff7fa288>
  8022cc:	d8c02817 	ldw	r3,160(sp)
  8022d0:	dc402a17 	ldw	r17,168(sp)
  8022d4:	b011883a 	mov	r8,r22
  8022d8:	1c07c83a 	sub	r3,r3,r16
  8022dc:	d8c02e15 	stw	r3,184(sp)
  8022e0:	00005906 	br	802448 <___vfprintf_internal_r+0x71c>
  8022e4:	18c03fcc 	andi	r3,r3,255
  8022e8:	1806fa1e 	bne	r3,zero,803ed4 <___vfprintf_internal_r+0x21a8>
  8022ec:	9080020c 	andi	r2,r18,8
  8022f0:	10048a26 	beq	r2,zero,80351c <___vfprintf_internal_r+0x17f0>
  8022f4:	d8c02d17 	ldw	r3,180(sp)
  8022f8:	d9002d17 	ldw	r4,180(sp)
  8022fc:	d9402d17 	ldw	r5,180(sp)
  802300:	18c00017 	ldw	r3,0(r3)
  802304:	21000117 	ldw	r4,4(r4)
  802308:	29400204 	addi	r5,r5,8
  80230c:	d8c03615 	stw	r3,216(sp)
  802310:	d9003815 	stw	r4,224(sp)
  802314:	d9402d15 	stw	r5,180(sp)
  802318:	d9003617 	ldw	r4,216(sp)
  80231c:	d9403817 	ldw	r5,224(sp)
  802320:	da003d15 	stw	r8,244(sp)
  802324:	04000044 	movi	r16,1
  802328:	08086d00 	call	8086d0 <__fpclassifyd>
  80232c:	da003d17 	ldw	r8,244(sp)
  802330:	14041f1e 	bne	r2,r16,8033b0 <___vfprintf_internal_r+0x1684>
  802334:	d9003617 	ldw	r4,216(sp)
  802338:	d9403817 	ldw	r5,224(sp)
  80233c:	000d883a 	mov	r6,zero
  802340:	000f883a 	mov	r7,zero
  802344:	080c4d40 	call	80c4d4 <__ledf2>
  802348:	da003d17 	ldw	r8,244(sp)
  80234c:	1005be16 	blt	r2,zero,803a48 <___vfprintf_internal_r+0x1d1c>
  802350:	df002783 	ldbu	fp,158(sp)
  802354:	008011c4 	movi	r2,71
  802358:	1445330e 	bge	r2,r17,803828 <___vfprintf_internal_r+0x1afc>
  80235c:	04002074 	movhi	r16,129
  802360:	8406ab04 	addi	r16,r16,6828
  802364:	00c000c4 	movi	r3,3
  802368:	00bfdfc4 	movi	r2,-129
  80236c:	d8c02a15 	stw	r3,168(sp)
  802370:	90a4703a 	and	r18,r18,r2
  802374:	d8c02e15 	stw	r3,184(sp)
  802378:	d8002915 	stw	zero,164(sp)
  80237c:	d8003215 	stw	zero,200(sp)
  802380:	00003706 	br	802460 <___vfprintf_internal_r+0x734>
  802384:	94800214 	ori	r18,r18,8
  802388:	ac400007 	ldb	r17,0(r21)
  80238c:	003ec806 	br	801eb0 <__alt_mem_onchip_mem+0xff7f9eb0>
  802390:	18c03fcc 	andi	r3,r3,255
  802394:	1806db1e 	bne	r3,zero,803f04 <___vfprintf_internal_r+0x21d8>
  802398:	94800414 	ori	r18,r18,16
  80239c:	9080080c 	andi	r2,r18,32
  8023a0:	1002d826 	beq	r2,zero,802f04 <___vfprintf_internal_r+0x11d8>
  8023a4:	d9402d17 	ldw	r5,180(sp)
  8023a8:	d8c02917 	ldw	r3,164(sp)
  8023ac:	d8002785 	stb	zero,158(sp)
  8023b0:	28800204 	addi	r2,r5,8
  8023b4:	2cc00017 	ldw	r19,0(r5)
  8023b8:	2d800117 	ldw	r22,4(r5)
  8023bc:	18048f16 	blt	r3,zero,8035fc <___vfprintf_internal_r+0x18d0>
  8023c0:	013fdfc4 	movi	r4,-129
  8023c4:	9d86b03a 	or	r3,r19,r22
  8023c8:	d8802d15 	stw	r2,180(sp)
  8023cc:	9124703a 	and	r18,r18,r4
  8023d0:	1802d91e 	bne	r3,zero,802f38 <___vfprintf_internal_r+0x120c>
  8023d4:	d8c02917 	ldw	r3,164(sp)
  8023d8:	0039883a 	mov	fp,zero
  8023dc:	1805c326 	beq	r3,zero,803aec <___vfprintf_internal_r+0x1dc0>
  8023e0:	0027883a 	mov	r19,zero
  8023e4:	002d883a 	mov	r22,zero
  8023e8:	dc001e04 	addi	r16,sp,120
  8023ec:	9806d0fa 	srli	r3,r19,3
  8023f0:	b008977a 	slli	r4,r22,29
  8023f4:	b02cd0fa 	srli	r22,r22,3
  8023f8:	9cc001cc 	andi	r19,r19,7
  8023fc:	98800c04 	addi	r2,r19,48
  802400:	843fffc4 	addi	r16,r16,-1
  802404:	20e6b03a 	or	r19,r4,r3
  802408:	80800005 	stb	r2,0(r16)
  80240c:	9d86b03a 	or	r3,r19,r22
  802410:	183ff61e 	bne	r3,zero,8023ec <__alt_mem_onchip_mem+0xff7fa3ec>
  802414:	90c0004c 	andi	r3,r18,1
  802418:	18013b26 	beq	r3,zero,802908 <___vfprintf_internal_r+0xbdc>
  80241c:	10803fcc 	andi	r2,r2,255
  802420:	1080201c 	xori	r2,r2,128
  802424:	10bfe004 	addi	r2,r2,-128
  802428:	00c00c04 	movi	r3,48
  80242c:	10c13626 	beq	r2,r3,802908 <___vfprintf_internal_r+0xbdc>
  802430:	80ffffc5 	stb	r3,-1(r16)
  802434:	d8c02817 	ldw	r3,160(sp)
  802438:	80bfffc4 	addi	r2,r16,-1
  80243c:	1021883a 	mov	r16,r2
  802440:	1887c83a 	sub	r3,r3,r2
  802444:	d8c02e15 	stw	r3,184(sp)
  802448:	d8802e17 	ldw	r2,184(sp)
  80244c:	d9002917 	ldw	r4,164(sp)
  802450:	1100010e 	bge	r2,r4,802458 <___vfprintf_internal_r+0x72c>
  802454:	2005883a 	mov	r2,r4
  802458:	d8802a15 	stw	r2,168(sp)
  80245c:	d8003215 	stw	zero,200(sp)
  802460:	e7003fcc 	andi	fp,fp,255
  802464:	e700201c 	xori	fp,fp,128
  802468:	e73fe004 	addi	fp,fp,-128
  80246c:	e0000326 	beq	fp,zero,80247c <___vfprintf_internal_r+0x750>
  802470:	d8c02a17 	ldw	r3,168(sp)
  802474:	18c00044 	addi	r3,r3,1
  802478:	d8c02a15 	stw	r3,168(sp)
  80247c:	90c0008c 	andi	r3,r18,2
  802480:	d8c02b15 	stw	r3,172(sp)
  802484:	18000326 	beq	r3,zero,802494 <___vfprintf_internal_r+0x768>
  802488:	d8c02a17 	ldw	r3,168(sp)
  80248c:	18c00084 	addi	r3,r3,2
  802490:	d8c02a15 	stw	r3,168(sp)
  802494:	90c0210c 	andi	r3,r18,132
  802498:	d8c03015 	stw	r3,192(sp)
  80249c:	1801a31e 	bne	r3,zero,802b2c <___vfprintf_internal_r+0xe00>
  8024a0:	d9003117 	ldw	r4,196(sp)
  8024a4:	d8c02a17 	ldw	r3,168(sp)
  8024a8:	20e7c83a 	sub	r19,r4,r3
  8024ac:	04c19f0e 	bge	zero,r19,802b2c <___vfprintf_internal_r+0xe00>
  8024b0:	02400404 	movi	r9,16
  8024b4:	d8c02017 	ldw	r3,128(sp)
  8024b8:	d8801f17 	ldw	r2,124(sp)
  8024bc:	4cc50d0e 	bge	r9,r19,8038f4 <___vfprintf_internal_r+0x1bc8>
  8024c0:	01402074 	movhi	r5,129
  8024c4:	2946be84 	addi	r5,r5,6906
  8024c8:	dc403b15 	stw	r17,236(sp)
  8024cc:	d9403515 	stw	r5,212(sp)
  8024d0:	9823883a 	mov	r17,r19
  8024d4:	482d883a 	mov	r22,r9
  8024d8:	9027883a 	mov	r19,r18
  8024dc:	070001c4 	movi	fp,7
  8024e0:	8025883a 	mov	r18,r16
  8024e4:	dc002c17 	ldw	r16,176(sp)
  8024e8:	00000306 	br	8024f8 <___vfprintf_internal_r+0x7cc>
  8024ec:	8c7ffc04 	addi	r17,r17,-16
  8024f0:	42000204 	addi	r8,r8,8
  8024f4:	b440130e 	bge	r22,r17,802544 <___vfprintf_internal_r+0x818>
  8024f8:	01002074 	movhi	r4,129
  8024fc:	18c00404 	addi	r3,r3,16
  802500:	10800044 	addi	r2,r2,1
  802504:	2106be84 	addi	r4,r4,6906
  802508:	41000015 	stw	r4,0(r8)
  80250c:	45800115 	stw	r22,4(r8)
  802510:	d8c02015 	stw	r3,128(sp)
  802514:	d8801f15 	stw	r2,124(sp)
  802518:	e0bff40e 	bge	fp,r2,8024ec <__alt_mem_onchip_mem+0xff7fa4ec>
  80251c:	d9801e04 	addi	r6,sp,120
  802520:	b80b883a 	mov	r5,r23
  802524:	8009883a 	mov	r4,r16
  802528:	080891c0 	call	80891c <__sprint_r>
  80252c:	103f011e 	bne	r2,zero,802134 <__alt_mem_onchip_mem+0xff7fa134>
  802530:	8c7ffc04 	addi	r17,r17,-16
  802534:	d8c02017 	ldw	r3,128(sp)
  802538:	d8801f17 	ldw	r2,124(sp)
  80253c:	da000404 	addi	r8,sp,16
  802540:	b47fed16 	blt	r22,r17,8024f8 <__alt_mem_onchip_mem+0xff7fa4f8>
  802544:	9021883a 	mov	r16,r18
  802548:	9825883a 	mov	r18,r19
  80254c:	8827883a 	mov	r19,r17
  802550:	dc403b17 	ldw	r17,236(sp)
  802554:	d9403517 	ldw	r5,212(sp)
  802558:	98c7883a 	add	r3,r19,r3
  80255c:	10800044 	addi	r2,r2,1
  802560:	41400015 	stw	r5,0(r8)
  802564:	44c00115 	stw	r19,4(r8)
  802568:	d8c02015 	stw	r3,128(sp)
  80256c:	d8801f15 	stw	r2,124(sp)
  802570:	010001c4 	movi	r4,7
  802574:	2082a316 	blt	r4,r2,803004 <___vfprintf_internal_r+0x12d8>
  802578:	df002787 	ldb	fp,158(sp)
  80257c:	42000204 	addi	r8,r8,8
  802580:	e0000c26 	beq	fp,zero,8025b4 <___vfprintf_internal_r+0x888>
  802584:	d8801f17 	ldw	r2,124(sp)
  802588:	d9002784 	addi	r4,sp,158
  80258c:	18c00044 	addi	r3,r3,1
  802590:	10800044 	addi	r2,r2,1
  802594:	41000015 	stw	r4,0(r8)
  802598:	01000044 	movi	r4,1
  80259c:	41000115 	stw	r4,4(r8)
  8025a0:	d8c02015 	stw	r3,128(sp)
  8025a4:	d8801f15 	stw	r2,124(sp)
  8025a8:	010001c4 	movi	r4,7
  8025ac:	20823c16 	blt	r4,r2,802ea0 <___vfprintf_internal_r+0x1174>
  8025b0:	42000204 	addi	r8,r8,8
  8025b4:	d8802b17 	ldw	r2,172(sp)
  8025b8:	10000c26 	beq	r2,zero,8025ec <___vfprintf_internal_r+0x8c0>
  8025bc:	d8801f17 	ldw	r2,124(sp)
  8025c0:	d9002704 	addi	r4,sp,156
  8025c4:	18c00084 	addi	r3,r3,2
  8025c8:	10800044 	addi	r2,r2,1
  8025cc:	41000015 	stw	r4,0(r8)
  8025d0:	01000084 	movi	r4,2
  8025d4:	41000115 	stw	r4,4(r8)
  8025d8:	d8c02015 	stw	r3,128(sp)
  8025dc:	d8801f15 	stw	r2,124(sp)
  8025e0:	010001c4 	movi	r4,7
  8025e4:	20823616 	blt	r4,r2,802ec0 <___vfprintf_internal_r+0x1194>
  8025e8:	42000204 	addi	r8,r8,8
  8025ec:	d9003017 	ldw	r4,192(sp)
  8025f0:	00802004 	movi	r2,128
  8025f4:	20819926 	beq	r4,r2,802c5c <___vfprintf_internal_r+0xf30>
  8025f8:	d9402917 	ldw	r5,164(sp)
  8025fc:	d8802e17 	ldw	r2,184(sp)
  802600:	28adc83a 	sub	r22,r5,r2
  802604:	0580310e 	bge	zero,r22,8026cc <___vfprintf_internal_r+0x9a0>
  802608:	07000404 	movi	fp,16
  80260c:	d8801f17 	ldw	r2,124(sp)
  802610:	e584140e 	bge	fp,r22,803664 <___vfprintf_internal_r+0x1938>
  802614:	01402074 	movhi	r5,129
  802618:	2946ba84 	addi	r5,r5,6890
  80261c:	dc402915 	stw	r17,164(sp)
  802620:	d9402b15 	stw	r5,172(sp)
  802624:	b023883a 	mov	r17,r22
  802628:	04c001c4 	movi	r19,7
  80262c:	a82d883a 	mov	r22,r21
  802630:	902b883a 	mov	r21,r18
  802634:	8025883a 	mov	r18,r16
  802638:	dc002c17 	ldw	r16,176(sp)
  80263c:	00000306 	br	80264c <___vfprintf_internal_r+0x920>
  802640:	8c7ffc04 	addi	r17,r17,-16
  802644:	42000204 	addi	r8,r8,8
  802648:	e440110e 	bge	fp,r17,802690 <___vfprintf_internal_r+0x964>
  80264c:	18c00404 	addi	r3,r3,16
  802650:	10800044 	addi	r2,r2,1
  802654:	45000015 	stw	r20,0(r8)
  802658:	47000115 	stw	fp,4(r8)
  80265c:	d8c02015 	stw	r3,128(sp)
  802660:	d8801f15 	stw	r2,124(sp)
  802664:	98bff60e 	bge	r19,r2,802640 <__alt_mem_onchip_mem+0xff7fa640>
  802668:	d9801e04 	addi	r6,sp,120
  80266c:	b80b883a 	mov	r5,r23
  802670:	8009883a 	mov	r4,r16
  802674:	080891c0 	call	80891c <__sprint_r>
  802678:	103eae1e 	bne	r2,zero,802134 <__alt_mem_onchip_mem+0xff7fa134>
  80267c:	8c7ffc04 	addi	r17,r17,-16
  802680:	d8c02017 	ldw	r3,128(sp)
  802684:	d8801f17 	ldw	r2,124(sp)
  802688:	da000404 	addi	r8,sp,16
  80268c:	e47fef16 	blt	fp,r17,80264c <__alt_mem_onchip_mem+0xff7fa64c>
  802690:	9021883a 	mov	r16,r18
  802694:	a825883a 	mov	r18,r21
  802698:	b02b883a 	mov	r21,r22
  80269c:	882d883a 	mov	r22,r17
  8026a0:	dc402917 	ldw	r17,164(sp)
  8026a4:	d9002b17 	ldw	r4,172(sp)
  8026a8:	1d87883a 	add	r3,r3,r22
  8026ac:	10800044 	addi	r2,r2,1
  8026b0:	41000015 	stw	r4,0(r8)
  8026b4:	45800115 	stw	r22,4(r8)
  8026b8:	d8c02015 	stw	r3,128(sp)
  8026bc:	d8801f15 	stw	r2,124(sp)
  8026c0:	010001c4 	movi	r4,7
  8026c4:	2081ee16 	blt	r4,r2,802e80 <___vfprintf_internal_r+0x1154>
  8026c8:	42000204 	addi	r8,r8,8
  8026cc:	9080400c 	andi	r2,r18,256
  8026d0:	1001181e 	bne	r2,zero,802b34 <___vfprintf_internal_r+0xe08>
  8026d4:	d9402e17 	ldw	r5,184(sp)
  8026d8:	d8801f17 	ldw	r2,124(sp)
  8026dc:	44000015 	stw	r16,0(r8)
  8026e0:	1947883a 	add	r3,r3,r5
  8026e4:	10800044 	addi	r2,r2,1
  8026e8:	41400115 	stw	r5,4(r8)
  8026ec:	d8c02015 	stw	r3,128(sp)
  8026f0:	d8801f15 	stw	r2,124(sp)
  8026f4:	010001c4 	movi	r4,7
  8026f8:	2081d316 	blt	r4,r2,802e48 <___vfprintf_internal_r+0x111c>
  8026fc:	42000204 	addi	r8,r8,8
  802700:	9480010c 	andi	r18,r18,4
  802704:	90003226 	beq	r18,zero,8027d0 <___vfprintf_internal_r+0xaa4>
  802708:	d9403117 	ldw	r5,196(sp)
  80270c:	d8802a17 	ldw	r2,168(sp)
  802710:	28a1c83a 	sub	r16,r5,r2
  802714:	04002e0e 	bge	zero,r16,8027d0 <___vfprintf_internal_r+0xaa4>
  802718:	04400404 	movi	r17,16
  80271c:	d8801f17 	ldw	r2,124(sp)
  802720:	8c04a20e 	bge	r17,r16,8039ac <___vfprintf_internal_r+0x1c80>
  802724:	01402074 	movhi	r5,129
  802728:	2946be84 	addi	r5,r5,6906
  80272c:	d9403515 	stw	r5,212(sp)
  802730:	048001c4 	movi	r18,7
  802734:	dcc02c17 	ldw	r19,176(sp)
  802738:	00000306 	br	802748 <___vfprintf_internal_r+0xa1c>
  80273c:	843ffc04 	addi	r16,r16,-16
  802740:	42000204 	addi	r8,r8,8
  802744:	8c00130e 	bge	r17,r16,802794 <___vfprintf_internal_r+0xa68>
  802748:	01002074 	movhi	r4,129
  80274c:	18c00404 	addi	r3,r3,16
  802750:	10800044 	addi	r2,r2,1
  802754:	2106be84 	addi	r4,r4,6906
  802758:	41000015 	stw	r4,0(r8)
  80275c:	44400115 	stw	r17,4(r8)
  802760:	d8c02015 	stw	r3,128(sp)
  802764:	d8801f15 	stw	r2,124(sp)
  802768:	90bff40e 	bge	r18,r2,80273c <__alt_mem_onchip_mem+0xff7fa73c>
  80276c:	d9801e04 	addi	r6,sp,120
  802770:	b80b883a 	mov	r5,r23
  802774:	9809883a 	mov	r4,r19
  802778:	080891c0 	call	80891c <__sprint_r>
  80277c:	103e6d1e 	bne	r2,zero,802134 <__alt_mem_onchip_mem+0xff7fa134>
  802780:	843ffc04 	addi	r16,r16,-16
  802784:	d8c02017 	ldw	r3,128(sp)
  802788:	d8801f17 	ldw	r2,124(sp)
  80278c:	da000404 	addi	r8,sp,16
  802790:	8c3fed16 	blt	r17,r16,802748 <__alt_mem_onchip_mem+0xff7fa748>
  802794:	d9403517 	ldw	r5,212(sp)
  802798:	1c07883a 	add	r3,r3,r16
  80279c:	10800044 	addi	r2,r2,1
  8027a0:	41400015 	stw	r5,0(r8)
  8027a4:	44000115 	stw	r16,4(r8)
  8027a8:	d8c02015 	stw	r3,128(sp)
  8027ac:	d8801f15 	stw	r2,124(sp)
  8027b0:	010001c4 	movi	r4,7
  8027b4:	2080060e 	bge	r4,r2,8027d0 <___vfprintf_internal_r+0xaa4>
  8027b8:	d9002c17 	ldw	r4,176(sp)
  8027bc:	d9801e04 	addi	r6,sp,120
  8027c0:	b80b883a 	mov	r5,r23
  8027c4:	080891c0 	call	80891c <__sprint_r>
  8027c8:	103e5a1e 	bne	r2,zero,802134 <__alt_mem_onchip_mem+0xff7fa134>
  8027cc:	d8c02017 	ldw	r3,128(sp)
  8027d0:	d8803117 	ldw	r2,196(sp)
  8027d4:	d9002a17 	ldw	r4,168(sp)
  8027d8:	1100010e 	bge	r2,r4,8027e0 <___vfprintf_internal_r+0xab4>
  8027dc:	2005883a 	mov	r2,r4
  8027e0:	d9402f17 	ldw	r5,188(sp)
  8027e4:	288b883a 	add	r5,r5,r2
  8027e8:	d9402f15 	stw	r5,188(sp)
  8027ec:	18019e1e 	bne	r3,zero,802e68 <___vfprintf_internal_r+0x113c>
  8027f0:	a8800007 	ldb	r2,0(r21)
  8027f4:	d8001f15 	stw	zero,124(sp)
  8027f8:	da000404 	addi	r8,sp,16
  8027fc:	103d851e 	bne	r2,zero,801e14 <__alt_mem_onchip_mem+0xff7f9e14>
  802800:	a821883a 	mov	r16,r21
  802804:	003d9b06 	br	801e74 <__alt_mem_onchip_mem+0xff7f9e74>
  802808:	18c03fcc 	andi	r3,r3,255
  80280c:	1805c11e 	bne	r3,zero,803f14 <___vfprintf_internal_r+0x21e8>
  802810:	94800414 	ori	r18,r18,16
  802814:	9080080c 	andi	r2,r18,32
  802818:	10020c26 	beq	r2,zero,80304c <___vfprintf_internal_r+0x1320>
  80281c:	d8802d17 	ldw	r2,180(sp)
  802820:	d9002917 	ldw	r4,164(sp)
  802824:	d8002785 	stb	zero,158(sp)
  802828:	10c00204 	addi	r3,r2,8
  80282c:	14c00017 	ldw	r19,0(r2)
  802830:	15800117 	ldw	r22,4(r2)
  802834:	20040f16 	blt	r4,zero,803874 <___vfprintf_internal_r+0x1b48>
  802838:	013fdfc4 	movi	r4,-129
  80283c:	9d84b03a 	or	r2,r19,r22
  802840:	d8c02d15 	stw	r3,180(sp)
  802844:	9124703a 	and	r18,r18,r4
  802848:	0039883a 	mov	fp,zero
  80284c:	103e891e 	bne	r2,zero,802274 <__alt_mem_onchip_mem+0xff7fa274>
  802850:	d9002917 	ldw	r4,164(sp)
  802854:	2002c11e 	bne	r4,zero,80335c <___vfprintf_internal_r+0x1630>
  802858:	d8002915 	stw	zero,164(sp)
  80285c:	d8002e15 	stw	zero,184(sp)
  802860:	dc001e04 	addi	r16,sp,120
  802864:	003ef806 	br	802448 <__alt_mem_onchip_mem+0xff7fa448>
  802868:	18c03fcc 	andi	r3,r3,255
  80286c:	18059d1e 	bne	r3,zero,803ee4 <___vfprintf_internal_r+0x21b8>
  802870:	01402074 	movhi	r5,129
  802874:	2946ae04 	addi	r5,r5,6840
  802878:	d9403915 	stw	r5,228(sp)
  80287c:	9080080c 	andi	r2,r18,32
  802880:	10005226 	beq	r2,zero,8029cc <___vfprintf_internal_r+0xca0>
  802884:	d8802d17 	ldw	r2,180(sp)
  802888:	14c00017 	ldw	r19,0(r2)
  80288c:	15800117 	ldw	r22,4(r2)
  802890:	10800204 	addi	r2,r2,8
  802894:	d8802d15 	stw	r2,180(sp)
  802898:	9080004c 	andi	r2,r18,1
  80289c:	10019026 	beq	r2,zero,802ee0 <___vfprintf_internal_r+0x11b4>
  8028a0:	9d84b03a 	or	r2,r19,r22
  8028a4:	10036926 	beq	r2,zero,80364c <___vfprintf_internal_r+0x1920>
  8028a8:	d8c02917 	ldw	r3,164(sp)
  8028ac:	00800c04 	movi	r2,48
  8028b0:	d8802705 	stb	r2,156(sp)
  8028b4:	dc402745 	stb	r17,157(sp)
  8028b8:	d8002785 	stb	zero,158(sp)
  8028bc:	90800094 	ori	r2,r18,2
  8028c0:	18045d16 	blt	r3,zero,803a38 <___vfprintf_internal_r+0x1d0c>
  8028c4:	00bfdfc4 	movi	r2,-129
  8028c8:	90a4703a 	and	r18,r18,r2
  8028cc:	94800094 	ori	r18,r18,2
  8028d0:	0039883a 	mov	fp,zero
  8028d4:	d9003917 	ldw	r4,228(sp)
  8028d8:	dc001e04 	addi	r16,sp,120
  8028dc:	988003cc 	andi	r2,r19,15
  8028e0:	b006973a 	slli	r3,r22,28
  8028e4:	2085883a 	add	r2,r4,r2
  8028e8:	9826d13a 	srli	r19,r19,4
  8028ec:	10800003 	ldbu	r2,0(r2)
  8028f0:	b02cd13a 	srli	r22,r22,4
  8028f4:	843fffc4 	addi	r16,r16,-1
  8028f8:	1ce6b03a 	or	r19,r3,r19
  8028fc:	80800005 	stb	r2,0(r16)
  802900:	9d84b03a 	or	r2,r19,r22
  802904:	103ff51e 	bne	r2,zero,8028dc <__alt_mem_onchip_mem+0xff7fa8dc>
  802908:	d8c02817 	ldw	r3,160(sp)
  80290c:	1c07c83a 	sub	r3,r3,r16
  802910:	d8c02e15 	stw	r3,184(sp)
  802914:	003ecc06 	br	802448 <__alt_mem_onchip_mem+0xff7fa448>
  802918:	18c03fcc 	andi	r3,r3,255
  80291c:	183e9f26 	beq	r3,zero,80239c <__alt_mem_onchip_mem+0xff7fa39c>
  802920:	d9c02785 	stb	r7,158(sp)
  802924:	003e9d06 	br	80239c <__alt_mem_onchip_mem+0xff7fa39c>
  802928:	00c00044 	movi	r3,1
  80292c:	01c00ac4 	movi	r7,43
  802930:	ac400007 	ldb	r17,0(r21)
  802934:	003d5e06 	br	801eb0 <__alt_mem_onchip_mem+0xff7f9eb0>
  802938:	94800814 	ori	r18,r18,32
  80293c:	ac400007 	ldb	r17,0(r21)
  802940:	003d5b06 	br	801eb0 <__alt_mem_onchip_mem+0xff7f9eb0>
  802944:	d8c02d17 	ldw	r3,180(sp)
  802948:	d8002785 	stb	zero,158(sp)
  80294c:	1c000017 	ldw	r16,0(r3)
  802950:	1cc00104 	addi	r19,r3,4
  802954:	80041926 	beq	r16,zero,8039bc <___vfprintf_internal_r+0x1c90>
  802958:	d9002917 	ldw	r4,164(sp)
  80295c:	2003d016 	blt	r4,zero,8038a0 <___vfprintf_internal_r+0x1b74>
  802960:	200d883a 	mov	r6,r4
  802964:	000b883a 	mov	r5,zero
  802968:	8009883a 	mov	r4,r16
  80296c:	da003d15 	stw	r8,244(sp)
  802970:	0806d880 	call	806d88 <memchr>
  802974:	da003d17 	ldw	r8,244(sp)
  802978:	10045426 	beq	r2,zero,803acc <___vfprintf_internal_r+0x1da0>
  80297c:	1405c83a 	sub	r2,r2,r16
  802980:	d8802e15 	stw	r2,184(sp)
  802984:	1003cc16 	blt	r2,zero,8038b8 <___vfprintf_internal_r+0x1b8c>
  802988:	df002783 	ldbu	fp,158(sp)
  80298c:	d8802a15 	stw	r2,168(sp)
  802990:	dcc02d15 	stw	r19,180(sp)
  802994:	d8002915 	stw	zero,164(sp)
  802998:	d8003215 	stw	zero,200(sp)
  80299c:	003eb006 	br	802460 <__alt_mem_onchip_mem+0xff7fa460>
  8029a0:	18c03fcc 	andi	r3,r3,255
  8029a4:	183f9b26 	beq	r3,zero,802814 <__alt_mem_onchip_mem+0xff7fa814>
  8029a8:	d9c02785 	stb	r7,158(sp)
  8029ac:	003f9906 	br	802814 <__alt_mem_onchip_mem+0xff7fa814>
  8029b0:	18c03fcc 	andi	r3,r3,255
  8029b4:	1805551e 	bne	r3,zero,803f0c <___vfprintf_internal_r+0x21e0>
  8029b8:	01402074 	movhi	r5,129
  8029bc:	2946b304 	addi	r5,r5,6860
  8029c0:	d9403915 	stw	r5,228(sp)
  8029c4:	9080080c 	andi	r2,r18,32
  8029c8:	103fae1e 	bne	r2,zero,802884 <__alt_mem_onchip_mem+0xff7fa884>
  8029cc:	9080040c 	andi	r2,r18,16
  8029d0:	1002de26 	beq	r2,zero,80354c <___vfprintf_internal_r+0x1820>
  8029d4:	d8c02d17 	ldw	r3,180(sp)
  8029d8:	002d883a 	mov	r22,zero
  8029dc:	1cc00017 	ldw	r19,0(r3)
  8029e0:	18c00104 	addi	r3,r3,4
  8029e4:	d8c02d15 	stw	r3,180(sp)
  8029e8:	003fab06 	br	802898 <__alt_mem_onchip_mem+0xff7fa898>
  8029ec:	38803fcc 	andi	r2,r7,255
  8029f0:	1080201c 	xori	r2,r2,128
  8029f4:	10bfe004 	addi	r2,r2,-128
  8029f8:	1002d21e 	bne	r2,zero,803544 <___vfprintf_internal_r+0x1818>
  8029fc:	00c00044 	movi	r3,1
  802a00:	01c00804 	movi	r7,32
  802a04:	ac400007 	ldb	r17,0(r21)
  802a08:	003d2906 	br	801eb0 <__alt_mem_onchip_mem+0xff7f9eb0>
  802a0c:	94800054 	ori	r18,r18,1
  802a10:	ac400007 	ldb	r17,0(r21)
  802a14:	003d2606 	br	801eb0 <__alt_mem_onchip_mem+0xff7f9eb0>
  802a18:	18c03fcc 	andi	r3,r3,255
  802a1c:	183e0526 	beq	r3,zero,802234 <__alt_mem_onchip_mem+0xff7fa234>
  802a20:	d9c02785 	stb	r7,158(sp)
  802a24:	003e0306 	br	802234 <__alt_mem_onchip_mem+0xff7fa234>
  802a28:	94801014 	ori	r18,r18,64
  802a2c:	ac400007 	ldb	r17,0(r21)
  802a30:	003d1f06 	br	801eb0 <__alt_mem_onchip_mem+0xff7f9eb0>
  802a34:	ac400007 	ldb	r17,0(r21)
  802a38:	8a438726 	beq	r17,r9,803858 <___vfprintf_internal_r+0x1b2c>
  802a3c:	94800414 	ori	r18,r18,16
  802a40:	003d1b06 	br	801eb0 <__alt_mem_onchip_mem+0xff7f9eb0>
  802a44:	18c03fcc 	andi	r3,r3,255
  802a48:	1805341e 	bne	r3,zero,803f1c <___vfprintf_internal_r+0x21f0>
  802a4c:	9080080c 	andi	r2,r18,32
  802a50:	1002cd26 	beq	r2,zero,803588 <___vfprintf_internal_r+0x185c>
  802a54:	d9402d17 	ldw	r5,180(sp)
  802a58:	d9002f17 	ldw	r4,188(sp)
  802a5c:	28800017 	ldw	r2,0(r5)
  802a60:	2007d7fa 	srai	r3,r4,31
  802a64:	29400104 	addi	r5,r5,4
  802a68:	d9402d15 	stw	r5,180(sp)
  802a6c:	11000015 	stw	r4,0(r2)
  802a70:	10c00115 	stw	r3,4(r2)
  802a74:	003ce506 	br	801e0c <__alt_mem_onchip_mem+0xff7f9e0c>
  802a78:	d8c02d17 	ldw	r3,180(sp)
  802a7c:	d9002d17 	ldw	r4,180(sp)
  802a80:	d8002785 	stb	zero,158(sp)
  802a84:	18800017 	ldw	r2,0(r3)
  802a88:	21000104 	addi	r4,r4,4
  802a8c:	00c00044 	movi	r3,1
  802a90:	d8c02a15 	stw	r3,168(sp)
  802a94:	d8801405 	stb	r2,80(sp)
  802a98:	d9002d15 	stw	r4,180(sp)
  802a9c:	d8c02e15 	stw	r3,184(sp)
  802aa0:	d8002915 	stw	zero,164(sp)
  802aa4:	d8003215 	stw	zero,200(sp)
  802aa8:	dc001404 	addi	r16,sp,80
  802aac:	0039883a 	mov	fp,zero
  802ab0:	003e7206 	br	80247c <__alt_mem_onchip_mem+0xff7fa47c>
  802ab4:	01002074 	movhi	r4,129
  802ab8:	2106b304 	addi	r4,r4,6860
  802abc:	0039883a 	mov	fp,zero
  802ac0:	d9003915 	stw	r4,228(sp)
  802ac4:	04401e04 	movi	r17,120
  802ac8:	003f8206 	br	8028d4 <__alt_mem_onchip_mem+0xff7fa8d4>
  802acc:	18c03fcc 	andi	r3,r3,255
  802ad0:	1805061e 	bne	r3,zero,803eec <___vfprintf_internal_r+0x21c0>
  802ad4:	883d9126 	beq	r17,zero,80211c <__alt_mem_onchip_mem+0xff7fa11c>
  802ad8:	00c00044 	movi	r3,1
  802adc:	d8c02a15 	stw	r3,168(sp)
  802ae0:	dc401405 	stb	r17,80(sp)
  802ae4:	d8002785 	stb	zero,158(sp)
  802ae8:	003fec06 	br	802a9c <__alt_mem_onchip_mem+0xff7faa9c>
  802aec:	01402074 	movhi	r5,129
  802af0:	2946b304 	addi	r5,r5,6860
  802af4:	d9403915 	stw	r5,228(sp)
  802af8:	d8c02d15 	stw	r3,180(sp)
  802afc:	1025883a 	mov	r18,r2
  802b00:	04401e04 	movi	r17,120
  802b04:	9d84b03a 	or	r2,r19,r22
  802b08:	1000fc1e 	bne	r2,zero,802efc <___vfprintf_internal_r+0x11d0>
  802b0c:	0039883a 	mov	fp,zero
  802b10:	00800084 	movi	r2,2
  802b14:	10803fcc 	andi	r2,r2,255
  802b18:	00c00044 	movi	r3,1
  802b1c:	10c20f26 	beq	r2,r3,80335c <___vfprintf_internal_r+0x1630>
  802b20:	00c00084 	movi	r3,2
  802b24:	10fd6326 	beq	r2,r3,8020b4 <__alt_mem_onchip_mem+0xff7fa0b4>
  802b28:	003e2d06 	br	8023e0 <__alt_mem_onchip_mem+0xff7fa3e0>
  802b2c:	d8c02017 	ldw	r3,128(sp)
  802b30:	003e9306 	br	802580 <__alt_mem_onchip_mem+0xff7fa580>
  802b34:	00801944 	movi	r2,101
  802b38:	14407e0e 	bge	r2,r17,802d34 <___vfprintf_internal_r+0x1008>
  802b3c:	d9003617 	ldw	r4,216(sp)
  802b40:	d9403817 	ldw	r5,224(sp)
  802b44:	000d883a 	mov	r6,zero
  802b48:	000f883a 	mov	r7,zero
  802b4c:	d8c03c15 	stw	r3,240(sp)
  802b50:	da003d15 	stw	r8,244(sp)
  802b54:	080c3700 	call	80c370 <__eqdf2>
  802b58:	d8c03c17 	ldw	r3,240(sp)
  802b5c:	da003d17 	ldw	r8,244(sp)
  802b60:	1000f71e 	bne	r2,zero,802f40 <___vfprintf_internal_r+0x1214>
  802b64:	d8801f17 	ldw	r2,124(sp)
  802b68:	01002074 	movhi	r4,129
  802b6c:	2106ba04 	addi	r4,r4,6888
  802b70:	18c00044 	addi	r3,r3,1
  802b74:	10800044 	addi	r2,r2,1
  802b78:	41000015 	stw	r4,0(r8)
  802b7c:	01000044 	movi	r4,1
  802b80:	41000115 	stw	r4,4(r8)
  802b84:	d8c02015 	stw	r3,128(sp)
  802b88:	d8801f15 	stw	r2,124(sp)
  802b8c:	010001c4 	movi	r4,7
  802b90:	2082b816 	blt	r4,r2,803674 <___vfprintf_internal_r+0x1948>
  802b94:	42000204 	addi	r8,r8,8
  802b98:	d8802617 	ldw	r2,152(sp)
  802b9c:	d9403317 	ldw	r5,204(sp)
  802ba0:	11400216 	blt	r2,r5,802bac <___vfprintf_internal_r+0xe80>
  802ba4:	9080004c 	andi	r2,r18,1
  802ba8:	103ed526 	beq	r2,zero,802700 <__alt_mem_onchip_mem+0xff7fa700>
  802bac:	d8803717 	ldw	r2,220(sp)
  802bb0:	d9003417 	ldw	r4,208(sp)
  802bb4:	d9403717 	ldw	r5,220(sp)
  802bb8:	1887883a 	add	r3,r3,r2
  802bbc:	d8801f17 	ldw	r2,124(sp)
  802bc0:	41000015 	stw	r4,0(r8)
  802bc4:	41400115 	stw	r5,4(r8)
  802bc8:	10800044 	addi	r2,r2,1
  802bcc:	d8c02015 	stw	r3,128(sp)
  802bd0:	d8801f15 	stw	r2,124(sp)
  802bd4:	010001c4 	movi	r4,7
  802bd8:	20832916 	blt	r4,r2,803880 <___vfprintf_internal_r+0x1b54>
  802bdc:	42000204 	addi	r8,r8,8
  802be0:	d8803317 	ldw	r2,204(sp)
  802be4:	143fffc4 	addi	r16,r2,-1
  802be8:	043ec50e 	bge	zero,r16,802700 <__alt_mem_onchip_mem+0xff7fa700>
  802bec:	04400404 	movi	r17,16
  802bf0:	d8801f17 	ldw	r2,124(sp)
  802bf4:	8c00880e 	bge	r17,r16,802e18 <___vfprintf_internal_r+0x10ec>
  802bf8:	01402074 	movhi	r5,129
  802bfc:	2946ba84 	addi	r5,r5,6890
  802c00:	d9402b15 	stw	r5,172(sp)
  802c04:	058001c4 	movi	r22,7
  802c08:	dcc02c17 	ldw	r19,176(sp)
  802c0c:	00000306 	br	802c1c <___vfprintf_internal_r+0xef0>
  802c10:	42000204 	addi	r8,r8,8
  802c14:	843ffc04 	addi	r16,r16,-16
  802c18:	8c00820e 	bge	r17,r16,802e24 <___vfprintf_internal_r+0x10f8>
  802c1c:	18c00404 	addi	r3,r3,16
  802c20:	10800044 	addi	r2,r2,1
  802c24:	45000015 	stw	r20,0(r8)
  802c28:	44400115 	stw	r17,4(r8)
  802c2c:	d8c02015 	stw	r3,128(sp)
  802c30:	d8801f15 	stw	r2,124(sp)
  802c34:	b0bff60e 	bge	r22,r2,802c10 <__alt_mem_onchip_mem+0xff7fac10>
  802c38:	d9801e04 	addi	r6,sp,120
  802c3c:	b80b883a 	mov	r5,r23
  802c40:	9809883a 	mov	r4,r19
  802c44:	080891c0 	call	80891c <__sprint_r>
  802c48:	103d3a1e 	bne	r2,zero,802134 <__alt_mem_onchip_mem+0xff7fa134>
  802c4c:	d8c02017 	ldw	r3,128(sp)
  802c50:	d8801f17 	ldw	r2,124(sp)
  802c54:	da000404 	addi	r8,sp,16
  802c58:	003fee06 	br	802c14 <__alt_mem_onchip_mem+0xff7fac14>
  802c5c:	d9403117 	ldw	r5,196(sp)
  802c60:	d8802a17 	ldw	r2,168(sp)
  802c64:	28adc83a 	sub	r22,r5,r2
  802c68:	05be630e 	bge	zero,r22,8025f8 <__alt_mem_onchip_mem+0xff7fa5f8>
  802c6c:	07000404 	movi	fp,16
  802c70:	d8801f17 	ldw	r2,124(sp)
  802c74:	e5838f0e 	bge	fp,r22,803ab4 <___vfprintf_internal_r+0x1d88>
  802c78:	01402074 	movhi	r5,129
  802c7c:	2946ba84 	addi	r5,r5,6890
  802c80:	dc403015 	stw	r17,192(sp)
  802c84:	d9402b15 	stw	r5,172(sp)
  802c88:	b023883a 	mov	r17,r22
  802c8c:	04c001c4 	movi	r19,7
  802c90:	a82d883a 	mov	r22,r21
  802c94:	902b883a 	mov	r21,r18
  802c98:	8025883a 	mov	r18,r16
  802c9c:	dc002c17 	ldw	r16,176(sp)
  802ca0:	00000306 	br	802cb0 <___vfprintf_internal_r+0xf84>
  802ca4:	8c7ffc04 	addi	r17,r17,-16
  802ca8:	42000204 	addi	r8,r8,8
  802cac:	e440110e 	bge	fp,r17,802cf4 <___vfprintf_internal_r+0xfc8>
  802cb0:	18c00404 	addi	r3,r3,16
  802cb4:	10800044 	addi	r2,r2,1
  802cb8:	45000015 	stw	r20,0(r8)
  802cbc:	47000115 	stw	fp,4(r8)
  802cc0:	d8c02015 	stw	r3,128(sp)
  802cc4:	d8801f15 	stw	r2,124(sp)
  802cc8:	98bff60e 	bge	r19,r2,802ca4 <__alt_mem_onchip_mem+0xff7faca4>
  802ccc:	d9801e04 	addi	r6,sp,120
  802cd0:	b80b883a 	mov	r5,r23
  802cd4:	8009883a 	mov	r4,r16
  802cd8:	080891c0 	call	80891c <__sprint_r>
  802cdc:	103d151e 	bne	r2,zero,802134 <__alt_mem_onchip_mem+0xff7fa134>
  802ce0:	8c7ffc04 	addi	r17,r17,-16
  802ce4:	d8c02017 	ldw	r3,128(sp)
  802ce8:	d8801f17 	ldw	r2,124(sp)
  802cec:	da000404 	addi	r8,sp,16
  802cf0:	e47fef16 	blt	fp,r17,802cb0 <__alt_mem_onchip_mem+0xff7facb0>
  802cf4:	9021883a 	mov	r16,r18
  802cf8:	a825883a 	mov	r18,r21
  802cfc:	b02b883a 	mov	r21,r22
  802d00:	882d883a 	mov	r22,r17
  802d04:	dc403017 	ldw	r17,192(sp)
  802d08:	d9002b17 	ldw	r4,172(sp)
  802d0c:	1d87883a 	add	r3,r3,r22
  802d10:	10800044 	addi	r2,r2,1
  802d14:	41000015 	stw	r4,0(r8)
  802d18:	45800115 	stw	r22,4(r8)
  802d1c:	d8c02015 	stw	r3,128(sp)
  802d20:	d8801f15 	stw	r2,124(sp)
  802d24:	010001c4 	movi	r4,7
  802d28:	20818e16 	blt	r4,r2,803364 <___vfprintf_internal_r+0x1638>
  802d2c:	42000204 	addi	r8,r8,8
  802d30:	003e3106 	br	8025f8 <__alt_mem_onchip_mem+0xff7fa5f8>
  802d34:	d9403317 	ldw	r5,204(sp)
  802d38:	00800044 	movi	r2,1
  802d3c:	18c00044 	addi	r3,r3,1
  802d40:	1141530e 	bge	r2,r5,803290 <___vfprintf_internal_r+0x1564>
  802d44:	dc401f17 	ldw	r17,124(sp)
  802d48:	00800044 	movi	r2,1
  802d4c:	40800115 	stw	r2,4(r8)
  802d50:	8c400044 	addi	r17,r17,1
  802d54:	44000015 	stw	r16,0(r8)
  802d58:	d8c02015 	stw	r3,128(sp)
  802d5c:	dc401f15 	stw	r17,124(sp)
  802d60:	008001c4 	movi	r2,7
  802d64:	14416b16 	blt	r2,r17,803314 <___vfprintf_internal_r+0x15e8>
  802d68:	42000204 	addi	r8,r8,8
  802d6c:	d8803717 	ldw	r2,220(sp)
  802d70:	d9003417 	ldw	r4,208(sp)
  802d74:	8c400044 	addi	r17,r17,1
  802d78:	10c7883a 	add	r3,r2,r3
  802d7c:	40800115 	stw	r2,4(r8)
  802d80:	41000015 	stw	r4,0(r8)
  802d84:	d8c02015 	stw	r3,128(sp)
  802d88:	dc401f15 	stw	r17,124(sp)
  802d8c:	008001c4 	movi	r2,7
  802d90:	14416916 	blt	r2,r17,803338 <___vfprintf_internal_r+0x160c>
  802d94:	45800204 	addi	r22,r8,8
  802d98:	d9003617 	ldw	r4,216(sp)
  802d9c:	d9403817 	ldw	r5,224(sp)
  802da0:	000d883a 	mov	r6,zero
  802da4:	000f883a 	mov	r7,zero
  802da8:	d8c03c15 	stw	r3,240(sp)
  802dac:	080c3700 	call	80c370 <__eqdf2>
  802db0:	d8c03c17 	ldw	r3,240(sp)
  802db4:	1000bc26 	beq	r2,zero,8030a8 <___vfprintf_internal_r+0x137c>
  802db8:	d9403317 	ldw	r5,204(sp)
  802dbc:	84000044 	addi	r16,r16,1
  802dc0:	8c400044 	addi	r17,r17,1
  802dc4:	28bfffc4 	addi	r2,r5,-1
  802dc8:	1887883a 	add	r3,r3,r2
  802dcc:	b0800115 	stw	r2,4(r22)
  802dd0:	b4000015 	stw	r16,0(r22)
  802dd4:	d8c02015 	stw	r3,128(sp)
  802dd8:	dc401f15 	stw	r17,124(sp)
  802ddc:	008001c4 	movi	r2,7
  802de0:	14414316 	blt	r2,r17,8032f0 <___vfprintf_internal_r+0x15c4>
  802de4:	b5800204 	addi	r22,r22,8
  802de8:	d9003a17 	ldw	r4,232(sp)
  802dec:	df0022c4 	addi	fp,sp,139
  802df0:	8c400044 	addi	r17,r17,1
  802df4:	20c7883a 	add	r3,r4,r3
  802df8:	b7000015 	stw	fp,0(r22)
  802dfc:	b1000115 	stw	r4,4(r22)
  802e00:	d8c02015 	stw	r3,128(sp)
  802e04:	dc401f15 	stw	r17,124(sp)
  802e08:	008001c4 	movi	r2,7
  802e0c:	14400e16 	blt	r2,r17,802e48 <___vfprintf_internal_r+0x111c>
  802e10:	b2000204 	addi	r8,r22,8
  802e14:	003e3a06 	br	802700 <__alt_mem_onchip_mem+0xff7fa700>
  802e18:	01002074 	movhi	r4,129
  802e1c:	2106ba84 	addi	r4,r4,6890
  802e20:	d9002b15 	stw	r4,172(sp)
  802e24:	d9002b17 	ldw	r4,172(sp)
  802e28:	1c07883a 	add	r3,r3,r16
  802e2c:	44000115 	stw	r16,4(r8)
  802e30:	41000015 	stw	r4,0(r8)
  802e34:	10800044 	addi	r2,r2,1
  802e38:	d8c02015 	stw	r3,128(sp)
  802e3c:	d8801f15 	stw	r2,124(sp)
  802e40:	010001c4 	movi	r4,7
  802e44:	20be2d0e 	bge	r4,r2,8026fc <__alt_mem_onchip_mem+0xff7fa6fc>
  802e48:	d9002c17 	ldw	r4,176(sp)
  802e4c:	d9801e04 	addi	r6,sp,120
  802e50:	b80b883a 	mov	r5,r23
  802e54:	080891c0 	call	80891c <__sprint_r>
  802e58:	103cb61e 	bne	r2,zero,802134 <__alt_mem_onchip_mem+0xff7fa134>
  802e5c:	d8c02017 	ldw	r3,128(sp)
  802e60:	da000404 	addi	r8,sp,16
  802e64:	003e2606 	br	802700 <__alt_mem_onchip_mem+0xff7fa700>
  802e68:	d9002c17 	ldw	r4,176(sp)
  802e6c:	d9801e04 	addi	r6,sp,120
  802e70:	b80b883a 	mov	r5,r23
  802e74:	080891c0 	call	80891c <__sprint_r>
  802e78:	103e5d26 	beq	r2,zero,8027f0 <__alt_mem_onchip_mem+0xff7fa7f0>
  802e7c:	003cad06 	br	802134 <__alt_mem_onchip_mem+0xff7fa134>
  802e80:	d9002c17 	ldw	r4,176(sp)
  802e84:	d9801e04 	addi	r6,sp,120
  802e88:	b80b883a 	mov	r5,r23
  802e8c:	080891c0 	call	80891c <__sprint_r>
  802e90:	103ca81e 	bne	r2,zero,802134 <__alt_mem_onchip_mem+0xff7fa134>
  802e94:	d8c02017 	ldw	r3,128(sp)
  802e98:	da000404 	addi	r8,sp,16
  802e9c:	003e0b06 	br	8026cc <__alt_mem_onchip_mem+0xff7fa6cc>
  802ea0:	d9002c17 	ldw	r4,176(sp)
  802ea4:	d9801e04 	addi	r6,sp,120
  802ea8:	b80b883a 	mov	r5,r23
  802eac:	080891c0 	call	80891c <__sprint_r>
  802eb0:	103ca01e 	bne	r2,zero,802134 <__alt_mem_onchip_mem+0xff7fa134>
  802eb4:	d8c02017 	ldw	r3,128(sp)
  802eb8:	da000404 	addi	r8,sp,16
  802ebc:	003dbd06 	br	8025b4 <__alt_mem_onchip_mem+0xff7fa5b4>
  802ec0:	d9002c17 	ldw	r4,176(sp)
  802ec4:	d9801e04 	addi	r6,sp,120
  802ec8:	b80b883a 	mov	r5,r23
  802ecc:	080891c0 	call	80891c <__sprint_r>
  802ed0:	103c981e 	bne	r2,zero,802134 <__alt_mem_onchip_mem+0xff7fa134>
  802ed4:	d8c02017 	ldw	r3,128(sp)
  802ed8:	da000404 	addi	r8,sp,16
  802edc:	003dc306 	br	8025ec <__alt_mem_onchip_mem+0xff7fa5ec>
  802ee0:	d8802917 	ldw	r2,164(sp)
  802ee4:	d8002785 	stb	zero,158(sp)
  802ee8:	103f0616 	blt	r2,zero,802b04 <__alt_mem_onchip_mem+0xff7fab04>
  802eec:	00ffdfc4 	movi	r3,-129
  802ef0:	9d84b03a 	or	r2,r19,r22
  802ef4:	90e4703a 	and	r18,r18,r3
  802ef8:	103c6b26 	beq	r2,zero,8020a8 <__alt_mem_onchip_mem+0xff7fa0a8>
  802efc:	0039883a 	mov	fp,zero
  802f00:	003e7406 	br	8028d4 <__alt_mem_onchip_mem+0xff7fa8d4>
  802f04:	9080040c 	andi	r2,r18,16
  802f08:	1001b326 	beq	r2,zero,8035d8 <___vfprintf_internal_r+0x18ac>
  802f0c:	d9002d17 	ldw	r4,180(sp)
  802f10:	d9402917 	ldw	r5,164(sp)
  802f14:	d8002785 	stb	zero,158(sp)
  802f18:	20800104 	addi	r2,r4,4
  802f1c:	24c00017 	ldw	r19,0(r4)
  802f20:	002d883a 	mov	r22,zero
  802f24:	2801b516 	blt	r5,zero,8035fc <___vfprintf_internal_r+0x18d0>
  802f28:	00ffdfc4 	movi	r3,-129
  802f2c:	d8802d15 	stw	r2,180(sp)
  802f30:	90e4703a 	and	r18,r18,r3
  802f34:	983d2726 	beq	r19,zero,8023d4 <__alt_mem_onchip_mem+0xff7fa3d4>
  802f38:	0039883a 	mov	fp,zero
  802f3c:	003d2a06 	br	8023e8 <__alt_mem_onchip_mem+0xff7fa3e8>
  802f40:	dc402617 	ldw	r17,152(sp)
  802f44:	0441d30e 	bge	zero,r17,803694 <___vfprintf_internal_r+0x1968>
  802f48:	dc403217 	ldw	r17,200(sp)
  802f4c:	d8803317 	ldw	r2,204(sp)
  802f50:	1440010e 	bge	r2,r17,802f58 <___vfprintf_internal_r+0x122c>
  802f54:	1023883a 	mov	r17,r2
  802f58:	04400a0e 	bge	zero,r17,802f84 <___vfprintf_internal_r+0x1258>
  802f5c:	d8801f17 	ldw	r2,124(sp)
  802f60:	1c47883a 	add	r3,r3,r17
  802f64:	44000015 	stw	r16,0(r8)
  802f68:	10800044 	addi	r2,r2,1
  802f6c:	44400115 	stw	r17,4(r8)
  802f70:	d8c02015 	stw	r3,128(sp)
  802f74:	d8801f15 	stw	r2,124(sp)
  802f78:	010001c4 	movi	r4,7
  802f7c:	20826516 	blt	r4,r2,803914 <___vfprintf_internal_r+0x1be8>
  802f80:	42000204 	addi	r8,r8,8
  802f84:	88026116 	blt	r17,zero,80390c <___vfprintf_internal_r+0x1be0>
  802f88:	d9003217 	ldw	r4,200(sp)
  802f8c:	2463c83a 	sub	r17,r4,r17
  802f90:	04407b0e 	bge	zero,r17,803180 <___vfprintf_internal_r+0x1454>
  802f94:	05800404 	movi	r22,16
  802f98:	d8801f17 	ldw	r2,124(sp)
  802f9c:	b4419d0e 	bge	r22,r17,803614 <___vfprintf_internal_r+0x18e8>
  802fa0:	01002074 	movhi	r4,129
  802fa4:	2106ba84 	addi	r4,r4,6890
  802fa8:	d9002b15 	stw	r4,172(sp)
  802fac:	070001c4 	movi	fp,7
  802fb0:	dcc02c17 	ldw	r19,176(sp)
  802fb4:	00000306 	br	802fc4 <___vfprintf_internal_r+0x1298>
  802fb8:	42000204 	addi	r8,r8,8
  802fbc:	8c7ffc04 	addi	r17,r17,-16
  802fc0:	b441970e 	bge	r22,r17,803620 <___vfprintf_internal_r+0x18f4>
  802fc4:	18c00404 	addi	r3,r3,16
  802fc8:	10800044 	addi	r2,r2,1
  802fcc:	45000015 	stw	r20,0(r8)
  802fd0:	45800115 	stw	r22,4(r8)
  802fd4:	d8c02015 	stw	r3,128(sp)
  802fd8:	d8801f15 	stw	r2,124(sp)
  802fdc:	e0bff60e 	bge	fp,r2,802fb8 <__alt_mem_onchip_mem+0xff7fafb8>
  802fe0:	d9801e04 	addi	r6,sp,120
  802fe4:	b80b883a 	mov	r5,r23
  802fe8:	9809883a 	mov	r4,r19
  802fec:	080891c0 	call	80891c <__sprint_r>
  802ff0:	103c501e 	bne	r2,zero,802134 <__alt_mem_onchip_mem+0xff7fa134>
  802ff4:	d8c02017 	ldw	r3,128(sp)
  802ff8:	d8801f17 	ldw	r2,124(sp)
  802ffc:	da000404 	addi	r8,sp,16
  803000:	003fee06 	br	802fbc <__alt_mem_onchip_mem+0xff7fafbc>
  803004:	d9002c17 	ldw	r4,176(sp)
  803008:	d9801e04 	addi	r6,sp,120
  80300c:	b80b883a 	mov	r5,r23
  803010:	080891c0 	call	80891c <__sprint_r>
  803014:	103c471e 	bne	r2,zero,802134 <__alt_mem_onchip_mem+0xff7fa134>
  803018:	d8c02017 	ldw	r3,128(sp)
  80301c:	df002787 	ldb	fp,158(sp)
  803020:	da000404 	addi	r8,sp,16
  803024:	003d5606 	br	802580 <__alt_mem_onchip_mem+0xff7fa580>
  803028:	9080040c 	andi	r2,r18,16
  80302c:	10016126 	beq	r2,zero,8035b4 <___vfprintf_internal_r+0x1888>
  803030:	d8802d17 	ldw	r2,180(sp)
  803034:	14c00017 	ldw	r19,0(r2)
  803038:	10800104 	addi	r2,r2,4
  80303c:	d8802d15 	stw	r2,180(sp)
  803040:	982dd7fa 	srai	r22,r19,31
  803044:	b005883a 	mov	r2,r22
  803048:	003c8206 	br	802254 <__alt_mem_onchip_mem+0xff7fa254>
  80304c:	9080040c 	andi	r2,r18,16
  803050:	10003526 	beq	r2,zero,803128 <___vfprintf_internal_r+0x13fc>
  803054:	d9402d17 	ldw	r5,180(sp)
  803058:	d8c02917 	ldw	r3,164(sp)
  80305c:	d8002785 	stb	zero,158(sp)
  803060:	28800104 	addi	r2,r5,4
  803064:	2cc00017 	ldw	r19,0(r5)
  803068:	002d883a 	mov	r22,zero
  80306c:	18003716 	blt	r3,zero,80314c <___vfprintf_internal_r+0x1420>
  803070:	00ffdfc4 	movi	r3,-129
  803074:	d8802d15 	stw	r2,180(sp)
  803078:	90e4703a 	and	r18,r18,r3
  80307c:	0039883a 	mov	fp,zero
  803080:	983df326 	beq	r19,zero,802850 <__alt_mem_onchip_mem+0xff7fa850>
  803084:	00800244 	movi	r2,9
  803088:	14fc7b36 	bltu	r2,r19,802278 <__alt_mem_onchip_mem+0xff7fa278>
  80308c:	d8c02817 	ldw	r3,160(sp)
  803090:	dc001dc4 	addi	r16,sp,119
  803094:	9cc00c04 	addi	r19,r19,48
  803098:	1c07c83a 	sub	r3,r3,r16
  80309c:	dcc01dc5 	stb	r19,119(sp)
  8030a0:	d8c02e15 	stw	r3,184(sp)
  8030a4:	003ce806 	br	802448 <__alt_mem_onchip_mem+0xff7fa448>
  8030a8:	d8803317 	ldw	r2,204(sp)
  8030ac:	143fffc4 	addi	r16,r2,-1
  8030b0:	043f4d0e 	bge	zero,r16,802de8 <__alt_mem_onchip_mem+0xff7fade8>
  8030b4:	07000404 	movi	fp,16
  8030b8:	e400810e 	bge	fp,r16,8032c0 <___vfprintf_internal_r+0x1594>
  8030bc:	01402074 	movhi	r5,129
  8030c0:	2946ba84 	addi	r5,r5,6890
  8030c4:	d9402b15 	stw	r5,172(sp)
  8030c8:	01c001c4 	movi	r7,7
  8030cc:	dcc02c17 	ldw	r19,176(sp)
  8030d0:	00000306 	br	8030e0 <___vfprintf_internal_r+0x13b4>
  8030d4:	b5800204 	addi	r22,r22,8
  8030d8:	843ffc04 	addi	r16,r16,-16
  8030dc:	e4007b0e 	bge	fp,r16,8032cc <___vfprintf_internal_r+0x15a0>
  8030e0:	18c00404 	addi	r3,r3,16
  8030e4:	8c400044 	addi	r17,r17,1
  8030e8:	b5000015 	stw	r20,0(r22)
  8030ec:	b7000115 	stw	fp,4(r22)
  8030f0:	d8c02015 	stw	r3,128(sp)
  8030f4:	dc401f15 	stw	r17,124(sp)
  8030f8:	3c7ff60e 	bge	r7,r17,8030d4 <__alt_mem_onchip_mem+0xff7fb0d4>
  8030fc:	d9801e04 	addi	r6,sp,120
  803100:	b80b883a 	mov	r5,r23
  803104:	9809883a 	mov	r4,r19
  803108:	d9c03c15 	stw	r7,240(sp)
  80310c:	080891c0 	call	80891c <__sprint_r>
  803110:	d9c03c17 	ldw	r7,240(sp)
  803114:	103c071e 	bne	r2,zero,802134 <__alt_mem_onchip_mem+0xff7fa134>
  803118:	d8c02017 	ldw	r3,128(sp)
  80311c:	dc401f17 	ldw	r17,124(sp)
  803120:	dd800404 	addi	r22,sp,16
  803124:	003fec06 	br	8030d8 <__alt_mem_onchip_mem+0xff7fb0d8>
  803128:	9080100c 	andi	r2,r18,64
  80312c:	d8002785 	stb	zero,158(sp)
  803130:	10010e26 	beq	r2,zero,80356c <___vfprintf_internal_r+0x1840>
  803134:	d9002d17 	ldw	r4,180(sp)
  803138:	d9402917 	ldw	r5,164(sp)
  80313c:	002d883a 	mov	r22,zero
  803140:	20800104 	addi	r2,r4,4
  803144:	24c0000b 	ldhu	r19,0(r4)
  803148:	283fc90e 	bge	r5,zero,803070 <__alt_mem_onchip_mem+0xff7fb070>
  80314c:	d8802d15 	stw	r2,180(sp)
  803150:	0039883a 	mov	fp,zero
  803154:	9d84b03a 	or	r2,r19,r22
  803158:	103c461e 	bne	r2,zero,802274 <__alt_mem_onchip_mem+0xff7fa274>
  80315c:	00800044 	movi	r2,1
  803160:	003e6c06 	br	802b14 <__alt_mem_onchip_mem+0xff7fab14>
  803164:	d9002c17 	ldw	r4,176(sp)
  803168:	d9801e04 	addi	r6,sp,120
  80316c:	b80b883a 	mov	r5,r23
  803170:	080891c0 	call	80891c <__sprint_r>
  803174:	103bef1e 	bne	r2,zero,802134 <__alt_mem_onchip_mem+0xff7fa134>
  803178:	d8c02017 	ldw	r3,128(sp)
  80317c:	da000404 	addi	r8,sp,16
  803180:	d9003217 	ldw	r4,200(sp)
  803184:	d8802617 	ldw	r2,152(sp)
  803188:	d9403317 	ldw	r5,204(sp)
  80318c:	8123883a 	add	r17,r16,r4
  803190:	11400216 	blt	r2,r5,80319c <___vfprintf_internal_r+0x1470>
  803194:	9100004c 	andi	r4,r18,1
  803198:	20000d26 	beq	r4,zero,8031d0 <___vfprintf_internal_r+0x14a4>
  80319c:	d9003717 	ldw	r4,220(sp)
  8031a0:	d9403417 	ldw	r5,208(sp)
  8031a4:	1907883a 	add	r3,r3,r4
  8031a8:	d9001f17 	ldw	r4,124(sp)
  8031ac:	41400015 	stw	r5,0(r8)
  8031b0:	d9403717 	ldw	r5,220(sp)
  8031b4:	21000044 	addi	r4,r4,1
  8031b8:	d8c02015 	stw	r3,128(sp)
  8031bc:	41400115 	stw	r5,4(r8)
  8031c0:	d9001f15 	stw	r4,124(sp)
  8031c4:	014001c4 	movi	r5,7
  8031c8:	2901e816 	blt	r5,r4,80396c <___vfprintf_internal_r+0x1c40>
  8031cc:	42000204 	addi	r8,r8,8
  8031d0:	d9003317 	ldw	r4,204(sp)
  8031d4:	8121883a 	add	r16,r16,r4
  8031d8:	2085c83a 	sub	r2,r4,r2
  8031dc:	8461c83a 	sub	r16,r16,r17
  8031e0:	1400010e 	bge	r2,r16,8031e8 <___vfprintf_internal_r+0x14bc>
  8031e4:	1021883a 	mov	r16,r2
  8031e8:	04000a0e 	bge	zero,r16,803214 <___vfprintf_internal_r+0x14e8>
  8031ec:	d9001f17 	ldw	r4,124(sp)
  8031f0:	1c07883a 	add	r3,r3,r16
  8031f4:	44400015 	stw	r17,0(r8)
  8031f8:	21000044 	addi	r4,r4,1
  8031fc:	44000115 	stw	r16,4(r8)
  803200:	d8c02015 	stw	r3,128(sp)
  803204:	d9001f15 	stw	r4,124(sp)
  803208:	014001c4 	movi	r5,7
  80320c:	2901fb16 	blt	r5,r4,8039fc <___vfprintf_internal_r+0x1cd0>
  803210:	42000204 	addi	r8,r8,8
  803214:	8001f716 	blt	r16,zero,8039f4 <___vfprintf_internal_r+0x1cc8>
  803218:	1421c83a 	sub	r16,r2,r16
  80321c:	043d380e 	bge	zero,r16,802700 <__alt_mem_onchip_mem+0xff7fa700>
  803220:	04400404 	movi	r17,16
  803224:	d8801f17 	ldw	r2,124(sp)
  803228:	8c3efb0e 	bge	r17,r16,802e18 <__alt_mem_onchip_mem+0xff7fae18>
  80322c:	01402074 	movhi	r5,129
  803230:	2946ba84 	addi	r5,r5,6890
  803234:	d9402b15 	stw	r5,172(sp)
  803238:	058001c4 	movi	r22,7
  80323c:	dcc02c17 	ldw	r19,176(sp)
  803240:	00000306 	br	803250 <___vfprintf_internal_r+0x1524>
  803244:	42000204 	addi	r8,r8,8
  803248:	843ffc04 	addi	r16,r16,-16
  80324c:	8c3ef50e 	bge	r17,r16,802e24 <__alt_mem_onchip_mem+0xff7fae24>
  803250:	18c00404 	addi	r3,r3,16
  803254:	10800044 	addi	r2,r2,1
  803258:	45000015 	stw	r20,0(r8)
  80325c:	44400115 	stw	r17,4(r8)
  803260:	d8c02015 	stw	r3,128(sp)
  803264:	d8801f15 	stw	r2,124(sp)
  803268:	b0bff60e 	bge	r22,r2,803244 <__alt_mem_onchip_mem+0xff7fb244>
  80326c:	d9801e04 	addi	r6,sp,120
  803270:	b80b883a 	mov	r5,r23
  803274:	9809883a 	mov	r4,r19
  803278:	080891c0 	call	80891c <__sprint_r>
  80327c:	103bad1e 	bne	r2,zero,802134 <__alt_mem_onchip_mem+0xff7fa134>
  803280:	d8c02017 	ldw	r3,128(sp)
  803284:	d8801f17 	ldw	r2,124(sp)
  803288:	da000404 	addi	r8,sp,16
  80328c:	003fee06 	br	803248 <__alt_mem_onchip_mem+0xff7fb248>
  803290:	9088703a 	and	r4,r18,r2
  803294:	203eab1e 	bne	r4,zero,802d44 <__alt_mem_onchip_mem+0xff7fad44>
  803298:	dc401f17 	ldw	r17,124(sp)
  80329c:	40800115 	stw	r2,4(r8)
  8032a0:	44000015 	stw	r16,0(r8)
  8032a4:	8c400044 	addi	r17,r17,1
  8032a8:	d8c02015 	stw	r3,128(sp)
  8032ac:	dc401f15 	stw	r17,124(sp)
  8032b0:	008001c4 	movi	r2,7
  8032b4:	14400e16 	blt	r2,r17,8032f0 <___vfprintf_internal_r+0x15c4>
  8032b8:	45800204 	addi	r22,r8,8
  8032bc:	003eca06 	br	802de8 <__alt_mem_onchip_mem+0xff7fade8>
  8032c0:	01002074 	movhi	r4,129
  8032c4:	2106ba84 	addi	r4,r4,6890
  8032c8:	d9002b15 	stw	r4,172(sp)
  8032cc:	d8802b17 	ldw	r2,172(sp)
  8032d0:	1c07883a 	add	r3,r3,r16
  8032d4:	8c400044 	addi	r17,r17,1
  8032d8:	b0800015 	stw	r2,0(r22)
  8032dc:	b4000115 	stw	r16,4(r22)
  8032e0:	d8c02015 	stw	r3,128(sp)
  8032e4:	dc401f15 	stw	r17,124(sp)
  8032e8:	008001c4 	movi	r2,7
  8032ec:	147ebd0e 	bge	r2,r17,802de4 <__alt_mem_onchip_mem+0xff7fade4>
  8032f0:	d9002c17 	ldw	r4,176(sp)
  8032f4:	d9801e04 	addi	r6,sp,120
  8032f8:	b80b883a 	mov	r5,r23
  8032fc:	080891c0 	call	80891c <__sprint_r>
  803300:	103b8c1e 	bne	r2,zero,802134 <__alt_mem_onchip_mem+0xff7fa134>
  803304:	d8c02017 	ldw	r3,128(sp)
  803308:	dc401f17 	ldw	r17,124(sp)
  80330c:	dd800404 	addi	r22,sp,16
  803310:	003eb506 	br	802de8 <__alt_mem_onchip_mem+0xff7fade8>
  803314:	d9002c17 	ldw	r4,176(sp)
  803318:	d9801e04 	addi	r6,sp,120
  80331c:	b80b883a 	mov	r5,r23
  803320:	080891c0 	call	80891c <__sprint_r>
  803324:	103b831e 	bne	r2,zero,802134 <__alt_mem_onchip_mem+0xff7fa134>
  803328:	d8c02017 	ldw	r3,128(sp)
  80332c:	dc401f17 	ldw	r17,124(sp)
  803330:	da000404 	addi	r8,sp,16
  803334:	003e8d06 	br	802d6c <__alt_mem_onchip_mem+0xff7fad6c>
  803338:	d9002c17 	ldw	r4,176(sp)
  80333c:	d9801e04 	addi	r6,sp,120
  803340:	b80b883a 	mov	r5,r23
  803344:	080891c0 	call	80891c <__sprint_r>
  803348:	103b7a1e 	bne	r2,zero,802134 <__alt_mem_onchip_mem+0xff7fa134>
  80334c:	d8c02017 	ldw	r3,128(sp)
  803350:	dc401f17 	ldw	r17,124(sp)
  803354:	dd800404 	addi	r22,sp,16
  803358:	003e8f06 	br	802d98 <__alt_mem_onchip_mem+0xff7fad98>
  80335c:	0027883a 	mov	r19,zero
  803360:	003f4a06 	br	80308c <__alt_mem_onchip_mem+0xff7fb08c>
  803364:	d9002c17 	ldw	r4,176(sp)
  803368:	d9801e04 	addi	r6,sp,120
  80336c:	b80b883a 	mov	r5,r23
  803370:	080891c0 	call	80891c <__sprint_r>
  803374:	103b6f1e 	bne	r2,zero,802134 <__alt_mem_onchip_mem+0xff7fa134>
  803378:	d8c02017 	ldw	r3,128(sp)
  80337c:	da000404 	addi	r8,sp,16
  803380:	003c9d06 	br	8025f8 <__alt_mem_onchip_mem+0xff7fa5f8>
  803384:	04e7c83a 	sub	r19,zero,r19
  803388:	9804c03a 	cmpne	r2,r19,zero
  80338c:	05adc83a 	sub	r22,zero,r22
  803390:	b0adc83a 	sub	r22,r22,r2
  803394:	d8802917 	ldw	r2,164(sp)
  803398:	07000b44 	movi	fp,45
  80339c:	df002785 	stb	fp,158(sp)
  8033a0:	10017b16 	blt	r2,zero,803990 <___vfprintf_internal_r+0x1c64>
  8033a4:	00bfdfc4 	movi	r2,-129
  8033a8:	90a4703a 	and	r18,r18,r2
  8033ac:	003bb106 	br	802274 <__alt_mem_onchip_mem+0xff7fa274>
  8033b0:	d9003617 	ldw	r4,216(sp)
  8033b4:	d9403817 	ldw	r5,224(sp)
  8033b8:	da003d15 	stw	r8,244(sp)
  8033bc:	08086d00 	call	8086d0 <__fpclassifyd>
  8033c0:	da003d17 	ldw	r8,244(sp)
  8033c4:	1000f026 	beq	r2,zero,803788 <___vfprintf_internal_r+0x1a5c>
  8033c8:	d9002917 	ldw	r4,164(sp)
  8033cc:	05bff7c4 	movi	r22,-33
  8033d0:	00bfffc4 	movi	r2,-1
  8033d4:	8dac703a 	and	r22,r17,r22
  8033d8:	20820026 	beq	r4,r2,803bdc <___vfprintf_internal_r+0x1eb0>
  8033dc:	008011c4 	movi	r2,71
  8033e0:	b081f726 	beq	r22,r2,803bc0 <___vfprintf_internal_r+0x1e94>
  8033e4:	d9003817 	ldw	r4,224(sp)
  8033e8:	90c04014 	ori	r3,r18,256
  8033ec:	d8c02b15 	stw	r3,172(sp)
  8033f0:	20021516 	blt	r4,zero,803c48 <___vfprintf_internal_r+0x1f1c>
  8033f4:	dcc03817 	ldw	r19,224(sp)
  8033f8:	d8002a05 	stb	zero,168(sp)
  8033fc:	00801984 	movi	r2,102
  803400:	8881f926 	beq	r17,r2,803be8 <___vfprintf_internal_r+0x1ebc>
  803404:	00801184 	movi	r2,70
  803408:	88821c26 	beq	r17,r2,803c7c <___vfprintf_internal_r+0x1f50>
  80340c:	00801144 	movi	r2,69
  803410:	b081ef26 	beq	r22,r2,803bd0 <___vfprintf_internal_r+0x1ea4>
  803414:	d8c02917 	ldw	r3,164(sp)
  803418:	d8802104 	addi	r2,sp,132
  80341c:	d8800315 	stw	r2,12(sp)
  803420:	d9403617 	ldw	r5,216(sp)
  803424:	d8802504 	addi	r2,sp,148
  803428:	d9002c17 	ldw	r4,176(sp)
  80342c:	d8800215 	stw	r2,8(sp)
  803430:	d8802604 	addi	r2,sp,152
  803434:	d8c00015 	stw	r3,0(sp)
  803438:	d8800115 	stw	r2,4(sp)
  80343c:	01c00084 	movi	r7,2
  803440:	980d883a 	mov	r6,r19
  803444:	d8c03c15 	stw	r3,240(sp)
  803448:	da003d15 	stw	r8,244(sp)
  80344c:	08044040 	call	804404 <_dtoa_r>
  803450:	1021883a 	mov	r16,r2
  803454:	008019c4 	movi	r2,103
  803458:	d8c03c17 	ldw	r3,240(sp)
  80345c:	da003d17 	ldw	r8,244(sp)
  803460:	88817126 	beq	r17,r2,803a28 <___vfprintf_internal_r+0x1cfc>
  803464:	008011c4 	movi	r2,71
  803468:	88829226 	beq	r17,r2,803eb4 <___vfprintf_internal_r+0x2188>
  80346c:	80f9883a 	add	fp,r16,r3
  803470:	d9003617 	ldw	r4,216(sp)
  803474:	000d883a 	mov	r6,zero
  803478:	000f883a 	mov	r7,zero
  80347c:	980b883a 	mov	r5,r19
  803480:	da003d15 	stw	r8,244(sp)
  803484:	080c3700 	call	80c370 <__eqdf2>
  803488:	da003d17 	ldw	r8,244(sp)
  80348c:	10018d26 	beq	r2,zero,803ac4 <___vfprintf_internal_r+0x1d98>
  803490:	d8802117 	ldw	r2,132(sp)
  803494:	1700062e 	bgeu	r2,fp,8034b0 <___vfprintf_internal_r+0x1784>
  803498:	01000c04 	movi	r4,48
  80349c:	10c00044 	addi	r3,r2,1
  8034a0:	d8c02115 	stw	r3,132(sp)
  8034a4:	11000005 	stb	r4,0(r2)
  8034a8:	d8802117 	ldw	r2,132(sp)
  8034ac:	173ffb36 	bltu	r2,fp,80349c <__alt_mem_onchip_mem+0xff7fb49c>
  8034b0:	1405c83a 	sub	r2,r2,r16
  8034b4:	d8803315 	stw	r2,204(sp)
  8034b8:	008011c4 	movi	r2,71
  8034bc:	b0817626 	beq	r22,r2,803a98 <___vfprintf_internal_r+0x1d6c>
  8034c0:	00801944 	movi	r2,101
  8034c4:	1442810e 	bge	r2,r17,803ecc <___vfprintf_internal_r+0x21a0>
  8034c8:	d8c02617 	ldw	r3,152(sp)
  8034cc:	00801984 	movi	r2,102
  8034d0:	d8c03215 	stw	r3,200(sp)
  8034d4:	8881fe26 	beq	r17,r2,803cd0 <___vfprintf_internal_r+0x1fa4>
  8034d8:	d8c03217 	ldw	r3,200(sp)
  8034dc:	d9003317 	ldw	r4,204(sp)
  8034e0:	1901dd16 	blt	r3,r4,803c58 <___vfprintf_internal_r+0x1f2c>
  8034e4:	9480004c 	andi	r18,r18,1
  8034e8:	90022b1e 	bne	r18,zero,803d98 <___vfprintf_internal_r+0x206c>
  8034ec:	1805883a 	mov	r2,r3
  8034f0:	18028016 	blt	r3,zero,803ef4 <___vfprintf_internal_r+0x21c8>
  8034f4:	d8c03217 	ldw	r3,200(sp)
  8034f8:	044019c4 	movi	r17,103
  8034fc:	d8c02e15 	stw	r3,184(sp)
  803500:	df002a07 	ldb	fp,168(sp)
  803504:	e001531e 	bne	fp,zero,803a54 <___vfprintf_internal_r+0x1d28>
  803508:	df002783 	ldbu	fp,158(sp)
  80350c:	d8802a15 	stw	r2,168(sp)
  803510:	dc802b17 	ldw	r18,172(sp)
  803514:	d8002915 	stw	zero,164(sp)
  803518:	003bd106 	br	802460 <__alt_mem_onchip_mem+0xff7fa460>
  80351c:	d8802d17 	ldw	r2,180(sp)
  803520:	d8c02d17 	ldw	r3,180(sp)
  803524:	d9002d17 	ldw	r4,180(sp)
  803528:	10800017 	ldw	r2,0(r2)
  80352c:	18c00117 	ldw	r3,4(r3)
  803530:	21000204 	addi	r4,r4,8
  803534:	d8803615 	stw	r2,216(sp)
  803538:	d8c03815 	stw	r3,224(sp)
  80353c:	d9002d15 	stw	r4,180(sp)
  803540:	003b7506 	br	802318 <__alt_mem_onchip_mem+0xff7fa318>
  803544:	ac400007 	ldb	r17,0(r21)
  803548:	003a5906 	br	801eb0 <__alt_mem_onchip_mem+0xff7f9eb0>
  80354c:	9080100c 	andi	r2,r18,64
  803550:	1000a826 	beq	r2,zero,8037f4 <___vfprintf_internal_r+0x1ac8>
  803554:	d9002d17 	ldw	r4,180(sp)
  803558:	002d883a 	mov	r22,zero
  80355c:	24c0000b 	ldhu	r19,0(r4)
  803560:	21000104 	addi	r4,r4,4
  803564:	d9002d15 	stw	r4,180(sp)
  803568:	003ccb06 	br	802898 <__alt_mem_onchip_mem+0xff7fa898>
  80356c:	d8c02d17 	ldw	r3,180(sp)
  803570:	d9002917 	ldw	r4,164(sp)
  803574:	002d883a 	mov	r22,zero
  803578:	18800104 	addi	r2,r3,4
  80357c:	1cc00017 	ldw	r19,0(r3)
  803580:	203ebb0e 	bge	r4,zero,803070 <__alt_mem_onchip_mem+0xff7fb070>
  803584:	003ef106 	br	80314c <__alt_mem_onchip_mem+0xff7fb14c>
  803588:	9080040c 	andi	r2,r18,16
  80358c:	1000921e 	bne	r2,zero,8037d8 <___vfprintf_internal_r+0x1aac>
  803590:	9480100c 	andi	r18,r18,64
  803594:	90013926 	beq	r18,zero,803a7c <___vfprintf_internal_r+0x1d50>
  803598:	d9002d17 	ldw	r4,180(sp)
  80359c:	d9402f17 	ldw	r5,188(sp)
  8035a0:	20800017 	ldw	r2,0(r4)
  8035a4:	21000104 	addi	r4,r4,4
  8035a8:	d9002d15 	stw	r4,180(sp)
  8035ac:	1140000d 	sth	r5,0(r2)
  8035b0:	003a1606 	br	801e0c <__alt_mem_onchip_mem+0xff7f9e0c>
  8035b4:	9080100c 	andi	r2,r18,64
  8035b8:	10008026 	beq	r2,zero,8037bc <___vfprintf_internal_r+0x1a90>
  8035bc:	d8c02d17 	ldw	r3,180(sp)
  8035c0:	1cc0000f 	ldh	r19,0(r3)
  8035c4:	18c00104 	addi	r3,r3,4
  8035c8:	d8c02d15 	stw	r3,180(sp)
  8035cc:	982dd7fa 	srai	r22,r19,31
  8035d0:	b005883a 	mov	r2,r22
  8035d4:	003b1f06 	br	802254 <__alt_mem_onchip_mem+0xff7fa254>
  8035d8:	9080100c 	andi	r2,r18,64
  8035dc:	d8002785 	stb	zero,158(sp)
  8035e0:	10008a1e 	bne	r2,zero,80380c <___vfprintf_internal_r+0x1ae0>
  8035e4:	d9402d17 	ldw	r5,180(sp)
  8035e8:	d8c02917 	ldw	r3,164(sp)
  8035ec:	002d883a 	mov	r22,zero
  8035f0:	28800104 	addi	r2,r5,4
  8035f4:	2cc00017 	ldw	r19,0(r5)
  8035f8:	183e4b0e 	bge	r3,zero,802f28 <__alt_mem_onchip_mem+0xff7faf28>
  8035fc:	9d86b03a 	or	r3,r19,r22
  803600:	d8802d15 	stw	r2,180(sp)
  803604:	183e4c1e 	bne	r3,zero,802f38 <__alt_mem_onchip_mem+0xff7faf38>
  803608:	0039883a 	mov	fp,zero
  80360c:	0005883a 	mov	r2,zero
  803610:	003d4006 	br	802b14 <__alt_mem_onchip_mem+0xff7fab14>
  803614:	01402074 	movhi	r5,129
  803618:	2946ba84 	addi	r5,r5,6890
  80361c:	d9402b15 	stw	r5,172(sp)
  803620:	d9402b17 	ldw	r5,172(sp)
  803624:	1c47883a 	add	r3,r3,r17
  803628:	10800044 	addi	r2,r2,1
  80362c:	41400015 	stw	r5,0(r8)
  803630:	44400115 	stw	r17,4(r8)
  803634:	d8c02015 	stw	r3,128(sp)
  803638:	d8801f15 	stw	r2,124(sp)
  80363c:	010001c4 	movi	r4,7
  803640:	20bec816 	blt	r4,r2,803164 <__alt_mem_onchip_mem+0xff7fb164>
  803644:	42000204 	addi	r8,r8,8
  803648:	003ecd06 	br	803180 <__alt_mem_onchip_mem+0xff7fb180>
  80364c:	d9002917 	ldw	r4,164(sp)
  803650:	d8002785 	stb	zero,158(sp)
  803654:	203d2d16 	blt	r4,zero,802b0c <__alt_mem_onchip_mem+0xff7fab0c>
  803658:	00bfdfc4 	movi	r2,-129
  80365c:	90a4703a 	and	r18,r18,r2
  803660:	003a9106 	br	8020a8 <__alt_mem_onchip_mem+0xff7fa0a8>
  803664:	01002074 	movhi	r4,129
  803668:	2106ba84 	addi	r4,r4,6890
  80366c:	d9002b15 	stw	r4,172(sp)
  803670:	003c0c06 	br	8026a4 <__alt_mem_onchip_mem+0xff7fa6a4>
  803674:	d9002c17 	ldw	r4,176(sp)
  803678:	d9801e04 	addi	r6,sp,120
  80367c:	b80b883a 	mov	r5,r23
  803680:	080891c0 	call	80891c <__sprint_r>
  803684:	103aab1e 	bne	r2,zero,802134 <__alt_mem_onchip_mem+0xff7fa134>
  803688:	d8c02017 	ldw	r3,128(sp)
  80368c:	da000404 	addi	r8,sp,16
  803690:	003d4106 	br	802b98 <__alt_mem_onchip_mem+0xff7fab98>
  803694:	d8801f17 	ldw	r2,124(sp)
  803698:	01402074 	movhi	r5,129
  80369c:	01000044 	movi	r4,1
  8036a0:	18c00044 	addi	r3,r3,1
  8036a4:	10800044 	addi	r2,r2,1
  8036a8:	2946ba04 	addi	r5,r5,6888
  8036ac:	41000115 	stw	r4,4(r8)
  8036b0:	41400015 	stw	r5,0(r8)
  8036b4:	d8c02015 	stw	r3,128(sp)
  8036b8:	d8801f15 	stw	r2,124(sp)
  8036bc:	010001c4 	movi	r4,7
  8036c0:	20805c16 	blt	r4,r2,803834 <___vfprintf_internal_r+0x1b08>
  8036c4:	42000204 	addi	r8,r8,8
  8036c8:	8800041e 	bne	r17,zero,8036dc <___vfprintf_internal_r+0x19b0>
  8036cc:	d8803317 	ldw	r2,204(sp)
  8036d0:	1000021e 	bne	r2,zero,8036dc <___vfprintf_internal_r+0x19b0>
  8036d4:	9080004c 	andi	r2,r18,1
  8036d8:	103c0926 	beq	r2,zero,802700 <__alt_mem_onchip_mem+0xff7fa700>
  8036dc:	d9003717 	ldw	r4,220(sp)
  8036e0:	d8801f17 	ldw	r2,124(sp)
  8036e4:	d9403417 	ldw	r5,208(sp)
  8036e8:	20c7883a 	add	r3,r4,r3
  8036ec:	10800044 	addi	r2,r2,1
  8036f0:	41000115 	stw	r4,4(r8)
  8036f4:	41400015 	stw	r5,0(r8)
  8036f8:	d8c02015 	stw	r3,128(sp)
  8036fc:	d8801f15 	stw	r2,124(sp)
  803700:	010001c4 	movi	r4,7
  803704:	20812116 	blt	r4,r2,803b8c <___vfprintf_internal_r+0x1e60>
  803708:	42000204 	addi	r8,r8,8
  80370c:	0463c83a 	sub	r17,zero,r17
  803710:	0440730e 	bge	zero,r17,8038e0 <___vfprintf_internal_r+0x1bb4>
  803714:	05800404 	movi	r22,16
  803718:	b440860e 	bge	r22,r17,803934 <___vfprintf_internal_r+0x1c08>
  80371c:	01402074 	movhi	r5,129
  803720:	2946ba84 	addi	r5,r5,6890
  803724:	d9402b15 	stw	r5,172(sp)
  803728:	070001c4 	movi	fp,7
  80372c:	dcc02c17 	ldw	r19,176(sp)
  803730:	00000306 	br	803740 <___vfprintf_internal_r+0x1a14>
  803734:	42000204 	addi	r8,r8,8
  803738:	8c7ffc04 	addi	r17,r17,-16
  80373c:	b440800e 	bge	r22,r17,803940 <___vfprintf_internal_r+0x1c14>
  803740:	18c00404 	addi	r3,r3,16
  803744:	10800044 	addi	r2,r2,1
  803748:	45000015 	stw	r20,0(r8)
  80374c:	45800115 	stw	r22,4(r8)
  803750:	d8c02015 	stw	r3,128(sp)
  803754:	d8801f15 	stw	r2,124(sp)
  803758:	e0bff60e 	bge	fp,r2,803734 <__alt_mem_onchip_mem+0xff7fb734>
  80375c:	d9801e04 	addi	r6,sp,120
  803760:	b80b883a 	mov	r5,r23
  803764:	9809883a 	mov	r4,r19
  803768:	080891c0 	call	80891c <__sprint_r>
  80376c:	103a711e 	bne	r2,zero,802134 <__alt_mem_onchip_mem+0xff7fa134>
  803770:	d8c02017 	ldw	r3,128(sp)
  803774:	d8801f17 	ldw	r2,124(sp)
  803778:	da000404 	addi	r8,sp,16
  80377c:	003fee06 	br	803738 <__alt_mem_onchip_mem+0xff7fb738>
  803780:	00bfffc4 	movi	r2,-1
  803784:	003a6f06 	br	802144 <__alt_mem_onchip_mem+0xff7fa144>
  803788:	008011c4 	movi	r2,71
  80378c:	1440b816 	blt	r2,r17,803a70 <___vfprintf_internal_r+0x1d44>
  803790:	04002074 	movhi	r16,129
  803794:	8406ac04 	addi	r16,r16,6832
  803798:	00c000c4 	movi	r3,3
  80379c:	00bfdfc4 	movi	r2,-129
  8037a0:	d8c02a15 	stw	r3,168(sp)
  8037a4:	90a4703a 	and	r18,r18,r2
  8037a8:	df002783 	ldbu	fp,158(sp)
  8037ac:	d8c02e15 	stw	r3,184(sp)
  8037b0:	d8002915 	stw	zero,164(sp)
  8037b4:	d8003215 	stw	zero,200(sp)
  8037b8:	003b2906 	br	802460 <__alt_mem_onchip_mem+0xff7fa460>
  8037bc:	d9002d17 	ldw	r4,180(sp)
  8037c0:	24c00017 	ldw	r19,0(r4)
  8037c4:	21000104 	addi	r4,r4,4
  8037c8:	d9002d15 	stw	r4,180(sp)
  8037cc:	982dd7fa 	srai	r22,r19,31
  8037d0:	b005883a 	mov	r2,r22
  8037d4:	003a9f06 	br	802254 <__alt_mem_onchip_mem+0xff7fa254>
  8037d8:	d9402d17 	ldw	r5,180(sp)
  8037dc:	d8c02f17 	ldw	r3,188(sp)
  8037e0:	28800017 	ldw	r2,0(r5)
  8037e4:	29400104 	addi	r5,r5,4
  8037e8:	d9402d15 	stw	r5,180(sp)
  8037ec:	10c00015 	stw	r3,0(r2)
  8037f0:	00398606 	br	801e0c <__alt_mem_onchip_mem+0xff7f9e0c>
  8037f4:	d9402d17 	ldw	r5,180(sp)
  8037f8:	002d883a 	mov	r22,zero
  8037fc:	2cc00017 	ldw	r19,0(r5)
  803800:	29400104 	addi	r5,r5,4
  803804:	d9402d15 	stw	r5,180(sp)
  803808:	003c2306 	br	802898 <__alt_mem_onchip_mem+0xff7fa898>
  80380c:	d8c02d17 	ldw	r3,180(sp)
  803810:	d9002917 	ldw	r4,164(sp)
  803814:	002d883a 	mov	r22,zero
  803818:	18800104 	addi	r2,r3,4
  80381c:	1cc0000b 	ldhu	r19,0(r3)
  803820:	203dc10e 	bge	r4,zero,802f28 <__alt_mem_onchip_mem+0xff7faf28>
  803824:	003f7506 	br	8035fc <__alt_mem_onchip_mem+0xff7fb5fc>
  803828:	04002074 	movhi	r16,129
  80382c:	8406aa04 	addi	r16,r16,6824
  803830:	003acc06 	br	802364 <__alt_mem_onchip_mem+0xff7fa364>
  803834:	d9002c17 	ldw	r4,176(sp)
  803838:	d9801e04 	addi	r6,sp,120
  80383c:	b80b883a 	mov	r5,r23
  803840:	080891c0 	call	80891c <__sprint_r>
  803844:	103a3b1e 	bne	r2,zero,802134 <__alt_mem_onchip_mem+0xff7fa134>
  803848:	dc402617 	ldw	r17,152(sp)
  80384c:	d8c02017 	ldw	r3,128(sp)
  803850:	da000404 	addi	r8,sp,16
  803854:	003f9c06 	br	8036c8 <__alt_mem_onchip_mem+0xff7fb6c8>
  803858:	ac400043 	ldbu	r17,1(r21)
  80385c:	94800814 	ori	r18,r18,32
  803860:	ad400044 	addi	r21,r21,1
  803864:	8c403fcc 	andi	r17,r17,255
  803868:	8c40201c 	xori	r17,r17,128
  80386c:	8c7fe004 	addi	r17,r17,-128
  803870:	00398f06 	br	801eb0 <__alt_mem_onchip_mem+0xff7f9eb0>
  803874:	d8c02d15 	stw	r3,180(sp)
  803878:	0039883a 	mov	fp,zero
  80387c:	003e3506 	br	803154 <__alt_mem_onchip_mem+0xff7fb154>
  803880:	d9002c17 	ldw	r4,176(sp)
  803884:	d9801e04 	addi	r6,sp,120
  803888:	b80b883a 	mov	r5,r23
  80388c:	080891c0 	call	80891c <__sprint_r>
  803890:	103a281e 	bne	r2,zero,802134 <__alt_mem_onchip_mem+0xff7fa134>
  803894:	d8c02017 	ldw	r3,128(sp)
  803898:	da000404 	addi	r8,sp,16
  80389c:	003cd006 	br	802be0 <__alt_mem_onchip_mem+0xff7fabe0>
  8038a0:	8009883a 	mov	r4,r16
  8038a4:	da003d15 	stw	r8,244(sp)
  8038a8:	0801c940 	call	801c94 <strlen>
  8038ac:	d8802e15 	stw	r2,184(sp)
  8038b0:	da003d17 	ldw	r8,244(sp)
  8038b4:	103c340e 	bge	r2,zero,802988 <__alt_mem_onchip_mem+0xff7fa988>
  8038b8:	0005883a 	mov	r2,zero
  8038bc:	003c3206 	br	802988 <__alt_mem_onchip_mem+0xff7fa988>
  8038c0:	d9002c17 	ldw	r4,176(sp)
  8038c4:	d9801e04 	addi	r6,sp,120
  8038c8:	b80b883a 	mov	r5,r23
  8038cc:	080891c0 	call	80891c <__sprint_r>
  8038d0:	103a181e 	bne	r2,zero,802134 <__alt_mem_onchip_mem+0xff7fa134>
  8038d4:	d8c02017 	ldw	r3,128(sp)
  8038d8:	d8801f17 	ldw	r2,124(sp)
  8038dc:	da000404 	addi	r8,sp,16
  8038e0:	d9403317 	ldw	r5,204(sp)
  8038e4:	10800044 	addi	r2,r2,1
  8038e8:	44000015 	stw	r16,0(r8)
  8038ec:	28c7883a 	add	r3,r5,r3
  8038f0:	003b7d06 	br	8026e8 <__alt_mem_onchip_mem+0xff7fa6e8>
  8038f4:	01002074 	movhi	r4,129
  8038f8:	2106be84 	addi	r4,r4,6906
  8038fc:	d9003515 	stw	r4,212(sp)
  803900:	003b1406 	br	802554 <__alt_mem_onchip_mem+0xff7fa554>
  803904:	013fffc4 	movi	r4,-1
  803908:	003a3506 	br	8021e0 <__alt_mem_onchip_mem+0xff7fa1e0>
  80390c:	0023883a 	mov	r17,zero
  803910:	003d9d06 	br	802f88 <__alt_mem_onchip_mem+0xff7faf88>
  803914:	d9002c17 	ldw	r4,176(sp)
  803918:	d9801e04 	addi	r6,sp,120
  80391c:	b80b883a 	mov	r5,r23
  803920:	080891c0 	call	80891c <__sprint_r>
  803924:	103a031e 	bne	r2,zero,802134 <__alt_mem_onchip_mem+0xff7fa134>
  803928:	d8c02017 	ldw	r3,128(sp)
  80392c:	da000404 	addi	r8,sp,16
  803930:	003d9406 	br	802f84 <__alt_mem_onchip_mem+0xff7faf84>
  803934:	01002074 	movhi	r4,129
  803938:	2106ba84 	addi	r4,r4,6890
  80393c:	d9002b15 	stw	r4,172(sp)
  803940:	d9002b17 	ldw	r4,172(sp)
  803944:	1c47883a 	add	r3,r3,r17
  803948:	10800044 	addi	r2,r2,1
  80394c:	41000015 	stw	r4,0(r8)
  803950:	44400115 	stw	r17,4(r8)
  803954:	d8c02015 	stw	r3,128(sp)
  803958:	d8801f15 	stw	r2,124(sp)
  80395c:	010001c4 	movi	r4,7
  803960:	20bfd716 	blt	r4,r2,8038c0 <__alt_mem_onchip_mem+0xff7fb8c0>
  803964:	42000204 	addi	r8,r8,8
  803968:	003fdd06 	br	8038e0 <__alt_mem_onchip_mem+0xff7fb8e0>
  80396c:	d9002c17 	ldw	r4,176(sp)
  803970:	d9801e04 	addi	r6,sp,120
  803974:	b80b883a 	mov	r5,r23
  803978:	080891c0 	call	80891c <__sprint_r>
  80397c:	1039ed1e 	bne	r2,zero,802134 <__alt_mem_onchip_mem+0xff7fa134>
  803980:	d8802617 	ldw	r2,152(sp)
  803984:	d8c02017 	ldw	r3,128(sp)
  803988:	da000404 	addi	r8,sp,16
  80398c:	003e1006 	br	8031d0 <__alt_mem_onchip_mem+0xff7fb1d0>
  803990:	00800044 	movi	r2,1
  803994:	10803fcc 	andi	r2,r2,255
  803998:	00c00044 	movi	r3,1
  80399c:	10fa3526 	beq	r2,r3,802274 <__alt_mem_onchip_mem+0xff7fa274>
  8039a0:	00c00084 	movi	r3,2
  8039a4:	10fbcb26 	beq	r2,r3,8028d4 <__alt_mem_onchip_mem+0xff7fa8d4>
  8039a8:	003a8f06 	br	8023e8 <__alt_mem_onchip_mem+0xff7fa3e8>
  8039ac:	01002074 	movhi	r4,129
  8039b0:	2106be84 	addi	r4,r4,6906
  8039b4:	d9003515 	stw	r4,212(sp)
  8039b8:	003b7606 	br	802794 <__alt_mem_onchip_mem+0xff7fa794>
  8039bc:	d8802917 	ldw	r2,164(sp)
  8039c0:	00c00184 	movi	r3,6
  8039c4:	1880012e 	bgeu	r3,r2,8039cc <___vfprintf_internal_r+0x1ca0>
  8039c8:	1805883a 	mov	r2,r3
  8039cc:	d8802e15 	stw	r2,184(sp)
  8039d0:	1000ef16 	blt	r2,zero,803d90 <___vfprintf_internal_r+0x2064>
  8039d4:	04002074 	movhi	r16,129
  8039d8:	d8802a15 	stw	r2,168(sp)
  8039dc:	dcc02d15 	stw	r19,180(sp)
  8039e0:	d8002915 	stw	zero,164(sp)
  8039e4:	d8003215 	stw	zero,200(sp)
  8039e8:	8406b804 	addi	r16,r16,6880
  8039ec:	0039883a 	mov	fp,zero
  8039f0:	003aa206 	br	80247c <__alt_mem_onchip_mem+0xff7fa47c>
  8039f4:	0021883a 	mov	r16,zero
  8039f8:	003e0706 	br	803218 <__alt_mem_onchip_mem+0xff7fb218>
  8039fc:	d9002c17 	ldw	r4,176(sp)
  803a00:	d9801e04 	addi	r6,sp,120
  803a04:	b80b883a 	mov	r5,r23
  803a08:	080891c0 	call	80891c <__sprint_r>
  803a0c:	1039c91e 	bne	r2,zero,802134 <__alt_mem_onchip_mem+0xff7fa134>
  803a10:	d8802617 	ldw	r2,152(sp)
  803a14:	d9403317 	ldw	r5,204(sp)
  803a18:	d8c02017 	ldw	r3,128(sp)
  803a1c:	da000404 	addi	r8,sp,16
  803a20:	2885c83a 	sub	r2,r5,r2
  803a24:	003dfb06 	br	803214 <__alt_mem_onchip_mem+0xff7fb214>
  803a28:	9080004c 	andi	r2,r18,1
  803a2c:	103e8f1e 	bne	r2,zero,80346c <__alt_mem_onchip_mem+0xff7fb46c>
  803a30:	d8802117 	ldw	r2,132(sp)
  803a34:	003e9e06 	br	8034b0 <__alt_mem_onchip_mem+0xff7fb4b0>
  803a38:	1025883a 	mov	r18,r2
  803a3c:	0039883a 	mov	fp,zero
  803a40:	00800084 	movi	r2,2
  803a44:	003fd306 	br	803994 <__alt_mem_onchip_mem+0xff7fb994>
  803a48:	07000b44 	movi	fp,45
  803a4c:	df002785 	stb	fp,158(sp)
  803a50:	003a4006 	br	802354 <__alt_mem_onchip_mem+0xff7fa354>
  803a54:	00c00b44 	movi	r3,45
  803a58:	d8c02785 	stb	r3,158(sp)
  803a5c:	d8802a15 	stw	r2,168(sp)
  803a60:	dc802b17 	ldw	r18,172(sp)
  803a64:	d8002915 	stw	zero,164(sp)
  803a68:	07000b44 	movi	fp,45
  803a6c:	003a8006 	br	802470 <__alt_mem_onchip_mem+0xff7fa470>
  803a70:	04002074 	movhi	r16,129
  803a74:	8406ad04 	addi	r16,r16,6836
  803a78:	003f4706 	br	803798 <__alt_mem_onchip_mem+0xff7fb798>
  803a7c:	d8c02d17 	ldw	r3,180(sp)
  803a80:	d9002f17 	ldw	r4,188(sp)
  803a84:	18800017 	ldw	r2,0(r3)
  803a88:	18c00104 	addi	r3,r3,4
  803a8c:	d8c02d15 	stw	r3,180(sp)
  803a90:	11000015 	stw	r4,0(r2)
  803a94:	0038dd06 	br	801e0c <__alt_mem_onchip_mem+0xff7f9e0c>
  803a98:	dd802617 	ldw	r22,152(sp)
  803a9c:	00bfff44 	movi	r2,-3
  803aa0:	b0801c16 	blt	r22,r2,803b14 <___vfprintf_internal_r+0x1de8>
  803aa4:	d9402917 	ldw	r5,164(sp)
  803aa8:	2d801a16 	blt	r5,r22,803b14 <___vfprintf_internal_r+0x1de8>
  803aac:	dd803215 	stw	r22,200(sp)
  803ab0:	003e8906 	br	8034d8 <__alt_mem_onchip_mem+0xff7fb4d8>
  803ab4:	01002074 	movhi	r4,129
  803ab8:	2106ba84 	addi	r4,r4,6890
  803abc:	d9002b15 	stw	r4,172(sp)
  803ac0:	003c9106 	br	802d08 <__alt_mem_onchip_mem+0xff7fad08>
  803ac4:	e005883a 	mov	r2,fp
  803ac8:	003e7906 	br	8034b0 <__alt_mem_onchip_mem+0xff7fb4b0>
  803acc:	d9402917 	ldw	r5,164(sp)
  803ad0:	df002783 	ldbu	fp,158(sp)
  803ad4:	dcc02d15 	stw	r19,180(sp)
  803ad8:	d9402a15 	stw	r5,168(sp)
  803adc:	d9402e15 	stw	r5,184(sp)
  803ae0:	d8002915 	stw	zero,164(sp)
  803ae4:	d8003215 	stw	zero,200(sp)
  803ae8:	003a5d06 	br	802460 <__alt_mem_onchip_mem+0xff7fa460>
  803aec:	9080004c 	andi	r2,r18,1
  803af0:	0039883a 	mov	fp,zero
  803af4:	10000426 	beq	r2,zero,803b08 <___vfprintf_internal_r+0x1ddc>
  803af8:	00800c04 	movi	r2,48
  803afc:	dc001dc4 	addi	r16,sp,119
  803b00:	d8801dc5 	stb	r2,119(sp)
  803b04:	003b8006 	br	802908 <__alt_mem_onchip_mem+0xff7fa908>
  803b08:	d8002e15 	stw	zero,184(sp)
  803b0c:	dc001e04 	addi	r16,sp,120
  803b10:	003a4d06 	br	802448 <__alt_mem_onchip_mem+0xff7fa448>
  803b14:	8c7fff84 	addi	r17,r17,-2
  803b18:	b5bfffc4 	addi	r22,r22,-1
  803b1c:	dd802615 	stw	r22,152(sp)
  803b20:	dc4022c5 	stb	r17,139(sp)
  803b24:	b000bf16 	blt	r22,zero,803e24 <___vfprintf_internal_r+0x20f8>
  803b28:	00800ac4 	movi	r2,43
  803b2c:	d8802305 	stb	r2,140(sp)
  803b30:	00800244 	movi	r2,9
  803b34:	15807016 	blt	r2,r22,803cf8 <___vfprintf_internal_r+0x1fcc>
  803b38:	00800c04 	movi	r2,48
  803b3c:	b5800c04 	addi	r22,r22,48
  803b40:	d8802345 	stb	r2,141(sp)
  803b44:	dd802385 	stb	r22,142(sp)
  803b48:	d88023c4 	addi	r2,sp,143
  803b4c:	df0022c4 	addi	fp,sp,139
  803b50:	d8c03317 	ldw	r3,204(sp)
  803b54:	1739c83a 	sub	fp,r2,fp
  803b58:	d9003317 	ldw	r4,204(sp)
  803b5c:	e0c7883a 	add	r3,fp,r3
  803b60:	df003a15 	stw	fp,232(sp)
  803b64:	d8c02e15 	stw	r3,184(sp)
  803b68:	00800044 	movi	r2,1
  803b6c:	1100b30e 	bge	r2,r4,803e3c <___vfprintf_internal_r+0x2110>
  803b70:	d8c02e17 	ldw	r3,184(sp)
  803b74:	18c00044 	addi	r3,r3,1
  803b78:	d8c02e15 	stw	r3,184(sp)
  803b7c:	1805883a 	mov	r2,r3
  803b80:	1800ac16 	blt	r3,zero,803e34 <___vfprintf_internal_r+0x2108>
  803b84:	d8003215 	stw	zero,200(sp)
  803b88:	003e5d06 	br	803500 <__alt_mem_onchip_mem+0xff7fb500>
  803b8c:	d9002c17 	ldw	r4,176(sp)
  803b90:	d9801e04 	addi	r6,sp,120
  803b94:	b80b883a 	mov	r5,r23
  803b98:	080891c0 	call	80891c <__sprint_r>
  803b9c:	1039651e 	bne	r2,zero,802134 <__alt_mem_onchip_mem+0xff7fa134>
  803ba0:	dc402617 	ldw	r17,152(sp)
  803ba4:	d8c02017 	ldw	r3,128(sp)
  803ba8:	d8801f17 	ldw	r2,124(sp)
  803bac:	da000404 	addi	r8,sp,16
  803bb0:	003ed606 	br	80370c <__alt_mem_onchip_mem+0xff7fb70c>
  803bb4:	582b883a 	mov	r21,r11
  803bb8:	d8002915 	stw	zero,164(sp)
  803bbc:	0038bd06 	br	801eb4 <__alt_mem_onchip_mem+0xff7f9eb4>
  803bc0:	d8802917 	ldw	r2,164(sp)
  803bc4:	103e071e 	bne	r2,zero,8033e4 <__alt_mem_onchip_mem+0xff7fb3e4>
  803bc8:	dc002915 	stw	r16,164(sp)
  803bcc:	003e0506 	br	8033e4 <__alt_mem_onchip_mem+0xff7fb3e4>
  803bd0:	d9002917 	ldw	r4,164(sp)
  803bd4:	20c00044 	addi	r3,r4,1
  803bd8:	003e0f06 	br	803418 <__alt_mem_onchip_mem+0xff7fb418>
  803bdc:	01400184 	movi	r5,6
  803be0:	d9402915 	stw	r5,164(sp)
  803be4:	003dff06 	br	8033e4 <__alt_mem_onchip_mem+0xff7fb3e4>
  803be8:	d8802104 	addi	r2,sp,132
  803bec:	d8800315 	stw	r2,12(sp)
  803bf0:	d8802504 	addi	r2,sp,148
  803bf4:	d8800215 	stw	r2,8(sp)
  803bf8:	d8802604 	addi	r2,sp,152
  803bfc:	d8800115 	stw	r2,4(sp)
  803c00:	d8802917 	ldw	r2,164(sp)
  803c04:	d9403617 	ldw	r5,216(sp)
  803c08:	d9002c17 	ldw	r4,176(sp)
  803c0c:	d8800015 	stw	r2,0(sp)
  803c10:	01c000c4 	movi	r7,3
  803c14:	980d883a 	mov	r6,r19
  803c18:	da003d15 	stw	r8,244(sp)
  803c1c:	08044040 	call	804404 <_dtoa_r>
  803c20:	d8c02917 	ldw	r3,164(sp)
  803c24:	da003d17 	ldw	r8,244(sp)
  803c28:	1021883a 	mov	r16,r2
  803c2c:	10f9883a 	add	fp,r2,r3
  803c30:	81000007 	ldb	r4,0(r16)
  803c34:	00800c04 	movi	r2,48
  803c38:	20805e26 	beq	r4,r2,803db4 <___vfprintf_internal_r+0x2088>
  803c3c:	d8c02617 	ldw	r3,152(sp)
  803c40:	e0f9883a 	add	fp,fp,r3
  803c44:	003e0a06 	br	803470 <__alt_mem_onchip_mem+0xff7fb470>
  803c48:	00c00b44 	movi	r3,45
  803c4c:	24e0003c 	xorhi	r19,r4,32768
  803c50:	d8c02a05 	stb	r3,168(sp)
  803c54:	003de906 	br	8033fc <__alt_mem_onchip_mem+0xff7fb3fc>
  803c58:	d8c03217 	ldw	r3,200(sp)
  803c5c:	00c07a0e 	bge	zero,r3,803e48 <___vfprintf_internal_r+0x211c>
  803c60:	00800044 	movi	r2,1
  803c64:	d9003317 	ldw	r4,204(sp)
  803c68:	1105883a 	add	r2,r2,r4
  803c6c:	d8802e15 	stw	r2,184(sp)
  803c70:	10004e16 	blt	r2,zero,803dac <___vfprintf_internal_r+0x2080>
  803c74:	044019c4 	movi	r17,103
  803c78:	003e2106 	br	803500 <__alt_mem_onchip_mem+0xff7fb500>
  803c7c:	d9002917 	ldw	r4,164(sp)
  803c80:	d8802104 	addi	r2,sp,132
  803c84:	d8800315 	stw	r2,12(sp)
  803c88:	d9000015 	stw	r4,0(sp)
  803c8c:	d8802504 	addi	r2,sp,148
  803c90:	d9403617 	ldw	r5,216(sp)
  803c94:	d9002c17 	ldw	r4,176(sp)
  803c98:	d8800215 	stw	r2,8(sp)
  803c9c:	d8802604 	addi	r2,sp,152
  803ca0:	d8800115 	stw	r2,4(sp)
  803ca4:	01c000c4 	movi	r7,3
  803ca8:	980d883a 	mov	r6,r19
  803cac:	da003d15 	stw	r8,244(sp)
  803cb0:	08044040 	call	804404 <_dtoa_r>
  803cb4:	d8c02917 	ldw	r3,164(sp)
  803cb8:	da003d17 	ldw	r8,244(sp)
  803cbc:	1021883a 	mov	r16,r2
  803cc0:	00801184 	movi	r2,70
  803cc4:	80f9883a 	add	fp,r16,r3
  803cc8:	88bfd926 	beq	r17,r2,803c30 <__alt_mem_onchip_mem+0xff7fbc30>
  803ccc:	003de806 	br	803470 <__alt_mem_onchip_mem+0xff7fb470>
  803cd0:	d9002917 	ldw	r4,164(sp)
  803cd4:	00c04d0e 	bge	zero,r3,803e0c <___vfprintf_internal_r+0x20e0>
  803cd8:	2000441e 	bne	r4,zero,803dec <___vfprintf_internal_r+0x20c0>
  803cdc:	9480004c 	andi	r18,r18,1
  803ce0:	9000421e 	bne	r18,zero,803dec <___vfprintf_internal_r+0x20c0>
  803ce4:	1805883a 	mov	r2,r3
  803ce8:	18007016 	blt	r3,zero,803eac <___vfprintf_internal_r+0x2180>
  803cec:	d8c03217 	ldw	r3,200(sp)
  803cf0:	d8c02e15 	stw	r3,184(sp)
  803cf4:	003e0206 	br	803500 <__alt_mem_onchip_mem+0xff7fb500>
  803cf8:	df0022c4 	addi	fp,sp,139
  803cfc:	dc002915 	stw	r16,164(sp)
  803d00:	4027883a 	mov	r19,r8
  803d04:	e021883a 	mov	r16,fp
  803d08:	b009883a 	mov	r4,r22
  803d0c:	01400284 	movi	r5,10
  803d10:	080b0ac0 	call	80b0ac <__modsi3>
  803d14:	10800c04 	addi	r2,r2,48
  803d18:	843fffc4 	addi	r16,r16,-1
  803d1c:	b009883a 	mov	r4,r22
  803d20:	01400284 	movi	r5,10
  803d24:	80800005 	stb	r2,0(r16)
  803d28:	080b0280 	call	80b028 <__divsi3>
  803d2c:	102d883a 	mov	r22,r2
  803d30:	00800244 	movi	r2,9
  803d34:	15bff416 	blt	r2,r22,803d08 <__alt_mem_onchip_mem+0xff7fbd08>
  803d38:	9811883a 	mov	r8,r19
  803d3c:	b0800c04 	addi	r2,r22,48
  803d40:	8027883a 	mov	r19,r16
  803d44:	997fffc4 	addi	r5,r19,-1
  803d48:	98bfffc5 	stb	r2,-1(r19)
  803d4c:	dc002917 	ldw	r16,164(sp)
  803d50:	2f006a2e 	bgeu	r5,fp,803efc <___vfprintf_internal_r+0x21d0>
  803d54:	d9c02384 	addi	r7,sp,142
  803d58:	3ccfc83a 	sub	r7,r7,r19
  803d5c:	d9002344 	addi	r4,sp,141
  803d60:	e1cf883a 	add	r7,fp,r7
  803d64:	00000106 	br	803d6c <___vfprintf_internal_r+0x2040>
  803d68:	28800003 	ldbu	r2,0(r5)
  803d6c:	20800005 	stb	r2,0(r4)
  803d70:	21000044 	addi	r4,r4,1
  803d74:	29400044 	addi	r5,r5,1
  803d78:	393ffb1e 	bne	r7,r4,803d68 <__alt_mem_onchip_mem+0xff7fbd68>
  803d7c:	d8802304 	addi	r2,sp,140
  803d80:	14c5c83a 	sub	r2,r2,r19
  803d84:	d8c02344 	addi	r3,sp,141
  803d88:	1885883a 	add	r2,r3,r2
  803d8c:	003f7006 	br	803b50 <__alt_mem_onchip_mem+0xff7fbb50>
  803d90:	0005883a 	mov	r2,zero
  803d94:	003f0f06 	br	8039d4 <__alt_mem_onchip_mem+0xff7fb9d4>
  803d98:	d8c03217 	ldw	r3,200(sp)
  803d9c:	18c00044 	addi	r3,r3,1
  803da0:	d8c02e15 	stw	r3,184(sp)
  803da4:	1805883a 	mov	r2,r3
  803da8:	183fb20e 	bge	r3,zero,803c74 <__alt_mem_onchip_mem+0xff7fbc74>
  803dac:	0005883a 	mov	r2,zero
  803db0:	003fb006 	br	803c74 <__alt_mem_onchip_mem+0xff7fbc74>
  803db4:	d9003617 	ldw	r4,216(sp)
  803db8:	000d883a 	mov	r6,zero
  803dbc:	000f883a 	mov	r7,zero
  803dc0:	980b883a 	mov	r5,r19
  803dc4:	d8c03c15 	stw	r3,240(sp)
  803dc8:	da003d15 	stw	r8,244(sp)
  803dcc:	080c3700 	call	80c370 <__eqdf2>
  803dd0:	d8c03c17 	ldw	r3,240(sp)
  803dd4:	da003d17 	ldw	r8,244(sp)
  803dd8:	103f9826 	beq	r2,zero,803c3c <__alt_mem_onchip_mem+0xff7fbc3c>
  803ddc:	00800044 	movi	r2,1
  803de0:	10c7c83a 	sub	r3,r2,r3
  803de4:	d8c02615 	stw	r3,152(sp)
  803de8:	003f9506 	br	803c40 <__alt_mem_onchip_mem+0xff7fbc40>
  803dec:	d9002917 	ldw	r4,164(sp)
  803df0:	d8c03217 	ldw	r3,200(sp)
  803df4:	20800044 	addi	r2,r4,1
  803df8:	1885883a 	add	r2,r3,r2
  803dfc:	d8802e15 	stw	r2,184(sp)
  803e00:	103dbf0e 	bge	r2,zero,803500 <__alt_mem_onchip_mem+0xff7fb500>
  803e04:	0005883a 	mov	r2,zero
  803e08:	003dbd06 	br	803500 <__alt_mem_onchip_mem+0xff7fb500>
  803e0c:	2000211e 	bne	r4,zero,803e94 <___vfprintf_internal_r+0x2168>
  803e10:	9480004c 	andi	r18,r18,1
  803e14:	90001f1e 	bne	r18,zero,803e94 <___vfprintf_internal_r+0x2168>
  803e18:	00800044 	movi	r2,1
  803e1c:	d8802e15 	stw	r2,184(sp)
  803e20:	003db706 	br	803500 <__alt_mem_onchip_mem+0xff7fb500>
  803e24:	00800b44 	movi	r2,45
  803e28:	05adc83a 	sub	r22,zero,r22
  803e2c:	d8802305 	stb	r2,140(sp)
  803e30:	003f3f06 	br	803b30 <__alt_mem_onchip_mem+0xff7fbb30>
  803e34:	0005883a 	mov	r2,zero
  803e38:	003f5206 	br	803b84 <__alt_mem_onchip_mem+0xff7fbb84>
  803e3c:	90a4703a 	and	r18,r18,r2
  803e40:	903f4e26 	beq	r18,zero,803b7c <__alt_mem_onchip_mem+0xff7fbb7c>
  803e44:	003f4a06 	br	803b70 <__alt_mem_onchip_mem+0xff7fbb70>
  803e48:	00800084 	movi	r2,2
  803e4c:	10c5c83a 	sub	r2,r2,r3
  803e50:	003f8406 	br	803c64 <__alt_mem_onchip_mem+0xff7fbc64>
  803e54:	d8802d17 	ldw	r2,180(sp)
  803e58:	d9002d17 	ldw	r4,180(sp)
  803e5c:	ac400043 	ldbu	r17,1(r21)
  803e60:	10800017 	ldw	r2,0(r2)
  803e64:	582b883a 	mov	r21,r11
  803e68:	d8802915 	stw	r2,164(sp)
  803e6c:	20800104 	addi	r2,r4,4
  803e70:	d9002917 	ldw	r4,164(sp)
  803e74:	d8802d15 	stw	r2,180(sp)
  803e78:	203e7a0e 	bge	r4,zero,803864 <__alt_mem_onchip_mem+0xff7fb864>
  803e7c:	8c403fcc 	andi	r17,r17,255
  803e80:	00bfffc4 	movi	r2,-1
  803e84:	8c40201c 	xori	r17,r17,128
  803e88:	d8802915 	stw	r2,164(sp)
  803e8c:	8c7fe004 	addi	r17,r17,-128
  803e90:	00380706 	br	801eb0 <__alt_mem_onchip_mem+0xff7f9eb0>
  803e94:	d8c02917 	ldw	r3,164(sp)
  803e98:	18c00084 	addi	r3,r3,2
  803e9c:	d8c02e15 	stw	r3,184(sp)
  803ea0:	1805883a 	mov	r2,r3
  803ea4:	183d960e 	bge	r3,zero,803500 <__alt_mem_onchip_mem+0xff7fb500>
  803ea8:	003fd606 	br	803e04 <__alt_mem_onchip_mem+0xff7fbe04>
  803eac:	0005883a 	mov	r2,zero
  803eb0:	003f8e06 	br	803cec <__alt_mem_onchip_mem+0xff7fbcec>
  803eb4:	9080004c 	andi	r2,r18,1
  803eb8:	103f811e 	bne	r2,zero,803cc0 <__alt_mem_onchip_mem+0xff7fbcc0>
  803ebc:	d8802117 	ldw	r2,132(sp)
  803ec0:	1405c83a 	sub	r2,r2,r16
  803ec4:	d8803315 	stw	r2,204(sp)
  803ec8:	b47ef326 	beq	r22,r17,803a98 <__alt_mem_onchip_mem+0xff7fba98>
  803ecc:	dd802617 	ldw	r22,152(sp)
  803ed0:	003f1106 	br	803b18 <__alt_mem_onchip_mem+0xff7fbb18>
  803ed4:	d9c02785 	stb	r7,158(sp)
  803ed8:	00390406 	br	8022ec <__alt_mem_onchip_mem+0xff7fa2ec>
  803edc:	d9c02785 	stb	r7,158(sp)
  803ee0:	0038d306 	br	802230 <__alt_mem_onchip_mem+0xff7fa230>
  803ee4:	d9c02785 	stb	r7,158(sp)
  803ee8:	003a6106 	br	802870 <__alt_mem_onchip_mem+0xff7fa870>
  803eec:	d9c02785 	stb	r7,158(sp)
  803ef0:	003af806 	br	802ad4 <__alt_mem_onchip_mem+0xff7faad4>
  803ef4:	0005883a 	mov	r2,zero
  803ef8:	003d7e06 	br	8034f4 <__alt_mem_onchip_mem+0xff7fb4f4>
  803efc:	d8802344 	addi	r2,sp,141
  803f00:	003f1306 	br	803b50 <__alt_mem_onchip_mem+0xff7fbb50>
  803f04:	d9c02785 	stb	r7,158(sp)
  803f08:	00392306 	br	802398 <__alt_mem_onchip_mem+0xff7fa398>
  803f0c:	d9c02785 	stb	r7,158(sp)
  803f10:	003aa906 	br	8029b8 <__alt_mem_onchip_mem+0xff7fa9b8>
  803f14:	d9c02785 	stb	r7,158(sp)
  803f18:	003a3d06 	br	802810 <__alt_mem_onchip_mem+0xff7fa810>
  803f1c:	d9c02785 	stb	r7,158(sp)
  803f20:	003aca06 	br	802a4c <__alt_mem_onchip_mem+0xff7faa4c>

00803f24 <__vfprintf_internal>:
  803f24:	00802074 	movhi	r2,129
  803f28:	108f4904 	addi	r2,r2,15652
  803f2c:	300f883a 	mov	r7,r6
  803f30:	280d883a 	mov	r6,r5
  803f34:	200b883a 	mov	r5,r4
  803f38:	11000017 	ldw	r4,0(r2)
  803f3c:	0801d2c1 	jmpi	801d2c <___vfprintf_internal_r>

00803f40 <__sbprintf>:
  803f40:	2880030b 	ldhu	r2,12(r5)
  803f44:	2ac01917 	ldw	r11,100(r5)
  803f48:	2a80038b 	ldhu	r10,14(r5)
  803f4c:	2a400717 	ldw	r9,28(r5)
  803f50:	2a000917 	ldw	r8,36(r5)
  803f54:	defee204 	addi	sp,sp,-1144
  803f58:	00c10004 	movi	r3,1024
  803f5c:	dc011a15 	stw	r16,1128(sp)
  803f60:	10bfff4c 	andi	r2,r2,65533
  803f64:	2821883a 	mov	r16,r5
  803f68:	d8cb883a 	add	r5,sp,r3
  803f6c:	dc811c15 	stw	r18,1136(sp)
  803f70:	dc411b15 	stw	r17,1132(sp)
  803f74:	dfc11d15 	stw	ra,1140(sp)
  803f78:	2025883a 	mov	r18,r4
  803f7c:	d881030d 	sth	r2,1036(sp)
  803f80:	dac11915 	stw	r11,1124(sp)
  803f84:	da81038d 	sth	r10,1038(sp)
  803f88:	da410715 	stw	r9,1052(sp)
  803f8c:	da010915 	stw	r8,1060(sp)
  803f90:	dec10015 	stw	sp,1024(sp)
  803f94:	dec10415 	stw	sp,1040(sp)
  803f98:	d8c10215 	stw	r3,1032(sp)
  803f9c:	d8c10515 	stw	r3,1044(sp)
  803fa0:	d8010615 	stw	zero,1048(sp)
  803fa4:	0801d2c0 	call	801d2c <___vfprintf_internal_r>
  803fa8:	1023883a 	mov	r17,r2
  803fac:	10000416 	blt	r2,zero,803fc0 <__sbprintf+0x80>
  803fb0:	d9410004 	addi	r5,sp,1024
  803fb4:	9009883a 	mov	r4,r18
  803fb8:	0805ca80 	call	805ca8 <_fflush_r>
  803fbc:	10000d1e 	bne	r2,zero,803ff4 <__sbprintf+0xb4>
  803fc0:	d881030b 	ldhu	r2,1036(sp)
  803fc4:	1080100c 	andi	r2,r2,64
  803fc8:	10000326 	beq	r2,zero,803fd8 <__sbprintf+0x98>
  803fcc:	8080030b 	ldhu	r2,12(r16)
  803fd0:	10801014 	ori	r2,r2,64
  803fd4:	8080030d 	sth	r2,12(r16)
  803fd8:	8805883a 	mov	r2,r17
  803fdc:	dfc11d17 	ldw	ra,1140(sp)
  803fe0:	dc811c17 	ldw	r18,1136(sp)
  803fe4:	dc411b17 	ldw	r17,1132(sp)
  803fe8:	dc011a17 	ldw	r16,1128(sp)
  803fec:	dec11e04 	addi	sp,sp,1144
  803ff0:	f800283a 	ret
  803ff4:	047fffc4 	movi	r17,-1
  803ff8:	003ff106 	br	803fc0 <__alt_mem_onchip_mem+0xff7fbfc0>

00803ffc <_write_r>:
  803ffc:	defffd04 	addi	sp,sp,-12
  804000:	2805883a 	mov	r2,r5
  804004:	dc000015 	stw	r16,0(sp)
  804008:	04002074 	movhi	r16,129
  80400c:	dc400115 	stw	r17,4(sp)
  804010:	300b883a 	mov	r5,r6
  804014:	8416a104 	addi	r16,r16,23172
  804018:	2023883a 	mov	r17,r4
  80401c:	380d883a 	mov	r6,r7
  804020:	1009883a 	mov	r4,r2
  804024:	dfc00215 	stw	ra,8(sp)
  804028:	80000015 	stw	zero,0(r16)
  80402c:	080e2e40 	call	80e2e4 <write>
  804030:	00ffffc4 	movi	r3,-1
  804034:	10c00526 	beq	r2,r3,80404c <_write_r+0x50>
  804038:	dfc00217 	ldw	ra,8(sp)
  80403c:	dc400117 	ldw	r17,4(sp)
  804040:	dc000017 	ldw	r16,0(sp)
  804044:	dec00304 	addi	sp,sp,12
  804048:	f800283a 	ret
  80404c:	80c00017 	ldw	r3,0(r16)
  804050:	183ff926 	beq	r3,zero,804038 <__alt_mem_onchip_mem+0xff7fc038>
  804054:	88c00015 	stw	r3,0(r17)
  804058:	003ff706 	br	804038 <__alt_mem_onchip_mem+0xff7fc038>

0080405c <__swsetup_r>:
  80405c:	00802074 	movhi	r2,129
  804060:	defffd04 	addi	sp,sp,-12
  804064:	108f4904 	addi	r2,r2,15652
  804068:	dc400115 	stw	r17,4(sp)
  80406c:	2023883a 	mov	r17,r4
  804070:	11000017 	ldw	r4,0(r2)
  804074:	dc000015 	stw	r16,0(sp)
  804078:	dfc00215 	stw	ra,8(sp)
  80407c:	2821883a 	mov	r16,r5
  804080:	20000226 	beq	r4,zero,80408c <__swsetup_r+0x30>
  804084:	20800e17 	ldw	r2,56(r4)
  804088:	10003126 	beq	r2,zero,804150 <__swsetup_r+0xf4>
  80408c:	8080030b 	ldhu	r2,12(r16)
  804090:	10c0020c 	andi	r3,r2,8
  804094:	1009883a 	mov	r4,r2
  804098:	18000f26 	beq	r3,zero,8040d8 <__swsetup_r+0x7c>
  80409c:	80c00417 	ldw	r3,16(r16)
  8040a0:	18001526 	beq	r3,zero,8040f8 <__swsetup_r+0x9c>
  8040a4:	1100004c 	andi	r4,r2,1
  8040a8:	20001c1e 	bne	r4,zero,80411c <__swsetup_r+0xc0>
  8040ac:	1080008c 	andi	r2,r2,2
  8040b0:	1000291e 	bne	r2,zero,804158 <__swsetup_r+0xfc>
  8040b4:	80800517 	ldw	r2,20(r16)
  8040b8:	80800215 	stw	r2,8(r16)
  8040bc:	18001c26 	beq	r3,zero,804130 <__swsetup_r+0xd4>
  8040c0:	0005883a 	mov	r2,zero
  8040c4:	dfc00217 	ldw	ra,8(sp)
  8040c8:	dc400117 	ldw	r17,4(sp)
  8040cc:	dc000017 	ldw	r16,0(sp)
  8040d0:	dec00304 	addi	sp,sp,12
  8040d4:	f800283a 	ret
  8040d8:	2080040c 	andi	r2,r4,16
  8040dc:	10002e26 	beq	r2,zero,804198 <__swsetup_r+0x13c>
  8040e0:	2080010c 	andi	r2,r4,4
  8040e4:	10001e1e 	bne	r2,zero,804160 <__swsetup_r+0x104>
  8040e8:	80c00417 	ldw	r3,16(r16)
  8040ec:	20800214 	ori	r2,r4,8
  8040f0:	8080030d 	sth	r2,12(r16)
  8040f4:	183feb1e 	bne	r3,zero,8040a4 <__alt_mem_onchip_mem+0xff7fc0a4>
  8040f8:	1100a00c 	andi	r4,r2,640
  8040fc:	01408004 	movi	r5,512
  804100:	217fe826 	beq	r4,r5,8040a4 <__alt_mem_onchip_mem+0xff7fc0a4>
  804104:	800b883a 	mov	r5,r16
  804108:	8809883a 	mov	r4,r17
  80410c:	0800cf00 	call	800cf0 <__smakebuf_r>
  804110:	8080030b 	ldhu	r2,12(r16)
  804114:	80c00417 	ldw	r3,16(r16)
  804118:	003fe206 	br	8040a4 <__alt_mem_onchip_mem+0xff7fc0a4>
  80411c:	80800517 	ldw	r2,20(r16)
  804120:	80000215 	stw	zero,8(r16)
  804124:	0085c83a 	sub	r2,zero,r2
  804128:	80800615 	stw	r2,24(r16)
  80412c:	183fe41e 	bne	r3,zero,8040c0 <__alt_mem_onchip_mem+0xff7fc0c0>
  804130:	80c0030b 	ldhu	r3,12(r16)
  804134:	0005883a 	mov	r2,zero
  804138:	1900200c 	andi	r4,r3,128
  80413c:	203fe126 	beq	r4,zero,8040c4 <__alt_mem_onchip_mem+0xff7fc0c4>
  804140:	18c01014 	ori	r3,r3,64
  804144:	80c0030d 	sth	r3,12(r16)
  804148:	00bfffc4 	movi	r2,-1
  80414c:	003fdd06 	br	8040c4 <__alt_mem_onchip_mem+0xff7fc0c4>
  804150:	08060840 	call	806084 <__sinit>
  804154:	003fcd06 	br	80408c <__alt_mem_onchip_mem+0xff7fc08c>
  804158:	0005883a 	mov	r2,zero
  80415c:	003fd606 	br	8040b8 <__alt_mem_onchip_mem+0xff7fc0b8>
  804160:	81400c17 	ldw	r5,48(r16)
  804164:	28000626 	beq	r5,zero,804180 <__swsetup_r+0x124>
  804168:	80801004 	addi	r2,r16,64
  80416c:	28800326 	beq	r5,r2,80417c <__swsetup_r+0x120>
  804170:	8809883a 	mov	r4,r17
  804174:	08062a40 	call	8062a4 <_free_r>
  804178:	8100030b 	ldhu	r4,12(r16)
  80417c:	80000c15 	stw	zero,48(r16)
  804180:	80c00417 	ldw	r3,16(r16)
  804184:	00bff6c4 	movi	r2,-37
  804188:	1108703a 	and	r4,r2,r4
  80418c:	80000115 	stw	zero,4(r16)
  804190:	80c00015 	stw	r3,0(r16)
  804194:	003fd506 	br	8040ec <__alt_mem_onchip_mem+0xff7fc0ec>
  804198:	00800244 	movi	r2,9
  80419c:	88800015 	stw	r2,0(r17)
  8041a0:	20801014 	ori	r2,r4,64
  8041a4:	8080030d 	sth	r2,12(r16)
  8041a8:	00bfffc4 	movi	r2,-1
  8041ac:	003fc506 	br	8040c4 <__alt_mem_onchip_mem+0xff7fc0c4>

008041b0 <_close_r>:
  8041b0:	defffd04 	addi	sp,sp,-12
  8041b4:	dc000015 	stw	r16,0(sp)
  8041b8:	04002074 	movhi	r16,129
  8041bc:	dc400115 	stw	r17,4(sp)
  8041c0:	8416a104 	addi	r16,r16,23172
  8041c4:	2023883a 	mov	r17,r4
  8041c8:	2809883a 	mov	r4,r5
  8041cc:	dfc00215 	stw	ra,8(sp)
  8041d0:	80000015 	stw	zero,0(r16)
  8041d4:	080d8800 	call	80d880 <close>
  8041d8:	00ffffc4 	movi	r3,-1
  8041dc:	10c00526 	beq	r2,r3,8041f4 <_close_r+0x44>
  8041e0:	dfc00217 	ldw	ra,8(sp)
  8041e4:	dc400117 	ldw	r17,4(sp)
  8041e8:	dc000017 	ldw	r16,0(sp)
  8041ec:	dec00304 	addi	sp,sp,12
  8041f0:	f800283a 	ret
  8041f4:	80c00017 	ldw	r3,0(r16)
  8041f8:	183ff926 	beq	r3,zero,8041e0 <__alt_mem_onchip_mem+0xff7fc1e0>
  8041fc:	88c00015 	stw	r3,0(r17)
  804200:	003ff706 	br	8041e0 <__alt_mem_onchip_mem+0xff7fc1e0>

00804204 <quorem>:
  804204:	defff704 	addi	sp,sp,-36
  804208:	dc800215 	stw	r18,8(sp)
  80420c:	20800417 	ldw	r2,16(r4)
  804210:	2c800417 	ldw	r18,16(r5)
  804214:	dfc00815 	stw	ra,32(sp)
  804218:	ddc00715 	stw	r23,28(sp)
  80421c:	dd800615 	stw	r22,24(sp)
  804220:	dd400515 	stw	r21,20(sp)
  804224:	dd000415 	stw	r20,16(sp)
  804228:	dcc00315 	stw	r19,12(sp)
  80422c:	dc400115 	stw	r17,4(sp)
  804230:	dc000015 	stw	r16,0(sp)
  804234:	14807116 	blt	r2,r18,8043fc <quorem+0x1f8>
  804238:	94bfffc4 	addi	r18,r18,-1
  80423c:	94ad883a 	add	r22,r18,r18
  804240:	b5ad883a 	add	r22,r22,r22
  804244:	2c400504 	addi	r17,r5,20
  804248:	8da9883a 	add	r20,r17,r22
  80424c:	25400504 	addi	r21,r4,20
  804250:	282f883a 	mov	r23,r5
  804254:	adad883a 	add	r22,r21,r22
  804258:	a1400017 	ldw	r5,0(r20)
  80425c:	2021883a 	mov	r16,r4
  804260:	b1000017 	ldw	r4,0(r22)
  804264:	29400044 	addi	r5,r5,1
  804268:	080b1200 	call	80b120 <__udivsi3>
  80426c:	1027883a 	mov	r19,r2
  804270:	10002c26 	beq	r2,zero,804324 <quorem+0x120>
  804274:	a813883a 	mov	r9,r21
  804278:	880b883a 	mov	r5,r17
  80427c:	0009883a 	mov	r4,zero
  804280:	000d883a 	mov	r6,zero
  804284:	2a000017 	ldw	r8,0(r5)
  804288:	49c00017 	ldw	r7,0(r9)
  80428c:	29400104 	addi	r5,r5,4
  804290:	40bfffcc 	andi	r2,r8,65535
  804294:	14c5383a 	mul	r2,r2,r19
  804298:	4010d43a 	srli	r8,r8,16
  80429c:	38ffffcc 	andi	r3,r7,65535
  8042a0:	1105883a 	add	r2,r2,r4
  8042a4:	1008d43a 	srli	r4,r2,16
  8042a8:	44d1383a 	mul	r8,r8,r19
  8042ac:	198d883a 	add	r6,r3,r6
  8042b0:	10ffffcc 	andi	r3,r2,65535
  8042b4:	30c7c83a 	sub	r3,r6,r3
  8042b8:	380ed43a 	srli	r7,r7,16
  8042bc:	4105883a 	add	r2,r8,r4
  8042c0:	180dd43a 	srai	r6,r3,16
  8042c4:	113fffcc 	andi	r4,r2,65535
  8042c8:	390fc83a 	sub	r7,r7,r4
  8042cc:	398d883a 	add	r6,r7,r6
  8042d0:	300e943a 	slli	r7,r6,16
  8042d4:	18ffffcc 	andi	r3,r3,65535
  8042d8:	1008d43a 	srli	r4,r2,16
  8042dc:	38ceb03a 	or	r7,r7,r3
  8042e0:	49c00015 	stw	r7,0(r9)
  8042e4:	300dd43a 	srai	r6,r6,16
  8042e8:	4a400104 	addi	r9,r9,4
  8042ec:	a17fe52e 	bgeu	r20,r5,804284 <__alt_mem_onchip_mem+0xff7fc284>
  8042f0:	b0800017 	ldw	r2,0(r22)
  8042f4:	10000b1e 	bne	r2,zero,804324 <quorem+0x120>
  8042f8:	b0bfff04 	addi	r2,r22,-4
  8042fc:	a880082e 	bgeu	r21,r2,804320 <quorem+0x11c>
  804300:	b0ffff17 	ldw	r3,-4(r22)
  804304:	18000326 	beq	r3,zero,804314 <quorem+0x110>
  804308:	00000506 	br	804320 <quorem+0x11c>
  80430c:	10c00017 	ldw	r3,0(r2)
  804310:	1800031e 	bne	r3,zero,804320 <quorem+0x11c>
  804314:	10bfff04 	addi	r2,r2,-4
  804318:	94bfffc4 	addi	r18,r18,-1
  80431c:	a8bffb36 	bltu	r21,r2,80430c <__alt_mem_onchip_mem+0xff7fc30c>
  804320:	84800415 	stw	r18,16(r16)
  804324:	b80b883a 	mov	r5,r23
  804328:	8009883a 	mov	r4,r16
  80432c:	08079d80 	call	8079d8 <__mcmp>
  804330:	10002616 	blt	r2,zero,8043cc <quorem+0x1c8>
  804334:	9cc00044 	addi	r19,r19,1
  804338:	a805883a 	mov	r2,r21
  80433c:	000b883a 	mov	r5,zero
  804340:	11000017 	ldw	r4,0(r2)
  804344:	89800017 	ldw	r6,0(r17)
  804348:	10800104 	addi	r2,r2,4
  80434c:	20ffffcc 	andi	r3,r4,65535
  804350:	194b883a 	add	r5,r3,r5
  804354:	30ffffcc 	andi	r3,r6,65535
  804358:	28c7c83a 	sub	r3,r5,r3
  80435c:	300cd43a 	srli	r6,r6,16
  804360:	2008d43a 	srli	r4,r4,16
  804364:	180bd43a 	srai	r5,r3,16
  804368:	18ffffcc 	andi	r3,r3,65535
  80436c:	2189c83a 	sub	r4,r4,r6
  804370:	2149883a 	add	r4,r4,r5
  804374:	200c943a 	slli	r6,r4,16
  804378:	8c400104 	addi	r17,r17,4
  80437c:	200bd43a 	srai	r5,r4,16
  804380:	30c6b03a 	or	r3,r6,r3
  804384:	10ffff15 	stw	r3,-4(r2)
  804388:	a47fed2e 	bgeu	r20,r17,804340 <__alt_mem_onchip_mem+0xff7fc340>
  80438c:	9485883a 	add	r2,r18,r18
  804390:	1085883a 	add	r2,r2,r2
  804394:	a887883a 	add	r3,r21,r2
  804398:	18800017 	ldw	r2,0(r3)
  80439c:	10000b1e 	bne	r2,zero,8043cc <quorem+0x1c8>
  8043a0:	18bfff04 	addi	r2,r3,-4
  8043a4:	a880082e 	bgeu	r21,r2,8043c8 <quorem+0x1c4>
  8043a8:	18ffff17 	ldw	r3,-4(r3)
  8043ac:	18000326 	beq	r3,zero,8043bc <quorem+0x1b8>
  8043b0:	00000506 	br	8043c8 <quorem+0x1c4>
  8043b4:	10c00017 	ldw	r3,0(r2)
  8043b8:	1800031e 	bne	r3,zero,8043c8 <quorem+0x1c4>
  8043bc:	10bfff04 	addi	r2,r2,-4
  8043c0:	94bfffc4 	addi	r18,r18,-1
  8043c4:	a8bffb36 	bltu	r21,r2,8043b4 <__alt_mem_onchip_mem+0xff7fc3b4>
  8043c8:	84800415 	stw	r18,16(r16)
  8043cc:	9805883a 	mov	r2,r19
  8043d0:	dfc00817 	ldw	ra,32(sp)
  8043d4:	ddc00717 	ldw	r23,28(sp)
  8043d8:	dd800617 	ldw	r22,24(sp)
  8043dc:	dd400517 	ldw	r21,20(sp)
  8043e0:	dd000417 	ldw	r20,16(sp)
  8043e4:	dcc00317 	ldw	r19,12(sp)
  8043e8:	dc800217 	ldw	r18,8(sp)
  8043ec:	dc400117 	ldw	r17,4(sp)
  8043f0:	dc000017 	ldw	r16,0(sp)
  8043f4:	dec00904 	addi	sp,sp,36
  8043f8:	f800283a 	ret
  8043fc:	0005883a 	mov	r2,zero
  804400:	003ff306 	br	8043d0 <__alt_mem_onchip_mem+0xff7fc3d0>

00804404 <_dtoa_r>:
  804404:	20801017 	ldw	r2,64(r4)
  804408:	deffde04 	addi	sp,sp,-136
  80440c:	df002015 	stw	fp,128(sp)
  804410:	dcc01b15 	stw	r19,108(sp)
  804414:	dc801a15 	stw	r18,104(sp)
  804418:	dc401915 	stw	r17,100(sp)
  80441c:	dc001815 	stw	r16,96(sp)
  804420:	dfc02115 	stw	ra,132(sp)
  804424:	ddc01f15 	stw	r23,124(sp)
  804428:	dd801e15 	stw	r22,120(sp)
  80442c:	dd401d15 	stw	r21,116(sp)
  804430:	dd001c15 	stw	r20,112(sp)
  804434:	d9c00315 	stw	r7,12(sp)
  804438:	2039883a 	mov	fp,r4
  80443c:	3023883a 	mov	r17,r6
  804440:	2825883a 	mov	r18,r5
  804444:	dc002417 	ldw	r16,144(sp)
  804448:	3027883a 	mov	r19,r6
  80444c:	10000826 	beq	r2,zero,804470 <_dtoa_r+0x6c>
  804450:	21801117 	ldw	r6,68(r4)
  804454:	00c00044 	movi	r3,1
  804458:	100b883a 	mov	r5,r2
  80445c:	1986983a 	sll	r3,r3,r6
  804460:	11800115 	stw	r6,4(r2)
  804464:	10c00215 	stw	r3,8(r2)
  804468:	08071b80 	call	8071b8 <_Bfree>
  80446c:	e0001015 	stw	zero,64(fp)
  804470:	88002e16 	blt	r17,zero,80452c <_dtoa_r+0x128>
  804474:	80000015 	stw	zero,0(r16)
  804478:	889ffc2c 	andhi	r2,r17,32752
  80447c:	00dffc34 	movhi	r3,32752
  804480:	10c01c26 	beq	r2,r3,8044f4 <_dtoa_r+0xf0>
  804484:	000d883a 	mov	r6,zero
  804488:	000f883a 	mov	r7,zero
  80448c:	9009883a 	mov	r4,r18
  804490:	980b883a 	mov	r5,r19
  804494:	080c3700 	call	80c370 <__eqdf2>
  804498:	10002b1e 	bne	r2,zero,804548 <_dtoa_r+0x144>
  80449c:	d9c02317 	ldw	r7,140(sp)
  8044a0:	00800044 	movi	r2,1
  8044a4:	38800015 	stw	r2,0(r7)
  8044a8:	d8802517 	ldw	r2,148(sp)
  8044ac:	10019e26 	beq	r2,zero,804b28 <_dtoa_r+0x724>
  8044b0:	d8c02517 	ldw	r3,148(sp)
  8044b4:	00802074 	movhi	r2,129
  8044b8:	1086ba44 	addi	r2,r2,6889
  8044bc:	18800015 	stw	r2,0(r3)
  8044c0:	10bfffc4 	addi	r2,r2,-1
  8044c4:	dfc02117 	ldw	ra,132(sp)
  8044c8:	df002017 	ldw	fp,128(sp)
  8044cc:	ddc01f17 	ldw	r23,124(sp)
  8044d0:	dd801e17 	ldw	r22,120(sp)
  8044d4:	dd401d17 	ldw	r21,116(sp)
  8044d8:	dd001c17 	ldw	r20,112(sp)
  8044dc:	dcc01b17 	ldw	r19,108(sp)
  8044e0:	dc801a17 	ldw	r18,104(sp)
  8044e4:	dc401917 	ldw	r17,100(sp)
  8044e8:	dc001817 	ldw	r16,96(sp)
  8044ec:	dec02204 	addi	sp,sp,136
  8044f0:	f800283a 	ret
  8044f4:	d8c02317 	ldw	r3,140(sp)
  8044f8:	0089c3c4 	movi	r2,9999
  8044fc:	18800015 	stw	r2,0(r3)
  804500:	90017726 	beq	r18,zero,804ae0 <_dtoa_r+0x6dc>
  804504:	00802074 	movhi	r2,129
  804508:	1086c604 	addi	r2,r2,6936
  80450c:	d9002517 	ldw	r4,148(sp)
  804510:	203fec26 	beq	r4,zero,8044c4 <__alt_mem_onchip_mem+0xff7fc4c4>
  804514:	10c000c7 	ldb	r3,3(r2)
  804518:	1801781e 	bne	r3,zero,804afc <_dtoa_r+0x6f8>
  80451c:	10c000c4 	addi	r3,r2,3
  804520:	d9802517 	ldw	r6,148(sp)
  804524:	30c00015 	stw	r3,0(r6)
  804528:	003fe606 	br	8044c4 <__alt_mem_onchip_mem+0xff7fc4c4>
  80452c:	04e00034 	movhi	r19,32768
  804530:	9cffffc4 	addi	r19,r19,-1
  804534:	00800044 	movi	r2,1
  804538:	8ce6703a 	and	r19,r17,r19
  80453c:	80800015 	stw	r2,0(r16)
  804540:	9823883a 	mov	r17,r19
  804544:	003fcc06 	br	804478 <__alt_mem_onchip_mem+0xff7fc478>
  804548:	d8800204 	addi	r2,sp,8
  80454c:	d8800015 	stw	r2,0(sp)
  804550:	d9c00104 	addi	r7,sp,4
  804554:	900b883a 	mov	r5,r18
  804558:	980d883a 	mov	r6,r19
  80455c:	e009883a 	mov	r4,fp
  804560:	8820d53a 	srli	r16,r17,20
  804564:	0807da40 	call	807da4 <__d2b>
  804568:	d8800915 	stw	r2,36(sp)
  80456c:	8001651e 	bne	r16,zero,804b04 <_dtoa_r+0x700>
  804570:	dd800217 	ldw	r22,8(sp)
  804574:	dc000117 	ldw	r16,4(sp)
  804578:	00800804 	movi	r2,32
  80457c:	b421883a 	add	r16,r22,r16
  804580:	80c10c84 	addi	r3,r16,1074
  804584:	10c2d10e 	bge	r2,r3,8050cc <_dtoa_r+0xcc8>
  804588:	00801004 	movi	r2,64
  80458c:	81010484 	addi	r4,r16,1042
  804590:	10c7c83a 	sub	r3,r2,r3
  804594:	9108d83a 	srl	r4,r18,r4
  804598:	88e2983a 	sll	r17,r17,r3
  80459c:	2448b03a 	or	r4,r4,r17
  8045a0:	080d7380 	call	80d738 <__floatunsidf>
  8045a4:	017f8434 	movhi	r5,65040
  8045a8:	01800044 	movi	r6,1
  8045ac:	1009883a 	mov	r4,r2
  8045b0:	194b883a 	add	r5,r3,r5
  8045b4:	843fffc4 	addi	r16,r16,-1
  8045b8:	d9801115 	stw	r6,68(sp)
  8045bc:	000d883a 	mov	r6,zero
  8045c0:	01cffe34 	movhi	r7,16376
  8045c4:	080cce00 	call	80cce0 <__subdf3>
  8045c8:	0198dbf4 	movhi	r6,25455
  8045cc:	01cff4f4 	movhi	r7,16339
  8045d0:	3190d844 	addi	r6,r6,17249
  8045d4:	39e1e9c4 	addi	r7,r7,-30809
  8045d8:	1009883a 	mov	r4,r2
  8045dc:	180b883a 	mov	r5,r3
  8045e0:	080c5c80 	call	80c5c8 <__muldf3>
  8045e4:	01a2d874 	movhi	r6,35681
  8045e8:	01cff1f4 	movhi	r7,16327
  8045ec:	31b22cc4 	addi	r6,r6,-14157
  8045f0:	39e28a04 	addi	r7,r7,-30168
  8045f4:	180b883a 	mov	r5,r3
  8045f8:	1009883a 	mov	r4,r2
  8045fc:	080b1dc0 	call	80b1dc <__adddf3>
  804600:	8009883a 	mov	r4,r16
  804604:	1029883a 	mov	r20,r2
  804608:	1823883a 	mov	r17,r3
  80460c:	080d65c0 	call	80d65c <__floatsidf>
  804610:	019427f4 	movhi	r6,20639
  804614:	01cff4f4 	movhi	r7,16339
  804618:	319e7ec4 	addi	r6,r6,31227
  80461c:	39d104c4 	addi	r7,r7,17427
  804620:	1009883a 	mov	r4,r2
  804624:	180b883a 	mov	r5,r3
  804628:	080c5c80 	call	80c5c8 <__muldf3>
  80462c:	100d883a 	mov	r6,r2
  804630:	180f883a 	mov	r7,r3
  804634:	a009883a 	mov	r4,r20
  804638:	880b883a 	mov	r5,r17
  80463c:	080b1dc0 	call	80b1dc <__adddf3>
  804640:	1009883a 	mov	r4,r2
  804644:	180b883a 	mov	r5,r3
  804648:	1029883a 	mov	r20,r2
  80464c:	1823883a 	mov	r17,r3
  804650:	080d5dc0 	call	80d5dc <__fixdfsi>
  804654:	000d883a 	mov	r6,zero
  804658:	000f883a 	mov	r7,zero
  80465c:	a009883a 	mov	r4,r20
  804660:	880b883a 	mov	r5,r17
  804664:	d8800515 	stw	r2,20(sp)
  804668:	080c4d40 	call	80c4d4 <__ledf2>
  80466c:	10028716 	blt	r2,zero,80508c <_dtoa_r+0xc88>
  804670:	d8c00517 	ldw	r3,20(sp)
  804674:	00800584 	movi	r2,22
  804678:	10c27536 	bltu	r2,r3,805050 <_dtoa_r+0xc4c>
  80467c:	180490fa 	slli	r2,r3,3
  804680:	00c02074 	movhi	r3,129
  804684:	18c6e104 	addi	r3,r3,7044
  804688:	1885883a 	add	r2,r3,r2
  80468c:	11000017 	ldw	r4,0(r2)
  804690:	11400117 	ldw	r5,4(r2)
  804694:	900d883a 	mov	r6,r18
  804698:	980f883a 	mov	r7,r19
  80469c:	080c3f80 	call	80c3f8 <__gedf2>
  8046a0:	00828d0e 	bge	zero,r2,8050d8 <_dtoa_r+0xcd4>
  8046a4:	d9000517 	ldw	r4,20(sp)
  8046a8:	d8000e15 	stw	zero,56(sp)
  8046ac:	213fffc4 	addi	r4,r4,-1
  8046b0:	d9000515 	stw	r4,20(sp)
  8046b4:	b42dc83a 	sub	r22,r22,r16
  8046b8:	b5bfffc4 	addi	r22,r22,-1
  8046bc:	b0026f16 	blt	r22,zero,80507c <_dtoa_r+0xc78>
  8046c0:	d8000815 	stw	zero,32(sp)
  8046c4:	d9c00517 	ldw	r7,20(sp)
  8046c8:	38026416 	blt	r7,zero,80505c <_dtoa_r+0xc58>
  8046cc:	b1ed883a 	add	r22,r22,r7
  8046d0:	d9c00d15 	stw	r7,52(sp)
  8046d4:	d8000a15 	stw	zero,40(sp)
  8046d8:	d9800317 	ldw	r6,12(sp)
  8046dc:	00800244 	movi	r2,9
  8046e0:	11811436 	bltu	r2,r6,804b34 <_dtoa_r+0x730>
  8046e4:	00800144 	movi	r2,5
  8046e8:	1184e10e 	bge	r2,r6,805a70 <_dtoa_r+0x166c>
  8046ec:	31bfff04 	addi	r6,r6,-4
  8046f0:	d9800315 	stw	r6,12(sp)
  8046f4:	0023883a 	mov	r17,zero
  8046f8:	d9800317 	ldw	r6,12(sp)
  8046fc:	008000c4 	movi	r2,3
  804700:	30836726 	beq	r6,r2,8054a0 <_dtoa_r+0x109c>
  804704:	1183410e 	bge	r2,r6,80540c <_dtoa_r+0x1008>
  804708:	d9c00317 	ldw	r7,12(sp)
  80470c:	00800104 	movi	r2,4
  804710:	38827c26 	beq	r7,r2,805104 <_dtoa_r+0xd00>
  804714:	00800144 	movi	r2,5
  804718:	3884c41e 	bne	r7,r2,805a2c <_dtoa_r+0x1628>
  80471c:	00800044 	movi	r2,1
  804720:	d8800b15 	stw	r2,44(sp)
  804724:	d8c00517 	ldw	r3,20(sp)
  804728:	d9002217 	ldw	r4,136(sp)
  80472c:	1907883a 	add	r3,r3,r4
  804730:	19800044 	addi	r6,r3,1
  804734:	d8c00c15 	stw	r3,48(sp)
  804738:	d9800615 	stw	r6,24(sp)
  80473c:	0183a40e 	bge	zero,r6,8055d0 <_dtoa_r+0x11cc>
  804740:	d9800617 	ldw	r6,24(sp)
  804744:	3021883a 	mov	r16,r6
  804748:	e0001115 	stw	zero,68(fp)
  80474c:	008005c4 	movi	r2,23
  804750:	1184c92e 	bgeu	r2,r6,805a78 <_dtoa_r+0x1674>
  804754:	00c00044 	movi	r3,1
  804758:	00800104 	movi	r2,4
  80475c:	1085883a 	add	r2,r2,r2
  804760:	11000504 	addi	r4,r2,20
  804764:	180b883a 	mov	r5,r3
  804768:	18c00044 	addi	r3,r3,1
  80476c:	313ffb2e 	bgeu	r6,r4,80475c <__alt_mem_onchip_mem+0xff7fc75c>
  804770:	e1401115 	stw	r5,68(fp)
  804774:	e009883a 	mov	r4,fp
  804778:	08071100 	call	807110 <_Balloc>
  80477c:	d8800715 	stw	r2,28(sp)
  804780:	e0801015 	stw	r2,64(fp)
  804784:	00800384 	movi	r2,14
  804788:	1400f736 	bltu	r2,r16,804b68 <_dtoa_r+0x764>
  80478c:	8800f626 	beq	r17,zero,804b68 <_dtoa_r+0x764>
  804790:	d9c00517 	ldw	r7,20(sp)
  804794:	01c39a0e 	bge	zero,r7,805600 <_dtoa_r+0x11fc>
  804798:	388003cc 	andi	r2,r7,15
  80479c:	100490fa 	slli	r2,r2,3
  8047a0:	382bd13a 	srai	r21,r7,4
  8047a4:	00c02074 	movhi	r3,129
  8047a8:	18c6e104 	addi	r3,r3,7044
  8047ac:	1885883a 	add	r2,r3,r2
  8047b0:	a8c0040c 	andi	r3,r21,16
  8047b4:	12400017 	ldw	r9,0(r2)
  8047b8:	12000117 	ldw	r8,4(r2)
  8047bc:	18037926 	beq	r3,zero,8055a4 <_dtoa_r+0x11a0>
  8047c0:	00802074 	movhi	r2,129
  8047c4:	1086d704 	addi	r2,r2,7004
  8047c8:	11800817 	ldw	r6,32(r2)
  8047cc:	11c00917 	ldw	r7,36(r2)
  8047d0:	9009883a 	mov	r4,r18
  8047d4:	980b883a 	mov	r5,r19
  8047d8:	da001715 	stw	r8,92(sp)
  8047dc:	da401615 	stw	r9,88(sp)
  8047e0:	080ba880 	call	80ba88 <__divdf3>
  8047e4:	da001717 	ldw	r8,92(sp)
  8047e8:	da401617 	ldw	r9,88(sp)
  8047ec:	ad4003cc 	andi	r21,r21,15
  8047f0:	040000c4 	movi	r16,3
  8047f4:	1023883a 	mov	r17,r2
  8047f8:	1829883a 	mov	r20,r3
  8047fc:	a8001126 	beq	r21,zero,804844 <_dtoa_r+0x440>
  804800:	05c02074 	movhi	r23,129
  804804:	bdc6d704 	addi	r23,r23,7004
  804808:	4805883a 	mov	r2,r9
  80480c:	4007883a 	mov	r3,r8
  804810:	a980004c 	andi	r6,r21,1
  804814:	1009883a 	mov	r4,r2
  804818:	a82bd07a 	srai	r21,r21,1
  80481c:	180b883a 	mov	r5,r3
  804820:	30000426 	beq	r6,zero,804834 <_dtoa_r+0x430>
  804824:	b9800017 	ldw	r6,0(r23)
  804828:	b9c00117 	ldw	r7,4(r23)
  80482c:	84000044 	addi	r16,r16,1
  804830:	080c5c80 	call	80c5c8 <__muldf3>
  804834:	bdc00204 	addi	r23,r23,8
  804838:	a83ff51e 	bne	r21,zero,804810 <__alt_mem_onchip_mem+0xff7fc810>
  80483c:	1013883a 	mov	r9,r2
  804840:	1811883a 	mov	r8,r3
  804844:	480d883a 	mov	r6,r9
  804848:	400f883a 	mov	r7,r8
  80484c:	8809883a 	mov	r4,r17
  804850:	a00b883a 	mov	r5,r20
  804854:	080ba880 	call	80ba88 <__divdf3>
  804858:	d8800f15 	stw	r2,60(sp)
  80485c:	d8c01015 	stw	r3,64(sp)
  804860:	d8c00e17 	ldw	r3,56(sp)
  804864:	18000626 	beq	r3,zero,804880 <_dtoa_r+0x47c>
  804868:	d9000f17 	ldw	r4,60(sp)
  80486c:	d9401017 	ldw	r5,64(sp)
  804870:	000d883a 	mov	r6,zero
  804874:	01cffc34 	movhi	r7,16368
  804878:	080c4d40 	call	80c4d4 <__ledf2>
  80487c:	10040b16 	blt	r2,zero,8058ac <_dtoa_r+0x14a8>
  804880:	8009883a 	mov	r4,r16
  804884:	080d65c0 	call	80d65c <__floatsidf>
  804888:	d9800f17 	ldw	r6,60(sp)
  80488c:	d9c01017 	ldw	r7,64(sp)
  804890:	1009883a 	mov	r4,r2
  804894:	180b883a 	mov	r5,r3
  804898:	080c5c80 	call	80c5c8 <__muldf3>
  80489c:	000d883a 	mov	r6,zero
  8048a0:	01d00734 	movhi	r7,16412
  8048a4:	1009883a 	mov	r4,r2
  8048a8:	180b883a 	mov	r5,r3
  8048ac:	080b1dc0 	call	80b1dc <__adddf3>
  8048b0:	1021883a 	mov	r16,r2
  8048b4:	d8800617 	ldw	r2,24(sp)
  8048b8:	047f3034 	movhi	r17,64704
  8048bc:	1c63883a 	add	r17,r3,r17
  8048c0:	10031826 	beq	r2,zero,805524 <_dtoa_r+0x1120>
  8048c4:	d8c00517 	ldw	r3,20(sp)
  8048c8:	db000617 	ldw	r12,24(sp)
  8048cc:	d8c01315 	stw	r3,76(sp)
  8048d0:	d9000b17 	ldw	r4,44(sp)
  8048d4:	20038f26 	beq	r4,zero,805714 <_dtoa_r+0x1310>
  8048d8:	60bfffc4 	addi	r2,r12,-1
  8048dc:	100490fa 	slli	r2,r2,3
  8048e0:	00c02074 	movhi	r3,129
  8048e4:	18c6e104 	addi	r3,r3,7044
  8048e8:	1885883a 	add	r2,r3,r2
  8048ec:	11800017 	ldw	r6,0(r2)
  8048f0:	11c00117 	ldw	r7,4(r2)
  8048f4:	d8800717 	ldw	r2,28(sp)
  8048f8:	0009883a 	mov	r4,zero
  8048fc:	014ff834 	movhi	r5,16352
  804900:	db001615 	stw	r12,88(sp)
  804904:	15c00044 	addi	r23,r2,1
  804908:	080ba880 	call	80ba88 <__divdf3>
  80490c:	800d883a 	mov	r6,r16
  804910:	880f883a 	mov	r7,r17
  804914:	1009883a 	mov	r4,r2
  804918:	180b883a 	mov	r5,r3
  80491c:	080cce00 	call	80cce0 <__subdf3>
  804920:	d9401017 	ldw	r5,64(sp)
  804924:	d9000f17 	ldw	r4,60(sp)
  804928:	102b883a 	mov	r21,r2
  80492c:	d8c01215 	stw	r3,72(sp)
  804930:	080d5dc0 	call	80d5dc <__fixdfsi>
  804934:	1009883a 	mov	r4,r2
  804938:	1029883a 	mov	r20,r2
  80493c:	080d65c0 	call	80d65c <__floatsidf>
  804940:	d9000f17 	ldw	r4,60(sp)
  804944:	d9401017 	ldw	r5,64(sp)
  804948:	100d883a 	mov	r6,r2
  80494c:	180f883a 	mov	r7,r3
  804950:	080cce00 	call	80cce0 <__subdf3>
  804954:	1823883a 	mov	r17,r3
  804958:	d8c00717 	ldw	r3,28(sp)
  80495c:	d9401217 	ldw	r5,72(sp)
  804960:	a2000c04 	addi	r8,r20,48
  804964:	1021883a 	mov	r16,r2
  804968:	1a000005 	stb	r8,0(r3)
  80496c:	800d883a 	mov	r6,r16
  804970:	880f883a 	mov	r7,r17
  804974:	a809883a 	mov	r4,r21
  804978:	4029883a 	mov	r20,r8
  80497c:	080c3f80 	call	80c3f8 <__gedf2>
  804980:	00841d16 	blt	zero,r2,8059f8 <_dtoa_r+0x15f4>
  804984:	800d883a 	mov	r6,r16
  804988:	880f883a 	mov	r7,r17
  80498c:	0009883a 	mov	r4,zero
  804990:	014ffc34 	movhi	r5,16368
  804994:	080cce00 	call	80cce0 <__subdf3>
  804998:	d9401217 	ldw	r5,72(sp)
  80499c:	100d883a 	mov	r6,r2
  8049a0:	180f883a 	mov	r7,r3
  8049a4:	a809883a 	mov	r4,r21
  8049a8:	080c3f80 	call	80c3f8 <__gedf2>
  8049ac:	db001617 	ldw	r12,88(sp)
  8049b0:	00840e16 	blt	zero,r2,8059ec <_dtoa_r+0x15e8>
  8049b4:	00800044 	movi	r2,1
  8049b8:	13006b0e 	bge	r2,r12,804b68 <_dtoa_r+0x764>
  8049bc:	d9000717 	ldw	r4,28(sp)
  8049c0:	dd800f15 	stw	r22,60(sp)
  8049c4:	dcc01015 	stw	r19,64(sp)
  8049c8:	2319883a 	add	r12,r4,r12
  8049cc:	dcc01217 	ldw	r19,72(sp)
  8049d0:	602d883a 	mov	r22,r12
  8049d4:	dc801215 	stw	r18,72(sp)
  8049d8:	b825883a 	mov	r18,r23
  8049dc:	00000906 	br	804a04 <_dtoa_r+0x600>
  8049e0:	080cce00 	call	80cce0 <__subdf3>
  8049e4:	a80d883a 	mov	r6,r21
  8049e8:	980f883a 	mov	r7,r19
  8049ec:	1009883a 	mov	r4,r2
  8049f0:	180b883a 	mov	r5,r3
  8049f4:	080c4d40 	call	80c4d4 <__ledf2>
  8049f8:	1003e816 	blt	r2,zero,80599c <_dtoa_r+0x1598>
  8049fc:	b825883a 	mov	r18,r23
  804a00:	bd83e926 	beq	r23,r22,8059a8 <_dtoa_r+0x15a4>
  804a04:	a809883a 	mov	r4,r21
  804a08:	980b883a 	mov	r5,r19
  804a0c:	000d883a 	mov	r6,zero
  804a10:	01d00934 	movhi	r7,16420
  804a14:	080c5c80 	call	80c5c8 <__muldf3>
  804a18:	000d883a 	mov	r6,zero
  804a1c:	01d00934 	movhi	r7,16420
  804a20:	8009883a 	mov	r4,r16
  804a24:	880b883a 	mov	r5,r17
  804a28:	102b883a 	mov	r21,r2
  804a2c:	1827883a 	mov	r19,r3
  804a30:	080c5c80 	call	80c5c8 <__muldf3>
  804a34:	180b883a 	mov	r5,r3
  804a38:	1009883a 	mov	r4,r2
  804a3c:	1821883a 	mov	r16,r3
  804a40:	1023883a 	mov	r17,r2
  804a44:	080d5dc0 	call	80d5dc <__fixdfsi>
  804a48:	1009883a 	mov	r4,r2
  804a4c:	1029883a 	mov	r20,r2
  804a50:	080d65c0 	call	80d65c <__floatsidf>
  804a54:	8809883a 	mov	r4,r17
  804a58:	800b883a 	mov	r5,r16
  804a5c:	100d883a 	mov	r6,r2
  804a60:	180f883a 	mov	r7,r3
  804a64:	080cce00 	call	80cce0 <__subdf3>
  804a68:	a5000c04 	addi	r20,r20,48
  804a6c:	a80d883a 	mov	r6,r21
  804a70:	980f883a 	mov	r7,r19
  804a74:	1009883a 	mov	r4,r2
  804a78:	180b883a 	mov	r5,r3
  804a7c:	95000005 	stb	r20,0(r18)
  804a80:	1021883a 	mov	r16,r2
  804a84:	1823883a 	mov	r17,r3
  804a88:	080c4d40 	call	80c4d4 <__ledf2>
  804a8c:	bdc00044 	addi	r23,r23,1
  804a90:	800d883a 	mov	r6,r16
  804a94:	880f883a 	mov	r7,r17
  804a98:	0009883a 	mov	r4,zero
  804a9c:	014ffc34 	movhi	r5,16368
  804aa0:	103fcf0e 	bge	r2,zero,8049e0 <__alt_mem_onchip_mem+0xff7fc9e0>
  804aa4:	d8c01317 	ldw	r3,76(sp)
  804aa8:	d8c00515 	stw	r3,20(sp)
  804aac:	d9400917 	ldw	r5,36(sp)
  804ab0:	e009883a 	mov	r4,fp
  804ab4:	08071b80 	call	8071b8 <_Bfree>
  804ab8:	d9000517 	ldw	r4,20(sp)
  804abc:	d9802317 	ldw	r6,140(sp)
  804ac0:	d9c02517 	ldw	r7,148(sp)
  804ac4:	b8000005 	stb	zero,0(r23)
  804ac8:	20800044 	addi	r2,r4,1
  804acc:	30800015 	stw	r2,0(r6)
  804ad0:	3802aa26 	beq	r7,zero,80557c <_dtoa_r+0x1178>
  804ad4:	3dc00015 	stw	r23,0(r7)
  804ad8:	d8800717 	ldw	r2,28(sp)
  804adc:	003e7906 	br	8044c4 <__alt_mem_onchip_mem+0xff7fc4c4>
  804ae0:	00800434 	movhi	r2,16
  804ae4:	10bfffc4 	addi	r2,r2,-1
  804ae8:	88a2703a 	and	r17,r17,r2
  804aec:	883e851e 	bne	r17,zero,804504 <__alt_mem_onchip_mem+0xff7fc504>
  804af0:	00802074 	movhi	r2,129
  804af4:	1086c304 	addi	r2,r2,6924
  804af8:	003e8406 	br	80450c <__alt_mem_onchip_mem+0xff7fc50c>
  804afc:	10c00204 	addi	r3,r2,8
  804b00:	003e8706 	br	804520 <__alt_mem_onchip_mem+0xff7fc520>
  804b04:	01400434 	movhi	r5,16
  804b08:	297fffc4 	addi	r5,r5,-1
  804b0c:	994a703a 	and	r5,r19,r5
  804b10:	9009883a 	mov	r4,r18
  804b14:	843f0044 	addi	r16,r16,-1023
  804b18:	294ffc34 	orhi	r5,r5,16368
  804b1c:	dd800217 	ldw	r22,8(sp)
  804b20:	d8001115 	stw	zero,68(sp)
  804b24:	003ea506 	br	8045bc <__alt_mem_onchip_mem+0xff7fc5bc>
  804b28:	00802074 	movhi	r2,129
  804b2c:	1086ba04 	addi	r2,r2,6888
  804b30:	003e6406 	br	8044c4 <__alt_mem_onchip_mem+0xff7fc4c4>
  804b34:	e0001115 	stw	zero,68(fp)
  804b38:	000b883a 	mov	r5,zero
  804b3c:	e009883a 	mov	r4,fp
  804b40:	08071100 	call	807110 <_Balloc>
  804b44:	01bfffc4 	movi	r6,-1
  804b48:	01c00044 	movi	r7,1
  804b4c:	d8800715 	stw	r2,28(sp)
  804b50:	d9800c15 	stw	r6,48(sp)
  804b54:	e0801015 	stw	r2,64(fp)
  804b58:	d8000315 	stw	zero,12(sp)
  804b5c:	d9c00b15 	stw	r7,44(sp)
  804b60:	d9800615 	stw	r6,24(sp)
  804b64:	d8002215 	stw	zero,136(sp)
  804b68:	d8800117 	ldw	r2,4(sp)
  804b6c:	10008916 	blt	r2,zero,804d94 <_dtoa_r+0x990>
  804b70:	d9000517 	ldw	r4,20(sp)
  804b74:	00c00384 	movi	r3,14
  804b78:	19008616 	blt	r3,r4,804d94 <_dtoa_r+0x990>
  804b7c:	200490fa 	slli	r2,r4,3
  804b80:	00c02074 	movhi	r3,129
  804b84:	d9802217 	ldw	r6,136(sp)
  804b88:	18c6e104 	addi	r3,r3,7044
  804b8c:	1885883a 	add	r2,r3,r2
  804b90:	14000017 	ldw	r16,0(r2)
  804b94:	14400117 	ldw	r17,4(r2)
  804b98:	30016316 	blt	r6,zero,805128 <_dtoa_r+0xd24>
  804b9c:	800d883a 	mov	r6,r16
  804ba0:	880f883a 	mov	r7,r17
  804ba4:	9009883a 	mov	r4,r18
  804ba8:	980b883a 	mov	r5,r19
  804bac:	080ba880 	call	80ba88 <__divdf3>
  804bb0:	180b883a 	mov	r5,r3
  804bb4:	1009883a 	mov	r4,r2
  804bb8:	080d5dc0 	call	80d5dc <__fixdfsi>
  804bbc:	1009883a 	mov	r4,r2
  804bc0:	102b883a 	mov	r21,r2
  804bc4:	080d65c0 	call	80d65c <__floatsidf>
  804bc8:	800d883a 	mov	r6,r16
  804bcc:	880f883a 	mov	r7,r17
  804bd0:	1009883a 	mov	r4,r2
  804bd4:	180b883a 	mov	r5,r3
  804bd8:	080c5c80 	call	80c5c8 <__muldf3>
  804bdc:	100d883a 	mov	r6,r2
  804be0:	180f883a 	mov	r7,r3
  804be4:	9009883a 	mov	r4,r18
  804be8:	980b883a 	mov	r5,r19
  804bec:	080cce00 	call	80cce0 <__subdf3>
  804bf0:	d9c00717 	ldw	r7,28(sp)
  804bf4:	1009883a 	mov	r4,r2
  804bf8:	a8800c04 	addi	r2,r21,48
  804bfc:	38800005 	stb	r2,0(r7)
  804c00:	3dc00044 	addi	r23,r7,1
  804c04:	d9c00617 	ldw	r7,24(sp)
  804c08:	01800044 	movi	r6,1
  804c0c:	180b883a 	mov	r5,r3
  804c10:	2005883a 	mov	r2,r4
  804c14:	39803826 	beq	r7,r6,804cf8 <_dtoa_r+0x8f4>
  804c18:	000d883a 	mov	r6,zero
  804c1c:	01d00934 	movhi	r7,16420
  804c20:	080c5c80 	call	80c5c8 <__muldf3>
  804c24:	000d883a 	mov	r6,zero
  804c28:	000f883a 	mov	r7,zero
  804c2c:	1009883a 	mov	r4,r2
  804c30:	180b883a 	mov	r5,r3
  804c34:	1025883a 	mov	r18,r2
  804c38:	1827883a 	mov	r19,r3
  804c3c:	080c3700 	call	80c370 <__eqdf2>
  804c40:	103f9a26 	beq	r2,zero,804aac <__alt_mem_onchip_mem+0xff7fcaac>
  804c44:	d9c00617 	ldw	r7,24(sp)
  804c48:	d8c00717 	ldw	r3,28(sp)
  804c4c:	b829883a 	mov	r20,r23
  804c50:	38bfffc4 	addi	r2,r7,-1
  804c54:	18ad883a 	add	r22,r3,r2
  804c58:	00000a06 	br	804c84 <_dtoa_r+0x880>
  804c5c:	080c5c80 	call	80c5c8 <__muldf3>
  804c60:	000d883a 	mov	r6,zero
  804c64:	000f883a 	mov	r7,zero
  804c68:	1009883a 	mov	r4,r2
  804c6c:	180b883a 	mov	r5,r3
  804c70:	1025883a 	mov	r18,r2
  804c74:	1827883a 	mov	r19,r3
  804c78:	b829883a 	mov	r20,r23
  804c7c:	080c3700 	call	80c370 <__eqdf2>
  804c80:	103f8a26 	beq	r2,zero,804aac <__alt_mem_onchip_mem+0xff7fcaac>
  804c84:	800d883a 	mov	r6,r16
  804c88:	880f883a 	mov	r7,r17
  804c8c:	9009883a 	mov	r4,r18
  804c90:	980b883a 	mov	r5,r19
  804c94:	080ba880 	call	80ba88 <__divdf3>
  804c98:	180b883a 	mov	r5,r3
  804c9c:	1009883a 	mov	r4,r2
  804ca0:	080d5dc0 	call	80d5dc <__fixdfsi>
  804ca4:	1009883a 	mov	r4,r2
  804ca8:	102b883a 	mov	r21,r2
  804cac:	080d65c0 	call	80d65c <__floatsidf>
  804cb0:	800d883a 	mov	r6,r16
  804cb4:	880f883a 	mov	r7,r17
  804cb8:	1009883a 	mov	r4,r2
  804cbc:	180b883a 	mov	r5,r3
  804cc0:	080c5c80 	call	80c5c8 <__muldf3>
  804cc4:	100d883a 	mov	r6,r2
  804cc8:	180f883a 	mov	r7,r3
  804ccc:	9009883a 	mov	r4,r18
  804cd0:	980b883a 	mov	r5,r19
  804cd4:	080cce00 	call	80cce0 <__subdf3>
  804cd8:	aa000c04 	addi	r8,r21,48
  804cdc:	a2000005 	stb	r8,0(r20)
  804ce0:	000d883a 	mov	r6,zero
  804ce4:	01d00934 	movhi	r7,16420
  804ce8:	1009883a 	mov	r4,r2
  804cec:	180b883a 	mov	r5,r3
  804cf0:	a5c00044 	addi	r23,r20,1
  804cf4:	b53fd91e 	bne	r22,r20,804c5c <__alt_mem_onchip_mem+0xff7fcc5c>
  804cf8:	100d883a 	mov	r6,r2
  804cfc:	180f883a 	mov	r7,r3
  804d00:	1009883a 	mov	r4,r2
  804d04:	180b883a 	mov	r5,r3
  804d08:	080b1dc0 	call	80b1dc <__adddf3>
  804d0c:	100d883a 	mov	r6,r2
  804d10:	180f883a 	mov	r7,r3
  804d14:	8009883a 	mov	r4,r16
  804d18:	880b883a 	mov	r5,r17
  804d1c:	1027883a 	mov	r19,r2
  804d20:	1825883a 	mov	r18,r3
  804d24:	080c4d40 	call	80c4d4 <__ledf2>
  804d28:	10000816 	blt	r2,zero,804d4c <_dtoa_r+0x948>
  804d2c:	980d883a 	mov	r6,r19
  804d30:	900f883a 	mov	r7,r18
  804d34:	8009883a 	mov	r4,r16
  804d38:	880b883a 	mov	r5,r17
  804d3c:	080c3700 	call	80c370 <__eqdf2>
  804d40:	103f5a1e 	bne	r2,zero,804aac <__alt_mem_onchip_mem+0xff7fcaac>
  804d44:	ad40004c 	andi	r21,r21,1
  804d48:	a83f5826 	beq	r21,zero,804aac <__alt_mem_onchip_mem+0xff7fcaac>
  804d4c:	bd3fffc3 	ldbu	r20,-1(r23)
  804d50:	b8bfffc4 	addi	r2,r23,-1
  804d54:	1007883a 	mov	r3,r2
  804d58:	01400e44 	movi	r5,57
  804d5c:	d9800717 	ldw	r6,28(sp)
  804d60:	00000506 	br	804d78 <_dtoa_r+0x974>
  804d64:	18ffffc4 	addi	r3,r3,-1
  804d68:	11824726 	beq	r2,r6,805688 <_dtoa_r+0x1284>
  804d6c:	1d000003 	ldbu	r20,0(r3)
  804d70:	102f883a 	mov	r23,r2
  804d74:	10bfffc4 	addi	r2,r2,-1
  804d78:	a1003fcc 	andi	r4,r20,255
  804d7c:	2100201c 	xori	r4,r4,128
  804d80:	213fe004 	addi	r4,r4,-128
  804d84:	217ff726 	beq	r4,r5,804d64 <__alt_mem_onchip_mem+0xff7fcd64>
  804d88:	a2000044 	addi	r8,r20,1
  804d8c:	12000005 	stb	r8,0(r2)
  804d90:	003f4606 	br	804aac <__alt_mem_onchip_mem+0xff7fcaac>
  804d94:	d9000b17 	ldw	r4,44(sp)
  804d98:	2000c826 	beq	r4,zero,8050bc <_dtoa_r+0xcb8>
  804d9c:	d9800317 	ldw	r6,12(sp)
  804da0:	00c00044 	movi	r3,1
  804da4:	1980f90e 	bge	r3,r6,80518c <_dtoa_r+0xd88>
  804da8:	d8800617 	ldw	r2,24(sp)
  804dac:	d8c00a17 	ldw	r3,40(sp)
  804db0:	157fffc4 	addi	r21,r2,-1
  804db4:	1d41f316 	blt	r3,r21,805584 <_dtoa_r+0x1180>
  804db8:	1d6bc83a 	sub	r21,r3,r21
  804dbc:	d9c00617 	ldw	r7,24(sp)
  804dc0:	3802aa16 	blt	r7,zero,80586c <_dtoa_r+0x1468>
  804dc4:	dd000817 	ldw	r20,32(sp)
  804dc8:	d8800617 	ldw	r2,24(sp)
  804dcc:	d8c00817 	ldw	r3,32(sp)
  804dd0:	01400044 	movi	r5,1
  804dd4:	e009883a 	mov	r4,fp
  804dd8:	1887883a 	add	r3,r3,r2
  804ddc:	d8c00815 	stw	r3,32(sp)
  804de0:	b0ad883a 	add	r22,r22,r2
  804de4:	080751c0 	call	80751c <__i2b>
  804de8:	1023883a 	mov	r17,r2
  804dec:	a0000826 	beq	r20,zero,804e10 <_dtoa_r+0xa0c>
  804df0:	0580070e 	bge	zero,r22,804e10 <_dtoa_r+0xa0c>
  804df4:	a005883a 	mov	r2,r20
  804df8:	b500b916 	blt	r22,r20,8050e0 <_dtoa_r+0xcdc>
  804dfc:	d9000817 	ldw	r4,32(sp)
  804e00:	a0a9c83a 	sub	r20,r20,r2
  804e04:	b0adc83a 	sub	r22,r22,r2
  804e08:	2089c83a 	sub	r4,r4,r2
  804e0c:	d9000815 	stw	r4,32(sp)
  804e10:	d9800a17 	ldw	r6,40(sp)
  804e14:	0181810e 	bge	zero,r6,80541c <_dtoa_r+0x1018>
  804e18:	d9c00b17 	ldw	r7,44(sp)
  804e1c:	3800b326 	beq	r7,zero,8050ec <_dtoa_r+0xce8>
  804e20:	a800b226 	beq	r21,zero,8050ec <_dtoa_r+0xce8>
  804e24:	880b883a 	mov	r5,r17
  804e28:	a80d883a 	mov	r6,r21
  804e2c:	e009883a 	mov	r4,fp
  804e30:	08077500 	call	807750 <__pow5mult>
  804e34:	d9800917 	ldw	r6,36(sp)
  804e38:	100b883a 	mov	r5,r2
  804e3c:	e009883a 	mov	r4,fp
  804e40:	1023883a 	mov	r17,r2
  804e44:	08075580 	call	807558 <__multiply>
  804e48:	1021883a 	mov	r16,r2
  804e4c:	d8800a17 	ldw	r2,40(sp)
  804e50:	d9400917 	ldw	r5,36(sp)
  804e54:	e009883a 	mov	r4,fp
  804e58:	1545c83a 	sub	r2,r2,r21
  804e5c:	d8800a15 	stw	r2,40(sp)
  804e60:	08071b80 	call	8071b8 <_Bfree>
  804e64:	d8c00a17 	ldw	r3,40(sp)
  804e68:	18009f1e 	bne	r3,zero,8050e8 <_dtoa_r+0xce4>
  804e6c:	05c00044 	movi	r23,1
  804e70:	e009883a 	mov	r4,fp
  804e74:	b80b883a 	mov	r5,r23
  804e78:	080751c0 	call	80751c <__i2b>
  804e7c:	d9000d17 	ldw	r4,52(sp)
  804e80:	102b883a 	mov	r21,r2
  804e84:	2000ce26 	beq	r4,zero,8051c0 <_dtoa_r+0xdbc>
  804e88:	200d883a 	mov	r6,r4
  804e8c:	100b883a 	mov	r5,r2
  804e90:	e009883a 	mov	r4,fp
  804e94:	08077500 	call	807750 <__pow5mult>
  804e98:	d9800317 	ldw	r6,12(sp)
  804e9c:	102b883a 	mov	r21,r2
  804ea0:	b981810e 	bge	r23,r6,8054a8 <_dtoa_r+0x10a4>
  804ea4:	0027883a 	mov	r19,zero
  804ea8:	a8800417 	ldw	r2,16(r21)
  804eac:	05c00804 	movi	r23,32
  804eb0:	10800104 	addi	r2,r2,4
  804eb4:	1085883a 	add	r2,r2,r2
  804eb8:	1085883a 	add	r2,r2,r2
  804ebc:	a885883a 	add	r2,r21,r2
  804ec0:	11000017 	ldw	r4,0(r2)
  804ec4:	08074040 	call	807404 <__hi0bits>
  804ec8:	b885c83a 	sub	r2,r23,r2
  804ecc:	1585883a 	add	r2,r2,r22
  804ed0:	108007cc 	andi	r2,r2,31
  804ed4:	1000b326 	beq	r2,zero,8051a4 <_dtoa_r+0xda0>
  804ed8:	00c00804 	movi	r3,32
  804edc:	1887c83a 	sub	r3,r3,r2
  804ee0:	01000104 	movi	r4,4
  804ee4:	20c2cd0e 	bge	r4,r3,805a1c <_dtoa_r+0x1618>
  804ee8:	00c00704 	movi	r3,28
  804eec:	1885c83a 	sub	r2,r3,r2
  804ef0:	d8c00817 	ldw	r3,32(sp)
  804ef4:	a0a9883a 	add	r20,r20,r2
  804ef8:	b0ad883a 	add	r22,r22,r2
  804efc:	1887883a 	add	r3,r3,r2
  804f00:	d8c00815 	stw	r3,32(sp)
  804f04:	d9800817 	ldw	r6,32(sp)
  804f08:	0180040e 	bge	zero,r6,804f1c <_dtoa_r+0xb18>
  804f0c:	800b883a 	mov	r5,r16
  804f10:	e009883a 	mov	r4,fp
  804f14:	08078900 	call	807890 <__lshift>
  804f18:	1021883a 	mov	r16,r2
  804f1c:	0580050e 	bge	zero,r22,804f34 <_dtoa_r+0xb30>
  804f20:	a80b883a 	mov	r5,r21
  804f24:	b00d883a 	mov	r6,r22
  804f28:	e009883a 	mov	r4,fp
  804f2c:	08078900 	call	807890 <__lshift>
  804f30:	102b883a 	mov	r21,r2
  804f34:	d9c00e17 	ldw	r7,56(sp)
  804f38:	3801211e 	bne	r7,zero,8053c0 <_dtoa_r+0xfbc>
  804f3c:	d9800617 	ldw	r6,24(sp)
  804f40:	0181380e 	bge	zero,r6,805424 <_dtoa_r+0x1020>
  804f44:	d8c00b17 	ldw	r3,44(sp)
  804f48:	1800ab1e 	bne	r3,zero,8051f8 <_dtoa_r+0xdf4>
  804f4c:	dc800717 	ldw	r18,28(sp)
  804f50:	dcc00617 	ldw	r19,24(sp)
  804f54:	9029883a 	mov	r20,r18
  804f58:	00000206 	br	804f64 <_dtoa_r+0xb60>
  804f5c:	08071e00 	call	8071e0 <__multadd>
  804f60:	1021883a 	mov	r16,r2
  804f64:	a80b883a 	mov	r5,r21
  804f68:	8009883a 	mov	r4,r16
  804f6c:	08042040 	call	804204 <quorem>
  804f70:	10800c04 	addi	r2,r2,48
  804f74:	90800005 	stb	r2,0(r18)
  804f78:	94800044 	addi	r18,r18,1
  804f7c:	9507c83a 	sub	r3,r18,r20
  804f80:	000f883a 	mov	r7,zero
  804f84:	01800284 	movi	r6,10
  804f88:	800b883a 	mov	r5,r16
  804f8c:	e009883a 	mov	r4,fp
  804f90:	1cfff216 	blt	r3,r19,804f5c <__alt_mem_onchip_mem+0xff7fcf5c>
  804f94:	1011883a 	mov	r8,r2
  804f98:	d8800617 	ldw	r2,24(sp)
  804f9c:	0082370e 	bge	zero,r2,80587c <_dtoa_r+0x1478>
  804fa0:	d9000717 	ldw	r4,28(sp)
  804fa4:	0025883a 	mov	r18,zero
  804fa8:	20af883a 	add	r23,r4,r2
  804fac:	01800044 	movi	r6,1
  804fb0:	800b883a 	mov	r5,r16
  804fb4:	e009883a 	mov	r4,fp
  804fb8:	da001715 	stw	r8,92(sp)
  804fbc:	08078900 	call	807890 <__lshift>
  804fc0:	a80b883a 	mov	r5,r21
  804fc4:	1009883a 	mov	r4,r2
  804fc8:	d8800915 	stw	r2,36(sp)
  804fcc:	08079d80 	call	8079d8 <__mcmp>
  804fd0:	da001717 	ldw	r8,92(sp)
  804fd4:	0081800e 	bge	zero,r2,8055d8 <_dtoa_r+0x11d4>
  804fd8:	b93fffc3 	ldbu	r4,-1(r23)
  804fdc:	b8bfffc4 	addi	r2,r23,-1
  804fe0:	1007883a 	mov	r3,r2
  804fe4:	01800e44 	movi	r6,57
  804fe8:	d9c00717 	ldw	r7,28(sp)
  804fec:	00000506 	br	805004 <_dtoa_r+0xc00>
  804ff0:	18ffffc4 	addi	r3,r3,-1
  804ff4:	11c12326 	beq	r2,r7,805484 <_dtoa_r+0x1080>
  804ff8:	19000003 	ldbu	r4,0(r3)
  804ffc:	102f883a 	mov	r23,r2
  805000:	10bfffc4 	addi	r2,r2,-1
  805004:	21403fcc 	andi	r5,r4,255
  805008:	2940201c 	xori	r5,r5,128
  80500c:	297fe004 	addi	r5,r5,-128
  805010:	29bff726 	beq	r5,r6,804ff0 <__alt_mem_onchip_mem+0xff7fcff0>
  805014:	21000044 	addi	r4,r4,1
  805018:	11000005 	stb	r4,0(r2)
  80501c:	a80b883a 	mov	r5,r21
  805020:	e009883a 	mov	r4,fp
  805024:	08071b80 	call	8071b8 <_Bfree>
  805028:	883ea026 	beq	r17,zero,804aac <__alt_mem_onchip_mem+0xff7fcaac>
  80502c:	90000426 	beq	r18,zero,805040 <_dtoa_r+0xc3c>
  805030:	94400326 	beq	r18,r17,805040 <_dtoa_r+0xc3c>
  805034:	900b883a 	mov	r5,r18
  805038:	e009883a 	mov	r4,fp
  80503c:	08071b80 	call	8071b8 <_Bfree>
  805040:	880b883a 	mov	r5,r17
  805044:	e009883a 	mov	r4,fp
  805048:	08071b80 	call	8071b8 <_Bfree>
  80504c:	003e9706 	br	804aac <__alt_mem_onchip_mem+0xff7fcaac>
  805050:	01800044 	movi	r6,1
  805054:	d9800e15 	stw	r6,56(sp)
  805058:	003d9606 	br	8046b4 <__alt_mem_onchip_mem+0xff7fc6b4>
  80505c:	d8800817 	ldw	r2,32(sp)
  805060:	d8c00517 	ldw	r3,20(sp)
  805064:	d8000d15 	stw	zero,52(sp)
  805068:	10c5c83a 	sub	r2,r2,r3
  80506c:	00c9c83a 	sub	r4,zero,r3
  805070:	d8800815 	stw	r2,32(sp)
  805074:	d9000a15 	stw	r4,40(sp)
  805078:	003d9706 	br	8046d8 <__alt_mem_onchip_mem+0xff7fc6d8>
  80507c:	05adc83a 	sub	r22,zero,r22
  805080:	dd800815 	stw	r22,32(sp)
  805084:	002d883a 	mov	r22,zero
  805088:	003d8e06 	br	8046c4 <__alt_mem_onchip_mem+0xff7fc6c4>
  80508c:	d9000517 	ldw	r4,20(sp)
  805090:	080d65c0 	call	80d65c <__floatsidf>
  805094:	100d883a 	mov	r6,r2
  805098:	180f883a 	mov	r7,r3
  80509c:	a009883a 	mov	r4,r20
  8050a0:	880b883a 	mov	r5,r17
  8050a4:	080c3700 	call	80c370 <__eqdf2>
  8050a8:	103d7126 	beq	r2,zero,804670 <__alt_mem_onchip_mem+0xff7fc670>
  8050ac:	d9c00517 	ldw	r7,20(sp)
  8050b0:	39ffffc4 	addi	r7,r7,-1
  8050b4:	d9c00515 	stw	r7,20(sp)
  8050b8:	003d6d06 	br	804670 <__alt_mem_onchip_mem+0xff7fc670>
  8050bc:	dd400a17 	ldw	r21,40(sp)
  8050c0:	dd000817 	ldw	r20,32(sp)
  8050c4:	0023883a 	mov	r17,zero
  8050c8:	003f4806 	br	804dec <__alt_mem_onchip_mem+0xff7fcdec>
  8050cc:	10e3c83a 	sub	r17,r2,r3
  8050d0:	9448983a 	sll	r4,r18,r17
  8050d4:	003d3206 	br	8045a0 <__alt_mem_onchip_mem+0xff7fc5a0>
  8050d8:	d8000e15 	stw	zero,56(sp)
  8050dc:	003d7506 	br	8046b4 <__alt_mem_onchip_mem+0xff7fc6b4>
  8050e0:	b005883a 	mov	r2,r22
  8050e4:	003f4506 	br	804dfc <__alt_mem_onchip_mem+0xff7fcdfc>
  8050e8:	dc000915 	stw	r16,36(sp)
  8050ec:	d9800a17 	ldw	r6,40(sp)
  8050f0:	d9400917 	ldw	r5,36(sp)
  8050f4:	e009883a 	mov	r4,fp
  8050f8:	08077500 	call	807750 <__pow5mult>
  8050fc:	1021883a 	mov	r16,r2
  805100:	003f5a06 	br	804e6c <__alt_mem_onchip_mem+0xff7fce6c>
  805104:	01c00044 	movi	r7,1
  805108:	d9c00b15 	stw	r7,44(sp)
  80510c:	d8802217 	ldw	r2,136(sp)
  805110:	0081280e 	bge	zero,r2,8055b4 <_dtoa_r+0x11b0>
  805114:	100d883a 	mov	r6,r2
  805118:	1021883a 	mov	r16,r2
  80511c:	d8800c15 	stw	r2,48(sp)
  805120:	d8800615 	stw	r2,24(sp)
  805124:	003d8806 	br	804748 <__alt_mem_onchip_mem+0xff7fc748>
  805128:	d8800617 	ldw	r2,24(sp)
  80512c:	00be9b16 	blt	zero,r2,804b9c <__alt_mem_onchip_mem+0xff7fcb9c>
  805130:	10010f1e 	bne	r2,zero,805570 <_dtoa_r+0x116c>
  805134:	880b883a 	mov	r5,r17
  805138:	000d883a 	mov	r6,zero
  80513c:	01d00534 	movhi	r7,16404
  805140:	8009883a 	mov	r4,r16
  805144:	080c5c80 	call	80c5c8 <__muldf3>
  805148:	900d883a 	mov	r6,r18
  80514c:	980f883a 	mov	r7,r19
  805150:	1009883a 	mov	r4,r2
  805154:	180b883a 	mov	r5,r3
  805158:	080c3f80 	call	80c3f8 <__gedf2>
  80515c:	002b883a 	mov	r21,zero
  805160:	0023883a 	mov	r17,zero
  805164:	1000bf16 	blt	r2,zero,805464 <_dtoa_r+0x1060>
  805168:	d9802217 	ldw	r6,136(sp)
  80516c:	ddc00717 	ldw	r23,28(sp)
  805170:	018c303a 	nor	r6,zero,r6
  805174:	d9800515 	stw	r6,20(sp)
  805178:	a80b883a 	mov	r5,r21
  80517c:	e009883a 	mov	r4,fp
  805180:	08071b80 	call	8071b8 <_Bfree>
  805184:	883e4926 	beq	r17,zero,804aac <__alt_mem_onchip_mem+0xff7fcaac>
  805188:	003fad06 	br	805040 <__alt_mem_onchip_mem+0xff7fd040>
  80518c:	d9c01117 	ldw	r7,68(sp)
  805190:	3801bc26 	beq	r7,zero,805884 <_dtoa_r+0x1480>
  805194:	10810cc4 	addi	r2,r2,1075
  805198:	dd400a17 	ldw	r21,40(sp)
  80519c:	dd000817 	ldw	r20,32(sp)
  8051a0:	003f0a06 	br	804dcc <__alt_mem_onchip_mem+0xff7fcdcc>
  8051a4:	00800704 	movi	r2,28
  8051a8:	d9000817 	ldw	r4,32(sp)
  8051ac:	a0a9883a 	add	r20,r20,r2
  8051b0:	b0ad883a 	add	r22,r22,r2
  8051b4:	2089883a 	add	r4,r4,r2
  8051b8:	d9000815 	stw	r4,32(sp)
  8051bc:	003f5106 	br	804f04 <__alt_mem_onchip_mem+0xff7fcf04>
  8051c0:	d8c00317 	ldw	r3,12(sp)
  8051c4:	b8c1fc0e 	bge	r23,r3,8059b8 <_dtoa_r+0x15b4>
  8051c8:	0027883a 	mov	r19,zero
  8051cc:	b805883a 	mov	r2,r23
  8051d0:	003f3e06 	br	804ecc <__alt_mem_onchip_mem+0xff7fcecc>
  8051d4:	880b883a 	mov	r5,r17
  8051d8:	e009883a 	mov	r4,fp
  8051dc:	000f883a 	mov	r7,zero
  8051e0:	01800284 	movi	r6,10
  8051e4:	08071e00 	call	8071e0 <__multadd>
  8051e8:	d9000c17 	ldw	r4,48(sp)
  8051ec:	1023883a 	mov	r17,r2
  8051f0:	0102040e 	bge	zero,r4,805a04 <_dtoa_r+0x1600>
  8051f4:	d9000615 	stw	r4,24(sp)
  8051f8:	0500050e 	bge	zero,r20,805210 <_dtoa_r+0xe0c>
  8051fc:	880b883a 	mov	r5,r17
  805200:	a00d883a 	mov	r6,r20
  805204:	e009883a 	mov	r4,fp
  805208:	08078900 	call	807890 <__lshift>
  80520c:	1023883a 	mov	r17,r2
  805210:	9801241e 	bne	r19,zero,8056a4 <_dtoa_r+0x12a0>
  805214:	8829883a 	mov	r20,r17
  805218:	d9000617 	ldw	r4,24(sp)
  80521c:	dcc00717 	ldw	r19,28(sp)
  805220:	9480004c 	andi	r18,r18,1
  805224:	20bfffc4 	addi	r2,r4,-1
  805228:	9885883a 	add	r2,r19,r2
  80522c:	d8800415 	stw	r2,16(sp)
  805230:	dc800615 	stw	r18,24(sp)
  805234:	a80b883a 	mov	r5,r21
  805238:	8009883a 	mov	r4,r16
  80523c:	08042040 	call	804204 <quorem>
  805240:	880b883a 	mov	r5,r17
  805244:	8009883a 	mov	r4,r16
  805248:	102f883a 	mov	r23,r2
  80524c:	08079d80 	call	8079d8 <__mcmp>
  805250:	a80b883a 	mov	r5,r21
  805254:	a00d883a 	mov	r6,r20
  805258:	e009883a 	mov	r4,fp
  80525c:	102d883a 	mov	r22,r2
  805260:	0807a380 	call	807a38 <__mdiff>
  805264:	1007883a 	mov	r3,r2
  805268:	10800317 	ldw	r2,12(r2)
  80526c:	bc800c04 	addi	r18,r23,48
  805270:	180b883a 	mov	r5,r3
  805274:	10004e1e 	bne	r2,zero,8053b0 <_dtoa_r+0xfac>
  805278:	8009883a 	mov	r4,r16
  80527c:	d8c01615 	stw	r3,88(sp)
  805280:	08079d80 	call	8079d8 <__mcmp>
  805284:	d8c01617 	ldw	r3,88(sp)
  805288:	e009883a 	mov	r4,fp
  80528c:	d8801615 	stw	r2,88(sp)
  805290:	180b883a 	mov	r5,r3
  805294:	08071b80 	call	8071b8 <_Bfree>
  805298:	d8801617 	ldw	r2,88(sp)
  80529c:	1000041e 	bne	r2,zero,8052b0 <_dtoa_r+0xeac>
  8052a0:	d9800317 	ldw	r6,12(sp)
  8052a4:	3000021e 	bne	r6,zero,8052b0 <_dtoa_r+0xeac>
  8052a8:	d8c00617 	ldw	r3,24(sp)
  8052ac:	18003726 	beq	r3,zero,80538c <_dtoa_r+0xf88>
  8052b0:	b0002016 	blt	r22,zero,805334 <_dtoa_r+0xf30>
  8052b4:	b000041e 	bne	r22,zero,8052c8 <_dtoa_r+0xec4>
  8052b8:	d9000317 	ldw	r4,12(sp)
  8052bc:	2000021e 	bne	r4,zero,8052c8 <_dtoa_r+0xec4>
  8052c0:	d8c00617 	ldw	r3,24(sp)
  8052c4:	18001b26 	beq	r3,zero,805334 <_dtoa_r+0xf30>
  8052c8:	00810716 	blt	zero,r2,8056e8 <_dtoa_r+0x12e4>
  8052cc:	d8c00417 	ldw	r3,16(sp)
  8052d0:	9d800044 	addi	r22,r19,1
  8052d4:	9c800005 	stb	r18,0(r19)
  8052d8:	b02f883a 	mov	r23,r22
  8052dc:	98c10626 	beq	r19,r3,8056f8 <_dtoa_r+0x12f4>
  8052e0:	800b883a 	mov	r5,r16
  8052e4:	000f883a 	mov	r7,zero
  8052e8:	01800284 	movi	r6,10
  8052ec:	e009883a 	mov	r4,fp
  8052f0:	08071e00 	call	8071e0 <__multadd>
  8052f4:	1021883a 	mov	r16,r2
  8052f8:	000f883a 	mov	r7,zero
  8052fc:	01800284 	movi	r6,10
  805300:	880b883a 	mov	r5,r17
  805304:	e009883a 	mov	r4,fp
  805308:	8d002526 	beq	r17,r20,8053a0 <_dtoa_r+0xf9c>
  80530c:	08071e00 	call	8071e0 <__multadd>
  805310:	a00b883a 	mov	r5,r20
  805314:	000f883a 	mov	r7,zero
  805318:	01800284 	movi	r6,10
  80531c:	e009883a 	mov	r4,fp
  805320:	1023883a 	mov	r17,r2
  805324:	08071e00 	call	8071e0 <__multadd>
  805328:	1029883a 	mov	r20,r2
  80532c:	b027883a 	mov	r19,r22
  805330:	003fc006 	br	805234 <__alt_mem_onchip_mem+0xff7fd234>
  805334:	9011883a 	mov	r8,r18
  805338:	00800e0e 	bge	zero,r2,805374 <_dtoa_r+0xf70>
  80533c:	800b883a 	mov	r5,r16
  805340:	01800044 	movi	r6,1
  805344:	e009883a 	mov	r4,fp
  805348:	da001715 	stw	r8,92(sp)
  80534c:	08078900 	call	807890 <__lshift>
  805350:	a80b883a 	mov	r5,r21
  805354:	1009883a 	mov	r4,r2
  805358:	1021883a 	mov	r16,r2
  80535c:	08079d80 	call	8079d8 <__mcmp>
  805360:	da001717 	ldw	r8,92(sp)
  805364:	0081960e 	bge	zero,r2,8059c0 <_dtoa_r+0x15bc>
  805368:	00800e44 	movi	r2,57
  80536c:	40817026 	beq	r8,r2,805930 <_dtoa_r+0x152c>
  805370:	ba000c44 	addi	r8,r23,49
  805374:	8825883a 	mov	r18,r17
  805378:	9dc00044 	addi	r23,r19,1
  80537c:	9a000005 	stb	r8,0(r19)
  805380:	a023883a 	mov	r17,r20
  805384:	dc000915 	stw	r16,36(sp)
  805388:	003f2406 	br	80501c <__alt_mem_onchip_mem+0xff7fd01c>
  80538c:	00800e44 	movi	r2,57
  805390:	9011883a 	mov	r8,r18
  805394:	90816626 	beq	r18,r2,805930 <_dtoa_r+0x152c>
  805398:	05bff516 	blt	zero,r22,805370 <__alt_mem_onchip_mem+0xff7fd370>
  80539c:	003ff506 	br	805374 <__alt_mem_onchip_mem+0xff7fd374>
  8053a0:	08071e00 	call	8071e0 <__multadd>
  8053a4:	1023883a 	mov	r17,r2
  8053a8:	1029883a 	mov	r20,r2
  8053ac:	003fdf06 	br	80532c <__alt_mem_onchip_mem+0xff7fd32c>
  8053b0:	e009883a 	mov	r4,fp
  8053b4:	08071b80 	call	8071b8 <_Bfree>
  8053b8:	00800044 	movi	r2,1
  8053bc:	003fbc06 	br	8052b0 <__alt_mem_onchip_mem+0xff7fd2b0>
  8053c0:	a80b883a 	mov	r5,r21
  8053c4:	8009883a 	mov	r4,r16
  8053c8:	08079d80 	call	8079d8 <__mcmp>
  8053cc:	103edb0e 	bge	r2,zero,804f3c <__alt_mem_onchip_mem+0xff7fcf3c>
  8053d0:	800b883a 	mov	r5,r16
  8053d4:	000f883a 	mov	r7,zero
  8053d8:	01800284 	movi	r6,10
  8053dc:	e009883a 	mov	r4,fp
  8053e0:	08071e00 	call	8071e0 <__multadd>
  8053e4:	1021883a 	mov	r16,r2
  8053e8:	d8800517 	ldw	r2,20(sp)
  8053ec:	d8c00b17 	ldw	r3,44(sp)
  8053f0:	10bfffc4 	addi	r2,r2,-1
  8053f4:	d8800515 	stw	r2,20(sp)
  8053f8:	183f761e 	bne	r3,zero,8051d4 <__alt_mem_onchip_mem+0xff7fd1d4>
  8053fc:	d9000c17 	ldw	r4,48(sp)
  805400:	0101730e 	bge	zero,r4,8059d0 <_dtoa_r+0x15cc>
  805404:	d9000615 	stw	r4,24(sp)
  805408:	003ed006 	br	804f4c <__alt_mem_onchip_mem+0xff7fcf4c>
  80540c:	00800084 	movi	r2,2
  805410:	3081861e 	bne	r6,r2,805a2c <_dtoa_r+0x1628>
  805414:	d8000b15 	stw	zero,44(sp)
  805418:	003f3c06 	br	80510c <__alt_mem_onchip_mem+0xff7fd10c>
  80541c:	dc000917 	ldw	r16,36(sp)
  805420:	003e9206 	br	804e6c <__alt_mem_onchip_mem+0xff7fce6c>
  805424:	d9c00317 	ldw	r7,12(sp)
  805428:	00800084 	movi	r2,2
  80542c:	11fec50e 	bge	r2,r7,804f44 <__alt_mem_onchip_mem+0xff7fcf44>
  805430:	d9000617 	ldw	r4,24(sp)
  805434:	20013c1e 	bne	r4,zero,805928 <_dtoa_r+0x1524>
  805438:	a80b883a 	mov	r5,r21
  80543c:	000f883a 	mov	r7,zero
  805440:	01800144 	movi	r6,5
  805444:	e009883a 	mov	r4,fp
  805448:	08071e00 	call	8071e0 <__multadd>
  80544c:	100b883a 	mov	r5,r2
  805450:	8009883a 	mov	r4,r16
  805454:	102b883a 	mov	r21,r2
  805458:	08079d80 	call	8079d8 <__mcmp>
  80545c:	dc000915 	stw	r16,36(sp)
  805460:	00bf410e 	bge	zero,r2,805168 <__alt_mem_onchip_mem+0xff7fd168>
  805464:	d9c00717 	ldw	r7,28(sp)
  805468:	00800c44 	movi	r2,49
  80546c:	38800005 	stb	r2,0(r7)
  805470:	d8800517 	ldw	r2,20(sp)
  805474:	3dc00044 	addi	r23,r7,1
  805478:	10800044 	addi	r2,r2,1
  80547c:	d8800515 	stw	r2,20(sp)
  805480:	003f3d06 	br	805178 <__alt_mem_onchip_mem+0xff7fd178>
  805484:	d9800517 	ldw	r6,20(sp)
  805488:	d9c00717 	ldw	r7,28(sp)
  80548c:	00800c44 	movi	r2,49
  805490:	31800044 	addi	r6,r6,1
  805494:	d9800515 	stw	r6,20(sp)
  805498:	38800005 	stb	r2,0(r7)
  80549c:	003edf06 	br	80501c <__alt_mem_onchip_mem+0xff7fd01c>
  8054a0:	d8000b15 	stw	zero,44(sp)
  8054a4:	003c9f06 	br	804724 <__alt_mem_onchip_mem+0xff7fc724>
  8054a8:	903e7e1e 	bne	r18,zero,804ea4 <__alt_mem_onchip_mem+0xff7fcea4>
  8054ac:	00800434 	movhi	r2,16
  8054b0:	10bfffc4 	addi	r2,r2,-1
  8054b4:	9884703a 	and	r2,r19,r2
  8054b8:	1000ea1e 	bne	r2,zero,805864 <_dtoa_r+0x1460>
  8054bc:	9cdffc2c 	andhi	r19,r19,32752
  8054c0:	9800e826 	beq	r19,zero,805864 <_dtoa_r+0x1460>
  8054c4:	d9c00817 	ldw	r7,32(sp)
  8054c8:	b5800044 	addi	r22,r22,1
  8054cc:	04c00044 	movi	r19,1
  8054d0:	39c00044 	addi	r7,r7,1
  8054d4:	d9c00815 	stw	r7,32(sp)
  8054d8:	d8800d17 	ldw	r2,52(sp)
  8054dc:	103e721e 	bne	r2,zero,804ea8 <__alt_mem_onchip_mem+0xff7fcea8>
  8054e0:	00800044 	movi	r2,1
  8054e4:	003e7906 	br	804ecc <__alt_mem_onchip_mem+0xff7fcecc>
  8054e8:	8009883a 	mov	r4,r16
  8054ec:	080d65c0 	call	80d65c <__floatsidf>
  8054f0:	d9800f17 	ldw	r6,60(sp)
  8054f4:	d9c01017 	ldw	r7,64(sp)
  8054f8:	1009883a 	mov	r4,r2
  8054fc:	180b883a 	mov	r5,r3
  805500:	080c5c80 	call	80c5c8 <__muldf3>
  805504:	000d883a 	mov	r6,zero
  805508:	01d00734 	movhi	r7,16412
  80550c:	1009883a 	mov	r4,r2
  805510:	180b883a 	mov	r5,r3
  805514:	080b1dc0 	call	80b1dc <__adddf3>
  805518:	047f3034 	movhi	r17,64704
  80551c:	1021883a 	mov	r16,r2
  805520:	1c63883a 	add	r17,r3,r17
  805524:	d9000f17 	ldw	r4,60(sp)
  805528:	d9401017 	ldw	r5,64(sp)
  80552c:	000d883a 	mov	r6,zero
  805530:	01d00534 	movhi	r7,16404
  805534:	080cce00 	call	80cce0 <__subdf3>
  805538:	800d883a 	mov	r6,r16
  80553c:	880f883a 	mov	r7,r17
  805540:	1009883a 	mov	r4,r2
  805544:	180b883a 	mov	r5,r3
  805548:	102b883a 	mov	r21,r2
  80554c:	1829883a 	mov	r20,r3
  805550:	080c3f80 	call	80c3f8 <__gedf2>
  805554:	00806c16 	blt	zero,r2,805708 <_dtoa_r+0x1304>
  805558:	89e0003c 	xorhi	r7,r17,32768
  80555c:	800d883a 	mov	r6,r16
  805560:	a809883a 	mov	r4,r21
  805564:	a00b883a 	mov	r5,r20
  805568:	080c4d40 	call	80c4d4 <__ledf2>
  80556c:	103d7e0e 	bge	r2,zero,804b68 <__alt_mem_onchip_mem+0xff7fcb68>
  805570:	002b883a 	mov	r21,zero
  805574:	0023883a 	mov	r17,zero
  805578:	003efb06 	br	805168 <__alt_mem_onchip_mem+0xff7fd168>
  80557c:	d8800717 	ldw	r2,28(sp)
  805580:	003bd006 	br	8044c4 <__alt_mem_onchip_mem+0xff7fc4c4>
  805584:	d9000a17 	ldw	r4,40(sp)
  805588:	d9800d17 	ldw	r6,52(sp)
  80558c:	dd400a15 	stw	r21,40(sp)
  805590:	a905c83a 	sub	r2,r21,r4
  805594:	308d883a 	add	r6,r6,r2
  805598:	d9800d15 	stw	r6,52(sp)
  80559c:	002b883a 	mov	r21,zero
  8055a0:	003e0606 	br	804dbc <__alt_mem_onchip_mem+0xff7fcdbc>
  8055a4:	9023883a 	mov	r17,r18
  8055a8:	9829883a 	mov	r20,r19
  8055ac:	04000084 	movi	r16,2
  8055b0:	003c9206 	br	8047fc <__alt_mem_onchip_mem+0xff7fc7fc>
  8055b4:	04000044 	movi	r16,1
  8055b8:	dc000c15 	stw	r16,48(sp)
  8055bc:	dc000615 	stw	r16,24(sp)
  8055c0:	dc002215 	stw	r16,136(sp)
  8055c4:	e0001115 	stw	zero,68(fp)
  8055c8:	000b883a 	mov	r5,zero
  8055cc:	003c6906 	br	804774 <__alt_mem_onchip_mem+0xff7fc774>
  8055d0:	3021883a 	mov	r16,r6
  8055d4:	003ffb06 	br	8055c4 <__alt_mem_onchip_mem+0xff7fd5c4>
  8055d8:	1000021e 	bne	r2,zero,8055e4 <_dtoa_r+0x11e0>
  8055dc:	4200004c 	andi	r8,r8,1
  8055e0:	403e7d1e 	bne	r8,zero,804fd8 <__alt_mem_onchip_mem+0xff7fcfd8>
  8055e4:	01000c04 	movi	r4,48
  8055e8:	00000106 	br	8055f0 <_dtoa_r+0x11ec>
  8055ec:	102f883a 	mov	r23,r2
  8055f0:	b8bfffc4 	addi	r2,r23,-1
  8055f4:	10c00007 	ldb	r3,0(r2)
  8055f8:	193ffc26 	beq	r3,r4,8055ec <__alt_mem_onchip_mem+0xff7fd5ec>
  8055fc:	003e8706 	br	80501c <__alt_mem_onchip_mem+0xff7fd01c>
  805600:	d8800517 	ldw	r2,20(sp)
  805604:	00a3c83a 	sub	r17,zero,r2
  805608:	8800a426 	beq	r17,zero,80589c <_dtoa_r+0x1498>
  80560c:	888003cc 	andi	r2,r17,15
  805610:	100490fa 	slli	r2,r2,3
  805614:	00c02074 	movhi	r3,129
  805618:	18c6e104 	addi	r3,r3,7044
  80561c:	1885883a 	add	r2,r3,r2
  805620:	11800017 	ldw	r6,0(r2)
  805624:	11c00117 	ldw	r7,4(r2)
  805628:	9009883a 	mov	r4,r18
  80562c:	980b883a 	mov	r5,r19
  805630:	8823d13a 	srai	r17,r17,4
  805634:	080c5c80 	call	80c5c8 <__muldf3>
  805638:	d8800f15 	stw	r2,60(sp)
  80563c:	d8c01015 	stw	r3,64(sp)
  805640:	8800e826 	beq	r17,zero,8059e4 <_dtoa_r+0x15e0>
  805644:	05002074 	movhi	r20,129
  805648:	a506d704 	addi	r20,r20,7004
  80564c:	04000084 	movi	r16,2
  805650:	8980004c 	andi	r6,r17,1
  805654:	1009883a 	mov	r4,r2
  805658:	8823d07a 	srai	r17,r17,1
  80565c:	180b883a 	mov	r5,r3
  805660:	30000426 	beq	r6,zero,805674 <_dtoa_r+0x1270>
  805664:	a1800017 	ldw	r6,0(r20)
  805668:	a1c00117 	ldw	r7,4(r20)
  80566c:	84000044 	addi	r16,r16,1
  805670:	080c5c80 	call	80c5c8 <__muldf3>
  805674:	a5000204 	addi	r20,r20,8
  805678:	883ff51e 	bne	r17,zero,805650 <__alt_mem_onchip_mem+0xff7fd650>
  80567c:	d8800f15 	stw	r2,60(sp)
  805680:	d8c01015 	stw	r3,64(sp)
  805684:	003c7606 	br	804860 <__alt_mem_onchip_mem+0xff7fc860>
  805688:	00c00c04 	movi	r3,48
  80568c:	10c00005 	stb	r3,0(r2)
  805690:	d8c00517 	ldw	r3,20(sp)
  805694:	bd3fffc3 	ldbu	r20,-1(r23)
  805698:	18c00044 	addi	r3,r3,1
  80569c:	d8c00515 	stw	r3,20(sp)
  8056a0:	003db906 	br	804d88 <__alt_mem_onchip_mem+0xff7fcd88>
  8056a4:	89400117 	ldw	r5,4(r17)
  8056a8:	e009883a 	mov	r4,fp
  8056ac:	08071100 	call	807110 <_Balloc>
  8056b0:	89800417 	ldw	r6,16(r17)
  8056b4:	89400304 	addi	r5,r17,12
  8056b8:	11000304 	addi	r4,r2,12
  8056bc:	31800084 	addi	r6,r6,2
  8056c0:	318d883a 	add	r6,r6,r6
  8056c4:	318d883a 	add	r6,r6,r6
  8056c8:	1027883a 	mov	r19,r2
  8056cc:	0806e6c0 	call	806e6c <memcpy>
  8056d0:	01800044 	movi	r6,1
  8056d4:	980b883a 	mov	r5,r19
  8056d8:	e009883a 	mov	r4,fp
  8056dc:	08078900 	call	807890 <__lshift>
  8056e0:	1029883a 	mov	r20,r2
  8056e4:	003ecc06 	br	805218 <__alt_mem_onchip_mem+0xff7fd218>
  8056e8:	00800e44 	movi	r2,57
  8056ec:	90809026 	beq	r18,r2,805930 <_dtoa_r+0x152c>
  8056f0:	92000044 	addi	r8,r18,1
  8056f4:	003f1f06 	br	805374 <__alt_mem_onchip_mem+0xff7fd374>
  8056f8:	9011883a 	mov	r8,r18
  8056fc:	8825883a 	mov	r18,r17
  805700:	a023883a 	mov	r17,r20
  805704:	003e2906 	br	804fac <__alt_mem_onchip_mem+0xff7fcfac>
  805708:	002b883a 	mov	r21,zero
  80570c:	0023883a 	mov	r17,zero
  805710:	003f5406 	br	805464 <__alt_mem_onchip_mem+0xff7fd464>
  805714:	61bfffc4 	addi	r6,r12,-1
  805718:	300490fa 	slli	r2,r6,3
  80571c:	00c02074 	movhi	r3,129
  805720:	18c6e104 	addi	r3,r3,7044
  805724:	1885883a 	add	r2,r3,r2
  805728:	11000017 	ldw	r4,0(r2)
  80572c:	11400117 	ldw	r5,4(r2)
  805730:	d8800717 	ldw	r2,28(sp)
  805734:	880f883a 	mov	r7,r17
  805738:	d9801215 	stw	r6,72(sp)
  80573c:	800d883a 	mov	r6,r16
  805740:	db001615 	stw	r12,88(sp)
  805744:	15c00044 	addi	r23,r2,1
  805748:	080c5c80 	call	80c5c8 <__muldf3>
  80574c:	d9401017 	ldw	r5,64(sp)
  805750:	d9000f17 	ldw	r4,60(sp)
  805754:	d8c01515 	stw	r3,84(sp)
  805758:	d8801415 	stw	r2,80(sp)
  80575c:	080d5dc0 	call	80d5dc <__fixdfsi>
  805760:	1009883a 	mov	r4,r2
  805764:	1021883a 	mov	r16,r2
  805768:	080d65c0 	call	80d65c <__floatsidf>
  80576c:	d9000f17 	ldw	r4,60(sp)
  805770:	d9401017 	ldw	r5,64(sp)
  805774:	100d883a 	mov	r6,r2
  805778:	180f883a 	mov	r7,r3
  80577c:	080cce00 	call	80cce0 <__subdf3>
  805780:	1829883a 	mov	r20,r3
  805784:	d8c00717 	ldw	r3,28(sp)
  805788:	84000c04 	addi	r16,r16,48
  80578c:	1023883a 	mov	r17,r2
  805790:	1c000005 	stb	r16,0(r3)
  805794:	db001617 	ldw	r12,88(sp)
  805798:	00800044 	movi	r2,1
  80579c:	60802226 	beq	r12,r2,805828 <_dtoa_r+0x1424>
  8057a0:	d9c00717 	ldw	r7,28(sp)
  8057a4:	8805883a 	mov	r2,r17
  8057a8:	b82b883a 	mov	r21,r23
  8057ac:	3b19883a 	add	r12,r7,r12
  8057b0:	6023883a 	mov	r17,r12
  8057b4:	a007883a 	mov	r3,r20
  8057b8:	dc800f15 	stw	r18,60(sp)
  8057bc:	000d883a 	mov	r6,zero
  8057c0:	01d00934 	movhi	r7,16420
  8057c4:	1009883a 	mov	r4,r2
  8057c8:	180b883a 	mov	r5,r3
  8057cc:	080c5c80 	call	80c5c8 <__muldf3>
  8057d0:	180b883a 	mov	r5,r3
  8057d4:	1009883a 	mov	r4,r2
  8057d8:	1829883a 	mov	r20,r3
  8057dc:	1025883a 	mov	r18,r2
  8057e0:	080d5dc0 	call	80d5dc <__fixdfsi>
  8057e4:	1009883a 	mov	r4,r2
  8057e8:	1021883a 	mov	r16,r2
  8057ec:	080d65c0 	call	80d65c <__floatsidf>
  8057f0:	100d883a 	mov	r6,r2
  8057f4:	180f883a 	mov	r7,r3
  8057f8:	9009883a 	mov	r4,r18
  8057fc:	a00b883a 	mov	r5,r20
  805800:	84000c04 	addi	r16,r16,48
  805804:	080cce00 	call	80cce0 <__subdf3>
  805808:	ad400044 	addi	r21,r21,1
  80580c:	ac3fffc5 	stb	r16,-1(r21)
  805810:	ac7fea1e 	bne	r21,r17,8057bc <__alt_mem_onchip_mem+0xff7fd7bc>
  805814:	1023883a 	mov	r17,r2
  805818:	d8801217 	ldw	r2,72(sp)
  80581c:	dc800f17 	ldw	r18,60(sp)
  805820:	1829883a 	mov	r20,r3
  805824:	b8af883a 	add	r23,r23,r2
  805828:	d9001417 	ldw	r4,80(sp)
  80582c:	d9401517 	ldw	r5,84(sp)
  805830:	000d883a 	mov	r6,zero
  805834:	01cff834 	movhi	r7,16352
  805838:	080b1dc0 	call	80b1dc <__adddf3>
  80583c:	880d883a 	mov	r6,r17
  805840:	a00f883a 	mov	r7,r20
  805844:	1009883a 	mov	r4,r2
  805848:	180b883a 	mov	r5,r3
  80584c:	080c4d40 	call	80c4d4 <__ledf2>
  805850:	10003e0e 	bge	r2,zero,80594c <_dtoa_r+0x1548>
  805854:	d9001317 	ldw	r4,76(sp)
  805858:	bd3fffc3 	ldbu	r20,-1(r23)
  80585c:	d9000515 	stw	r4,20(sp)
  805860:	003d3b06 	br	804d50 <__alt_mem_onchip_mem+0xff7fcd50>
  805864:	0027883a 	mov	r19,zero
  805868:	003f1b06 	br	8054d8 <__alt_mem_onchip_mem+0xff7fd4d8>
  80586c:	d8800817 	ldw	r2,32(sp)
  805870:	11e9c83a 	sub	r20,r2,r7
  805874:	0005883a 	mov	r2,zero
  805878:	003d5406 	br	804dcc <__alt_mem_onchip_mem+0xff7fcdcc>
  80587c:	00800044 	movi	r2,1
  805880:	003dc706 	br	804fa0 <__alt_mem_onchip_mem+0xff7fcfa0>
  805884:	d8c00217 	ldw	r3,8(sp)
  805888:	00800d84 	movi	r2,54
  80588c:	dd400a17 	ldw	r21,40(sp)
  805890:	10c5c83a 	sub	r2,r2,r3
  805894:	dd000817 	ldw	r20,32(sp)
  805898:	003d4c06 	br	804dcc <__alt_mem_onchip_mem+0xff7fcdcc>
  80589c:	dc800f15 	stw	r18,60(sp)
  8058a0:	dcc01015 	stw	r19,64(sp)
  8058a4:	04000084 	movi	r16,2
  8058a8:	003bed06 	br	804860 <__alt_mem_onchip_mem+0xff7fc860>
  8058ac:	d9000617 	ldw	r4,24(sp)
  8058b0:	203f0d26 	beq	r4,zero,8054e8 <__alt_mem_onchip_mem+0xff7fd4e8>
  8058b4:	d9800c17 	ldw	r6,48(sp)
  8058b8:	01bcab0e 	bge	zero,r6,804b68 <__alt_mem_onchip_mem+0xff7fcb68>
  8058bc:	d9401017 	ldw	r5,64(sp)
  8058c0:	d9000f17 	ldw	r4,60(sp)
  8058c4:	000d883a 	mov	r6,zero
  8058c8:	01d00934 	movhi	r7,16420
  8058cc:	080c5c80 	call	80c5c8 <__muldf3>
  8058d0:	81000044 	addi	r4,r16,1
  8058d4:	d8800f15 	stw	r2,60(sp)
  8058d8:	d8c01015 	stw	r3,64(sp)
  8058dc:	080d65c0 	call	80d65c <__floatsidf>
  8058e0:	d9800f17 	ldw	r6,60(sp)
  8058e4:	d9c01017 	ldw	r7,64(sp)
  8058e8:	1009883a 	mov	r4,r2
  8058ec:	180b883a 	mov	r5,r3
  8058f0:	080c5c80 	call	80c5c8 <__muldf3>
  8058f4:	01d00734 	movhi	r7,16412
  8058f8:	000d883a 	mov	r6,zero
  8058fc:	1009883a 	mov	r4,r2
  805900:	180b883a 	mov	r5,r3
  805904:	080b1dc0 	call	80b1dc <__adddf3>
  805908:	d9c00517 	ldw	r7,20(sp)
  80590c:	047f3034 	movhi	r17,64704
  805910:	1021883a 	mov	r16,r2
  805914:	39ffffc4 	addi	r7,r7,-1
  805918:	d9c01315 	stw	r7,76(sp)
  80591c:	1c63883a 	add	r17,r3,r17
  805920:	db000c17 	ldw	r12,48(sp)
  805924:	003bea06 	br	8048d0 <__alt_mem_onchip_mem+0xff7fc8d0>
  805928:	dc000915 	stw	r16,36(sp)
  80592c:	003e0e06 	br	805168 <__alt_mem_onchip_mem+0xff7fd168>
  805930:	01000e44 	movi	r4,57
  805934:	8825883a 	mov	r18,r17
  805938:	9dc00044 	addi	r23,r19,1
  80593c:	99000005 	stb	r4,0(r19)
  805940:	a023883a 	mov	r17,r20
  805944:	dc000915 	stw	r16,36(sp)
  805948:	003da406 	br	804fdc <__alt_mem_onchip_mem+0xff7fcfdc>
  80594c:	d9801417 	ldw	r6,80(sp)
  805950:	d9c01517 	ldw	r7,84(sp)
  805954:	0009883a 	mov	r4,zero
  805958:	014ff834 	movhi	r5,16352
  80595c:	080cce00 	call	80cce0 <__subdf3>
  805960:	880d883a 	mov	r6,r17
  805964:	a00f883a 	mov	r7,r20
  805968:	1009883a 	mov	r4,r2
  80596c:	180b883a 	mov	r5,r3
  805970:	080c3f80 	call	80c3f8 <__gedf2>
  805974:	00bc7c0e 	bge	zero,r2,804b68 <__alt_mem_onchip_mem+0xff7fcb68>
  805978:	01000c04 	movi	r4,48
  80597c:	00000106 	br	805984 <_dtoa_r+0x1580>
  805980:	102f883a 	mov	r23,r2
  805984:	b8bfffc4 	addi	r2,r23,-1
  805988:	10c00007 	ldb	r3,0(r2)
  80598c:	193ffc26 	beq	r3,r4,805980 <__alt_mem_onchip_mem+0xff7fd980>
  805990:	d9801317 	ldw	r6,76(sp)
  805994:	d9800515 	stw	r6,20(sp)
  805998:	003c4406 	br	804aac <__alt_mem_onchip_mem+0xff7fcaac>
  80599c:	d9801317 	ldw	r6,76(sp)
  8059a0:	d9800515 	stw	r6,20(sp)
  8059a4:	003cea06 	br	804d50 <__alt_mem_onchip_mem+0xff7fcd50>
  8059a8:	dd800f17 	ldw	r22,60(sp)
  8059ac:	dcc01017 	ldw	r19,64(sp)
  8059b0:	dc801217 	ldw	r18,72(sp)
  8059b4:	003c6c06 	br	804b68 <__alt_mem_onchip_mem+0xff7fcb68>
  8059b8:	903e031e 	bne	r18,zero,8051c8 <__alt_mem_onchip_mem+0xff7fd1c8>
  8059bc:	003ebb06 	br	8054ac <__alt_mem_onchip_mem+0xff7fd4ac>
  8059c0:	103e6c1e 	bne	r2,zero,805374 <__alt_mem_onchip_mem+0xff7fd374>
  8059c4:	4080004c 	andi	r2,r8,1
  8059c8:	103e6a26 	beq	r2,zero,805374 <__alt_mem_onchip_mem+0xff7fd374>
  8059cc:	003e6606 	br	805368 <__alt_mem_onchip_mem+0xff7fd368>
  8059d0:	d8c00317 	ldw	r3,12(sp)
  8059d4:	00800084 	movi	r2,2
  8059d8:	10c02916 	blt	r2,r3,805a80 <_dtoa_r+0x167c>
  8059dc:	d9000c17 	ldw	r4,48(sp)
  8059e0:	003e8806 	br	805404 <__alt_mem_onchip_mem+0xff7fd404>
  8059e4:	04000084 	movi	r16,2
  8059e8:	003b9d06 	br	804860 <__alt_mem_onchip_mem+0xff7fc860>
  8059ec:	d9001317 	ldw	r4,76(sp)
  8059f0:	d9000515 	stw	r4,20(sp)
  8059f4:	003cd606 	br	804d50 <__alt_mem_onchip_mem+0xff7fcd50>
  8059f8:	d8801317 	ldw	r2,76(sp)
  8059fc:	d8800515 	stw	r2,20(sp)
  805a00:	003c2a06 	br	804aac <__alt_mem_onchip_mem+0xff7fcaac>
  805a04:	d9800317 	ldw	r6,12(sp)
  805a08:	00800084 	movi	r2,2
  805a0c:	11801516 	blt	r2,r6,805a64 <_dtoa_r+0x1660>
  805a10:	d9c00c17 	ldw	r7,48(sp)
  805a14:	d9c00615 	stw	r7,24(sp)
  805a18:	003df706 	br	8051f8 <__alt_mem_onchip_mem+0xff7fd1f8>
  805a1c:	193d3926 	beq	r3,r4,804f04 <__alt_mem_onchip_mem+0xff7fcf04>
  805a20:	00c00f04 	movi	r3,60
  805a24:	1885c83a 	sub	r2,r3,r2
  805a28:	003ddf06 	br	8051a8 <__alt_mem_onchip_mem+0xff7fd1a8>
  805a2c:	e009883a 	mov	r4,fp
  805a30:	e0001115 	stw	zero,68(fp)
  805a34:	000b883a 	mov	r5,zero
  805a38:	08071100 	call	807110 <_Balloc>
  805a3c:	d8800715 	stw	r2,28(sp)
  805a40:	d8c00717 	ldw	r3,28(sp)
  805a44:	00bfffc4 	movi	r2,-1
  805a48:	01000044 	movi	r4,1
  805a4c:	d8800c15 	stw	r2,48(sp)
  805a50:	e0c01015 	stw	r3,64(fp)
  805a54:	d9000b15 	stw	r4,44(sp)
  805a58:	d8800615 	stw	r2,24(sp)
  805a5c:	d8002215 	stw	zero,136(sp)
  805a60:	003c4106 	br	804b68 <__alt_mem_onchip_mem+0xff7fcb68>
  805a64:	d8c00c17 	ldw	r3,48(sp)
  805a68:	d8c00615 	stw	r3,24(sp)
  805a6c:	003e7006 	br	805430 <__alt_mem_onchip_mem+0xff7fd430>
  805a70:	04400044 	movi	r17,1
  805a74:	003b2006 	br	8046f8 <__alt_mem_onchip_mem+0xff7fc6f8>
  805a78:	000b883a 	mov	r5,zero
  805a7c:	003b3d06 	br	804774 <__alt_mem_onchip_mem+0xff7fc774>
  805a80:	d8800c17 	ldw	r2,48(sp)
  805a84:	d8800615 	stw	r2,24(sp)
  805a88:	003e6906 	br	805430 <__alt_mem_onchip_mem+0xff7fd430>

00805a8c <__sflush_r>:
  805a8c:	2880030b 	ldhu	r2,12(r5)
  805a90:	defffb04 	addi	sp,sp,-20
  805a94:	dcc00315 	stw	r19,12(sp)
  805a98:	dc400115 	stw	r17,4(sp)
  805a9c:	dfc00415 	stw	ra,16(sp)
  805aa0:	dc800215 	stw	r18,8(sp)
  805aa4:	dc000015 	stw	r16,0(sp)
  805aa8:	10c0020c 	andi	r3,r2,8
  805aac:	2823883a 	mov	r17,r5
  805ab0:	2027883a 	mov	r19,r4
  805ab4:	1800311e 	bne	r3,zero,805b7c <__sflush_r+0xf0>
  805ab8:	28c00117 	ldw	r3,4(r5)
  805abc:	10820014 	ori	r2,r2,2048
  805ac0:	2880030d 	sth	r2,12(r5)
  805ac4:	00c04b0e 	bge	zero,r3,805bf4 <__sflush_r+0x168>
  805ac8:	8a000a17 	ldw	r8,40(r17)
  805acc:	40002326 	beq	r8,zero,805b5c <__sflush_r+0xd0>
  805ad0:	9c000017 	ldw	r16,0(r19)
  805ad4:	10c4000c 	andi	r3,r2,4096
  805ad8:	98000015 	stw	zero,0(r19)
  805adc:	18004826 	beq	r3,zero,805c00 <__sflush_r+0x174>
  805ae0:	89801417 	ldw	r6,80(r17)
  805ae4:	10c0010c 	andi	r3,r2,4
  805ae8:	18000626 	beq	r3,zero,805b04 <__sflush_r+0x78>
  805aec:	88c00117 	ldw	r3,4(r17)
  805af0:	88800c17 	ldw	r2,48(r17)
  805af4:	30cdc83a 	sub	r6,r6,r3
  805af8:	10000226 	beq	r2,zero,805b04 <__sflush_r+0x78>
  805afc:	88800f17 	ldw	r2,60(r17)
  805b00:	308dc83a 	sub	r6,r6,r2
  805b04:	89400717 	ldw	r5,28(r17)
  805b08:	000f883a 	mov	r7,zero
  805b0c:	9809883a 	mov	r4,r19
  805b10:	403ee83a 	callr	r8
  805b14:	00ffffc4 	movi	r3,-1
  805b18:	10c04426 	beq	r2,r3,805c2c <__sflush_r+0x1a0>
  805b1c:	88c0030b 	ldhu	r3,12(r17)
  805b20:	89000417 	ldw	r4,16(r17)
  805b24:	88000115 	stw	zero,4(r17)
  805b28:	197dffcc 	andi	r5,r3,63487
  805b2c:	8940030d 	sth	r5,12(r17)
  805b30:	89000015 	stw	r4,0(r17)
  805b34:	18c4000c 	andi	r3,r3,4096
  805b38:	18002c1e 	bne	r3,zero,805bec <__sflush_r+0x160>
  805b3c:	89400c17 	ldw	r5,48(r17)
  805b40:	9c000015 	stw	r16,0(r19)
  805b44:	28000526 	beq	r5,zero,805b5c <__sflush_r+0xd0>
  805b48:	88801004 	addi	r2,r17,64
  805b4c:	28800226 	beq	r5,r2,805b58 <__sflush_r+0xcc>
  805b50:	9809883a 	mov	r4,r19
  805b54:	08062a40 	call	8062a4 <_free_r>
  805b58:	88000c15 	stw	zero,48(r17)
  805b5c:	0005883a 	mov	r2,zero
  805b60:	dfc00417 	ldw	ra,16(sp)
  805b64:	dcc00317 	ldw	r19,12(sp)
  805b68:	dc800217 	ldw	r18,8(sp)
  805b6c:	dc400117 	ldw	r17,4(sp)
  805b70:	dc000017 	ldw	r16,0(sp)
  805b74:	dec00504 	addi	sp,sp,20
  805b78:	f800283a 	ret
  805b7c:	2c800417 	ldw	r18,16(r5)
  805b80:	903ff626 	beq	r18,zero,805b5c <__alt_mem_onchip_mem+0xff7fdb5c>
  805b84:	2c000017 	ldw	r16,0(r5)
  805b88:	108000cc 	andi	r2,r2,3
  805b8c:	2c800015 	stw	r18,0(r5)
  805b90:	84a1c83a 	sub	r16,r16,r18
  805b94:	1000131e 	bne	r2,zero,805be4 <__sflush_r+0x158>
  805b98:	28800517 	ldw	r2,20(r5)
  805b9c:	88800215 	stw	r2,8(r17)
  805ba0:	04000316 	blt	zero,r16,805bb0 <__sflush_r+0x124>
  805ba4:	003fed06 	br	805b5c <__alt_mem_onchip_mem+0xff7fdb5c>
  805ba8:	90a5883a 	add	r18,r18,r2
  805bac:	043feb0e 	bge	zero,r16,805b5c <__alt_mem_onchip_mem+0xff7fdb5c>
  805bb0:	88800917 	ldw	r2,36(r17)
  805bb4:	89400717 	ldw	r5,28(r17)
  805bb8:	800f883a 	mov	r7,r16
  805bbc:	900d883a 	mov	r6,r18
  805bc0:	9809883a 	mov	r4,r19
  805bc4:	103ee83a 	callr	r2
  805bc8:	80a1c83a 	sub	r16,r16,r2
  805bcc:	00bff616 	blt	zero,r2,805ba8 <__alt_mem_onchip_mem+0xff7fdba8>
  805bd0:	88c0030b 	ldhu	r3,12(r17)
  805bd4:	00bfffc4 	movi	r2,-1
  805bd8:	18c01014 	ori	r3,r3,64
  805bdc:	88c0030d 	sth	r3,12(r17)
  805be0:	003fdf06 	br	805b60 <__alt_mem_onchip_mem+0xff7fdb60>
  805be4:	0005883a 	mov	r2,zero
  805be8:	003fec06 	br	805b9c <__alt_mem_onchip_mem+0xff7fdb9c>
  805bec:	88801415 	stw	r2,80(r17)
  805bf0:	003fd206 	br	805b3c <__alt_mem_onchip_mem+0xff7fdb3c>
  805bf4:	28c00f17 	ldw	r3,60(r5)
  805bf8:	00ffb316 	blt	zero,r3,805ac8 <__alt_mem_onchip_mem+0xff7fdac8>
  805bfc:	003fd706 	br	805b5c <__alt_mem_onchip_mem+0xff7fdb5c>
  805c00:	89400717 	ldw	r5,28(r17)
  805c04:	000d883a 	mov	r6,zero
  805c08:	01c00044 	movi	r7,1
  805c0c:	9809883a 	mov	r4,r19
  805c10:	403ee83a 	callr	r8
  805c14:	100d883a 	mov	r6,r2
  805c18:	00bfffc4 	movi	r2,-1
  805c1c:	30801426 	beq	r6,r2,805c70 <__sflush_r+0x1e4>
  805c20:	8880030b 	ldhu	r2,12(r17)
  805c24:	8a000a17 	ldw	r8,40(r17)
  805c28:	003fae06 	br	805ae4 <__alt_mem_onchip_mem+0xff7fdae4>
  805c2c:	98c00017 	ldw	r3,0(r19)
  805c30:	183fba26 	beq	r3,zero,805b1c <__alt_mem_onchip_mem+0xff7fdb1c>
  805c34:	01000744 	movi	r4,29
  805c38:	19000626 	beq	r3,r4,805c54 <__sflush_r+0x1c8>
  805c3c:	01000584 	movi	r4,22
  805c40:	19000426 	beq	r3,r4,805c54 <__sflush_r+0x1c8>
  805c44:	88c0030b 	ldhu	r3,12(r17)
  805c48:	18c01014 	ori	r3,r3,64
  805c4c:	88c0030d 	sth	r3,12(r17)
  805c50:	003fc306 	br	805b60 <__alt_mem_onchip_mem+0xff7fdb60>
  805c54:	8880030b 	ldhu	r2,12(r17)
  805c58:	88c00417 	ldw	r3,16(r17)
  805c5c:	88000115 	stw	zero,4(r17)
  805c60:	10bdffcc 	andi	r2,r2,63487
  805c64:	8880030d 	sth	r2,12(r17)
  805c68:	88c00015 	stw	r3,0(r17)
  805c6c:	003fb306 	br	805b3c <__alt_mem_onchip_mem+0xff7fdb3c>
  805c70:	98800017 	ldw	r2,0(r19)
  805c74:	103fea26 	beq	r2,zero,805c20 <__alt_mem_onchip_mem+0xff7fdc20>
  805c78:	00c00744 	movi	r3,29
  805c7c:	10c00226 	beq	r2,r3,805c88 <__sflush_r+0x1fc>
  805c80:	00c00584 	movi	r3,22
  805c84:	10c0031e 	bne	r2,r3,805c94 <__sflush_r+0x208>
  805c88:	9c000015 	stw	r16,0(r19)
  805c8c:	0005883a 	mov	r2,zero
  805c90:	003fb306 	br	805b60 <__alt_mem_onchip_mem+0xff7fdb60>
  805c94:	88c0030b 	ldhu	r3,12(r17)
  805c98:	3005883a 	mov	r2,r6
  805c9c:	18c01014 	ori	r3,r3,64
  805ca0:	88c0030d 	sth	r3,12(r17)
  805ca4:	003fae06 	br	805b60 <__alt_mem_onchip_mem+0xff7fdb60>

00805ca8 <_fflush_r>:
  805ca8:	defffd04 	addi	sp,sp,-12
  805cac:	dc000115 	stw	r16,4(sp)
  805cb0:	dfc00215 	stw	ra,8(sp)
  805cb4:	2021883a 	mov	r16,r4
  805cb8:	20000226 	beq	r4,zero,805cc4 <_fflush_r+0x1c>
  805cbc:	20800e17 	ldw	r2,56(r4)
  805cc0:	10000c26 	beq	r2,zero,805cf4 <_fflush_r+0x4c>
  805cc4:	2880030f 	ldh	r2,12(r5)
  805cc8:	1000051e 	bne	r2,zero,805ce0 <_fflush_r+0x38>
  805ccc:	0005883a 	mov	r2,zero
  805cd0:	dfc00217 	ldw	ra,8(sp)
  805cd4:	dc000117 	ldw	r16,4(sp)
  805cd8:	dec00304 	addi	sp,sp,12
  805cdc:	f800283a 	ret
  805ce0:	8009883a 	mov	r4,r16
  805ce4:	dfc00217 	ldw	ra,8(sp)
  805ce8:	dc000117 	ldw	r16,4(sp)
  805cec:	dec00304 	addi	sp,sp,12
  805cf0:	0805a8c1 	jmpi	805a8c <__sflush_r>
  805cf4:	d9400015 	stw	r5,0(sp)
  805cf8:	08060840 	call	806084 <__sinit>
  805cfc:	d9400017 	ldw	r5,0(sp)
  805d00:	003ff006 	br	805cc4 <__alt_mem_onchip_mem+0xff7fdcc4>

00805d04 <fflush>:
  805d04:	20000526 	beq	r4,zero,805d1c <fflush+0x18>
  805d08:	00802074 	movhi	r2,129
  805d0c:	108f4904 	addi	r2,r2,15652
  805d10:	200b883a 	mov	r5,r4
  805d14:	11000017 	ldw	r4,0(r2)
  805d18:	0805ca81 	jmpi	805ca8 <_fflush_r>
  805d1c:	00802074 	movhi	r2,129
  805d20:	108f4804 	addi	r2,r2,15648
  805d24:	11000017 	ldw	r4,0(r2)
  805d28:	01402034 	movhi	r5,128
  805d2c:	29572a04 	addi	r5,r5,23720
  805d30:	0806b341 	jmpi	806b34 <_fwalk_reent>

00805d34 <__fp_unlock>:
  805d34:	0005883a 	mov	r2,zero
  805d38:	f800283a 	ret

00805d3c <_cleanup_r>:
  805d3c:	01402074 	movhi	r5,129
  805d40:	2967cb04 	addi	r5,r5,-24788
  805d44:	0806b341 	jmpi	806b34 <_fwalk_reent>

00805d48 <__sinit.part.1>:
  805d48:	defff704 	addi	sp,sp,-36
  805d4c:	00c02034 	movhi	r3,128
  805d50:	dfc00815 	stw	ra,32(sp)
  805d54:	ddc00715 	stw	r23,28(sp)
  805d58:	dd800615 	stw	r22,24(sp)
  805d5c:	dd400515 	stw	r21,20(sp)
  805d60:	dd000415 	stw	r20,16(sp)
  805d64:	dcc00315 	stw	r19,12(sp)
  805d68:	dc800215 	stw	r18,8(sp)
  805d6c:	dc400115 	stw	r17,4(sp)
  805d70:	dc000015 	stw	r16,0(sp)
  805d74:	18d74f04 	addi	r3,r3,23868
  805d78:	24000117 	ldw	r16,4(r4)
  805d7c:	20c00f15 	stw	r3,60(r4)
  805d80:	2080bb04 	addi	r2,r4,748
  805d84:	00c000c4 	movi	r3,3
  805d88:	20c0b915 	stw	r3,740(r4)
  805d8c:	2080ba15 	stw	r2,744(r4)
  805d90:	2000b815 	stw	zero,736(r4)
  805d94:	05c00204 	movi	r23,8
  805d98:	00800104 	movi	r2,4
  805d9c:	2025883a 	mov	r18,r4
  805da0:	b80d883a 	mov	r6,r23
  805da4:	81001704 	addi	r4,r16,92
  805da8:	000b883a 	mov	r5,zero
  805dac:	80000015 	stw	zero,0(r16)
  805db0:	80000115 	stw	zero,4(r16)
  805db4:	80000215 	stw	zero,8(r16)
  805db8:	8080030d 	sth	r2,12(r16)
  805dbc:	80001915 	stw	zero,100(r16)
  805dc0:	8000038d 	sth	zero,14(r16)
  805dc4:	80000415 	stw	zero,16(r16)
  805dc8:	80000515 	stw	zero,20(r16)
  805dcc:	80000615 	stw	zero,24(r16)
  805dd0:	08016b80 	call	8016b8 <memset>
  805dd4:	05802034 	movhi	r22,128
  805dd8:	94400217 	ldw	r17,8(r18)
  805ddc:	05402034 	movhi	r21,128
  805de0:	05002034 	movhi	r20,128
  805de4:	04c02034 	movhi	r19,128
  805de8:	b586d604 	addi	r22,r22,7000
  805dec:	ad46ed04 	addi	r21,r21,7092
  805df0:	a5070c04 	addi	r20,r20,7216
  805df4:	9cc72304 	addi	r19,r19,7308
  805df8:	85800815 	stw	r22,32(r16)
  805dfc:	85400915 	stw	r21,36(r16)
  805e00:	85000a15 	stw	r20,40(r16)
  805e04:	84c00b15 	stw	r19,44(r16)
  805e08:	84000715 	stw	r16,28(r16)
  805e0c:	00800284 	movi	r2,10
  805e10:	8880030d 	sth	r2,12(r17)
  805e14:	00800044 	movi	r2,1
  805e18:	b80d883a 	mov	r6,r23
  805e1c:	89001704 	addi	r4,r17,92
  805e20:	000b883a 	mov	r5,zero
  805e24:	88000015 	stw	zero,0(r17)
  805e28:	88000115 	stw	zero,4(r17)
  805e2c:	88000215 	stw	zero,8(r17)
  805e30:	88001915 	stw	zero,100(r17)
  805e34:	8880038d 	sth	r2,14(r17)
  805e38:	88000415 	stw	zero,16(r17)
  805e3c:	88000515 	stw	zero,20(r17)
  805e40:	88000615 	stw	zero,24(r17)
  805e44:	08016b80 	call	8016b8 <memset>
  805e48:	94000317 	ldw	r16,12(r18)
  805e4c:	00800484 	movi	r2,18
  805e50:	8c400715 	stw	r17,28(r17)
  805e54:	8d800815 	stw	r22,32(r17)
  805e58:	8d400915 	stw	r21,36(r17)
  805e5c:	8d000a15 	stw	r20,40(r17)
  805e60:	8cc00b15 	stw	r19,44(r17)
  805e64:	8080030d 	sth	r2,12(r16)
  805e68:	00800084 	movi	r2,2
  805e6c:	80000015 	stw	zero,0(r16)
  805e70:	80000115 	stw	zero,4(r16)
  805e74:	80000215 	stw	zero,8(r16)
  805e78:	80001915 	stw	zero,100(r16)
  805e7c:	8080038d 	sth	r2,14(r16)
  805e80:	80000415 	stw	zero,16(r16)
  805e84:	80000515 	stw	zero,20(r16)
  805e88:	80000615 	stw	zero,24(r16)
  805e8c:	b80d883a 	mov	r6,r23
  805e90:	000b883a 	mov	r5,zero
  805e94:	81001704 	addi	r4,r16,92
  805e98:	08016b80 	call	8016b8 <memset>
  805e9c:	00800044 	movi	r2,1
  805ea0:	84000715 	stw	r16,28(r16)
  805ea4:	85800815 	stw	r22,32(r16)
  805ea8:	85400915 	stw	r21,36(r16)
  805eac:	85000a15 	stw	r20,40(r16)
  805eb0:	84c00b15 	stw	r19,44(r16)
  805eb4:	90800e15 	stw	r2,56(r18)
  805eb8:	dfc00817 	ldw	ra,32(sp)
  805ebc:	ddc00717 	ldw	r23,28(sp)
  805ec0:	dd800617 	ldw	r22,24(sp)
  805ec4:	dd400517 	ldw	r21,20(sp)
  805ec8:	dd000417 	ldw	r20,16(sp)
  805ecc:	dcc00317 	ldw	r19,12(sp)
  805ed0:	dc800217 	ldw	r18,8(sp)
  805ed4:	dc400117 	ldw	r17,4(sp)
  805ed8:	dc000017 	ldw	r16,0(sp)
  805edc:	dec00904 	addi	sp,sp,36
  805ee0:	f800283a 	ret

00805ee4 <__fp_lock>:
  805ee4:	0005883a 	mov	r2,zero
  805ee8:	f800283a 	ret

00805eec <__sfmoreglue>:
  805eec:	defffc04 	addi	sp,sp,-16
  805ef0:	dc400115 	stw	r17,4(sp)
  805ef4:	2c7fffc4 	addi	r17,r5,-1
  805ef8:	8c401a24 	muli	r17,r17,104
  805efc:	dc800215 	stw	r18,8(sp)
  805f00:	2825883a 	mov	r18,r5
  805f04:	89401d04 	addi	r5,r17,116
  805f08:	dc000015 	stw	r16,0(sp)
  805f0c:	dfc00315 	stw	ra,12(sp)
  805f10:	0800eac0 	call	800eac <_malloc_r>
  805f14:	1021883a 	mov	r16,r2
  805f18:	10000726 	beq	r2,zero,805f38 <__sfmoreglue+0x4c>
  805f1c:	11000304 	addi	r4,r2,12
  805f20:	10000015 	stw	zero,0(r2)
  805f24:	14800115 	stw	r18,4(r2)
  805f28:	11000215 	stw	r4,8(r2)
  805f2c:	89801a04 	addi	r6,r17,104
  805f30:	000b883a 	mov	r5,zero
  805f34:	08016b80 	call	8016b8 <memset>
  805f38:	8005883a 	mov	r2,r16
  805f3c:	dfc00317 	ldw	ra,12(sp)
  805f40:	dc800217 	ldw	r18,8(sp)
  805f44:	dc400117 	ldw	r17,4(sp)
  805f48:	dc000017 	ldw	r16,0(sp)
  805f4c:	dec00404 	addi	sp,sp,16
  805f50:	f800283a 	ret

00805f54 <__sfp>:
  805f54:	defffb04 	addi	sp,sp,-20
  805f58:	dc000015 	stw	r16,0(sp)
  805f5c:	04002074 	movhi	r16,129
  805f60:	840f4804 	addi	r16,r16,15648
  805f64:	dcc00315 	stw	r19,12(sp)
  805f68:	2027883a 	mov	r19,r4
  805f6c:	81000017 	ldw	r4,0(r16)
  805f70:	dfc00415 	stw	ra,16(sp)
  805f74:	dc800215 	stw	r18,8(sp)
  805f78:	20800e17 	ldw	r2,56(r4)
  805f7c:	dc400115 	stw	r17,4(sp)
  805f80:	1000021e 	bne	r2,zero,805f8c <__sfp+0x38>
  805f84:	0805d480 	call	805d48 <__sinit.part.1>
  805f88:	81000017 	ldw	r4,0(r16)
  805f8c:	2480b804 	addi	r18,r4,736
  805f90:	047fffc4 	movi	r17,-1
  805f94:	91000117 	ldw	r4,4(r18)
  805f98:	94000217 	ldw	r16,8(r18)
  805f9c:	213fffc4 	addi	r4,r4,-1
  805fa0:	20000a16 	blt	r4,zero,805fcc <__sfp+0x78>
  805fa4:	8080030f 	ldh	r2,12(r16)
  805fa8:	10000c26 	beq	r2,zero,805fdc <__sfp+0x88>
  805fac:	80c01d04 	addi	r3,r16,116
  805fb0:	00000206 	br	805fbc <__sfp+0x68>
  805fb4:	18bfe60f 	ldh	r2,-104(r3)
  805fb8:	10000826 	beq	r2,zero,805fdc <__sfp+0x88>
  805fbc:	213fffc4 	addi	r4,r4,-1
  805fc0:	1c3ffd04 	addi	r16,r3,-12
  805fc4:	18c01a04 	addi	r3,r3,104
  805fc8:	247ffa1e 	bne	r4,r17,805fb4 <__alt_mem_onchip_mem+0xff7fdfb4>
  805fcc:	90800017 	ldw	r2,0(r18)
  805fd0:	10001d26 	beq	r2,zero,806048 <__sfp+0xf4>
  805fd4:	1025883a 	mov	r18,r2
  805fd8:	003fee06 	br	805f94 <__alt_mem_onchip_mem+0xff7fdf94>
  805fdc:	00bfffc4 	movi	r2,-1
  805fe0:	8080038d 	sth	r2,14(r16)
  805fe4:	00800044 	movi	r2,1
  805fe8:	8080030d 	sth	r2,12(r16)
  805fec:	80001915 	stw	zero,100(r16)
  805ff0:	80000015 	stw	zero,0(r16)
  805ff4:	80000215 	stw	zero,8(r16)
  805ff8:	80000115 	stw	zero,4(r16)
  805ffc:	80000415 	stw	zero,16(r16)
  806000:	80000515 	stw	zero,20(r16)
  806004:	80000615 	stw	zero,24(r16)
  806008:	01800204 	movi	r6,8
  80600c:	000b883a 	mov	r5,zero
  806010:	81001704 	addi	r4,r16,92
  806014:	08016b80 	call	8016b8 <memset>
  806018:	8005883a 	mov	r2,r16
  80601c:	80000c15 	stw	zero,48(r16)
  806020:	80000d15 	stw	zero,52(r16)
  806024:	80001115 	stw	zero,68(r16)
  806028:	80001215 	stw	zero,72(r16)
  80602c:	dfc00417 	ldw	ra,16(sp)
  806030:	dcc00317 	ldw	r19,12(sp)
  806034:	dc800217 	ldw	r18,8(sp)
  806038:	dc400117 	ldw	r17,4(sp)
  80603c:	dc000017 	ldw	r16,0(sp)
  806040:	dec00504 	addi	sp,sp,20
  806044:	f800283a 	ret
  806048:	01400104 	movi	r5,4
  80604c:	9809883a 	mov	r4,r19
  806050:	0805eec0 	call	805eec <__sfmoreglue>
  806054:	90800015 	stw	r2,0(r18)
  806058:	103fde1e 	bne	r2,zero,805fd4 <__alt_mem_onchip_mem+0xff7fdfd4>
  80605c:	00800304 	movi	r2,12
  806060:	98800015 	stw	r2,0(r19)
  806064:	0005883a 	mov	r2,zero
  806068:	003ff006 	br	80602c <__alt_mem_onchip_mem+0xff7fe02c>

0080606c <_cleanup>:
  80606c:	00802074 	movhi	r2,129
  806070:	108f4804 	addi	r2,r2,15648
  806074:	11000017 	ldw	r4,0(r2)
  806078:	01402074 	movhi	r5,129
  80607c:	2967cb04 	addi	r5,r5,-24788
  806080:	0806b341 	jmpi	806b34 <_fwalk_reent>

00806084 <__sinit>:
  806084:	20800e17 	ldw	r2,56(r4)
  806088:	10000126 	beq	r2,zero,806090 <__sinit+0xc>
  80608c:	f800283a 	ret
  806090:	0805d481 	jmpi	805d48 <__sinit.part.1>

00806094 <__sfp_lock_acquire>:
  806094:	f800283a 	ret

00806098 <__sfp_lock_release>:
  806098:	f800283a 	ret

0080609c <__sinit_lock_acquire>:
  80609c:	f800283a 	ret

008060a0 <__sinit_lock_release>:
  8060a0:	f800283a 	ret

008060a4 <__fp_lock_all>:
  8060a4:	00802074 	movhi	r2,129
  8060a8:	108f4904 	addi	r2,r2,15652
  8060ac:	11000017 	ldw	r4,0(r2)
  8060b0:	01402034 	movhi	r5,128
  8060b4:	2957b904 	addi	r5,r5,24292
  8060b8:	0806a701 	jmpi	806a70 <_fwalk>

008060bc <__fp_unlock_all>:
  8060bc:	00802074 	movhi	r2,129
  8060c0:	108f4904 	addi	r2,r2,15652
  8060c4:	11000017 	ldw	r4,0(r2)
  8060c8:	01402034 	movhi	r5,128
  8060cc:	29574d04 	addi	r5,r5,23860
  8060d0:	0806a701 	jmpi	806a70 <_fwalk>

008060d4 <__sflags>:
  8060d4:	28800007 	ldb	r2,0(r5)
  8060d8:	00c01c84 	movi	r3,114
  8060dc:	10c02426 	beq	r2,r3,806170 <__sflags+0x9c>
  8060e0:	00c01dc4 	movi	r3,119
  8060e4:	10c01e26 	beq	r2,r3,806160 <__sflags+0x8c>
  8060e8:	00c01844 	movi	r3,97
  8060ec:	10c00426 	beq	r2,r3,806100 <__sflags+0x2c>
  8060f0:	00800584 	movi	r2,22
  8060f4:	20800015 	stw	r2,0(r4)
  8060f8:	0005883a 	mov	r2,zero
  8060fc:	f800283a 	ret
  806100:	02c08204 	movi	r11,520
  806104:	01000044 	movi	r4,1
  806108:	00804204 	movi	r2,264
  80610c:	01c00ac4 	movi	r7,43
  806110:	02bff8c4 	movi	r10,-29
  806114:	027fff04 	movi	r9,-4
  806118:	02001e04 	movi	r8,120
  80611c:	29400044 	addi	r5,r5,1
  806120:	28c00007 	ldb	r3,0(r5)
  806124:	18000626 	beq	r3,zero,806140 <__sflags+0x6c>
  806128:	19c00826 	beq	r3,r7,80614c <__sflags+0x78>
  80612c:	1a3ffb1e 	bne	r3,r8,80611c <__alt_mem_onchip_mem+0xff7fe11c>
  806130:	29400044 	addi	r5,r5,1
  806134:	28c00007 	ldb	r3,0(r5)
  806138:	21020014 	ori	r4,r4,2048
  80613c:	183ffa1e 	bne	r3,zero,806128 <__alt_mem_onchip_mem+0xff7fe128>
  806140:	22c8b03a 	or	r4,r4,r11
  806144:	31000015 	stw	r4,0(r6)
  806148:	f800283a 	ret
  80614c:	1284703a 	and	r2,r2,r10
  806150:	2248703a 	and	r4,r4,r9
  806154:	10800414 	ori	r2,r2,16
  806158:	21000094 	ori	r4,r4,2
  80615c:	003fef06 	br	80611c <__alt_mem_onchip_mem+0xff7fe11c>
  806160:	02c18004 	movi	r11,1536
  806164:	01000044 	movi	r4,1
  806168:	00800204 	movi	r2,8
  80616c:	003fe706 	br	80610c <__alt_mem_onchip_mem+0xff7fe10c>
  806170:	0017883a 	mov	r11,zero
  806174:	0009883a 	mov	r4,zero
  806178:	00800104 	movi	r2,4
  80617c:	003fe306 	br	80610c <__alt_mem_onchip_mem+0xff7fe10c>

00806180 <_malloc_trim_r>:
  806180:	defffb04 	addi	sp,sp,-20
  806184:	dcc00315 	stw	r19,12(sp)
  806188:	04c02074 	movhi	r19,129
  80618c:	dc800215 	stw	r18,8(sp)
  806190:	dc400115 	stw	r17,4(sp)
  806194:	dc000015 	stw	r16,0(sp)
  806198:	dfc00415 	stw	ra,16(sp)
  80619c:	2821883a 	mov	r16,r5
  8061a0:	9cc91c04 	addi	r19,r19,9328
  8061a4:	2025883a 	mov	r18,r4
  8061a8:	080ddc00 	call	80ddc0 <__malloc_lock>
  8061ac:	98800217 	ldw	r2,8(r19)
  8061b0:	14400117 	ldw	r17,4(r2)
  8061b4:	00bfff04 	movi	r2,-4
  8061b8:	88a2703a 	and	r17,r17,r2
  8061bc:	8c21c83a 	sub	r16,r17,r16
  8061c0:	8403fbc4 	addi	r16,r16,4079
  8061c4:	8020d33a 	srli	r16,r16,12
  8061c8:	0083ffc4 	movi	r2,4095
  8061cc:	843fffc4 	addi	r16,r16,-1
  8061d0:	8020933a 	slli	r16,r16,12
  8061d4:	1400060e 	bge	r2,r16,8061f0 <_malloc_trim_r+0x70>
  8061d8:	000b883a 	mov	r5,zero
  8061dc:	9009883a 	mov	r4,r18
  8061e0:	0801b040 	call	801b04 <_sbrk_r>
  8061e4:	98c00217 	ldw	r3,8(r19)
  8061e8:	1c47883a 	add	r3,r3,r17
  8061ec:	10c00a26 	beq	r2,r3,806218 <_malloc_trim_r+0x98>
  8061f0:	9009883a 	mov	r4,r18
  8061f4:	080dde40 	call	80dde4 <__malloc_unlock>
  8061f8:	0005883a 	mov	r2,zero
  8061fc:	dfc00417 	ldw	ra,16(sp)
  806200:	dcc00317 	ldw	r19,12(sp)
  806204:	dc800217 	ldw	r18,8(sp)
  806208:	dc400117 	ldw	r17,4(sp)
  80620c:	dc000017 	ldw	r16,0(sp)
  806210:	dec00504 	addi	sp,sp,20
  806214:	f800283a 	ret
  806218:	040bc83a 	sub	r5,zero,r16
  80621c:	9009883a 	mov	r4,r18
  806220:	0801b040 	call	801b04 <_sbrk_r>
  806224:	00ffffc4 	movi	r3,-1
  806228:	10c00d26 	beq	r2,r3,806260 <_malloc_trim_r+0xe0>
  80622c:	00c02074 	movhi	r3,129
  806230:	18d6af04 	addi	r3,r3,23228
  806234:	18800017 	ldw	r2,0(r3)
  806238:	99000217 	ldw	r4,8(r19)
  80623c:	8c23c83a 	sub	r17,r17,r16
  806240:	8c400054 	ori	r17,r17,1
  806244:	1421c83a 	sub	r16,r2,r16
  806248:	24400115 	stw	r17,4(r4)
  80624c:	9009883a 	mov	r4,r18
  806250:	1c000015 	stw	r16,0(r3)
  806254:	080dde40 	call	80dde4 <__malloc_unlock>
  806258:	00800044 	movi	r2,1
  80625c:	003fe706 	br	8061fc <__alt_mem_onchip_mem+0xff7fe1fc>
  806260:	000b883a 	mov	r5,zero
  806264:	9009883a 	mov	r4,r18
  806268:	0801b040 	call	801b04 <_sbrk_r>
  80626c:	99000217 	ldw	r4,8(r19)
  806270:	014003c4 	movi	r5,15
  806274:	1107c83a 	sub	r3,r2,r4
  806278:	28ffdd0e 	bge	r5,r3,8061f0 <__alt_mem_onchip_mem+0xff7fe1f0>
  80627c:	01402074 	movhi	r5,129
  806280:	294f4a04 	addi	r5,r5,15656
  806284:	29400017 	ldw	r5,0(r5)
  806288:	18c00054 	ori	r3,r3,1
  80628c:	20c00115 	stw	r3,4(r4)
  806290:	00c02074 	movhi	r3,129
  806294:	1145c83a 	sub	r2,r2,r5
  806298:	18d6af04 	addi	r3,r3,23228
  80629c:	18800015 	stw	r2,0(r3)
  8062a0:	003fd306 	br	8061f0 <__alt_mem_onchip_mem+0xff7fe1f0>

008062a4 <_free_r>:
  8062a4:	28004126 	beq	r5,zero,8063ac <_free_r+0x108>
  8062a8:	defffd04 	addi	sp,sp,-12
  8062ac:	dc400115 	stw	r17,4(sp)
  8062b0:	dc000015 	stw	r16,0(sp)
  8062b4:	2023883a 	mov	r17,r4
  8062b8:	2821883a 	mov	r16,r5
  8062bc:	dfc00215 	stw	ra,8(sp)
  8062c0:	080ddc00 	call	80ddc0 <__malloc_lock>
  8062c4:	81ffff17 	ldw	r7,-4(r16)
  8062c8:	00bfff84 	movi	r2,-2
  8062cc:	01002074 	movhi	r4,129
  8062d0:	81bffe04 	addi	r6,r16,-8
  8062d4:	3884703a 	and	r2,r7,r2
  8062d8:	21091c04 	addi	r4,r4,9328
  8062dc:	308b883a 	add	r5,r6,r2
  8062e0:	2a400117 	ldw	r9,4(r5)
  8062e4:	22000217 	ldw	r8,8(r4)
  8062e8:	00ffff04 	movi	r3,-4
  8062ec:	48c6703a 	and	r3,r9,r3
  8062f0:	2a005726 	beq	r5,r8,806450 <_free_r+0x1ac>
  8062f4:	28c00115 	stw	r3,4(r5)
  8062f8:	39c0004c 	andi	r7,r7,1
  8062fc:	3800091e 	bne	r7,zero,806324 <_free_r+0x80>
  806300:	823ffe17 	ldw	r8,-8(r16)
  806304:	22400204 	addi	r9,r4,8
  806308:	320dc83a 	sub	r6,r6,r8
  80630c:	31c00217 	ldw	r7,8(r6)
  806310:	1205883a 	add	r2,r2,r8
  806314:	3a406526 	beq	r7,r9,8064ac <_free_r+0x208>
  806318:	32000317 	ldw	r8,12(r6)
  80631c:	3a000315 	stw	r8,12(r7)
  806320:	41c00215 	stw	r7,8(r8)
  806324:	28cf883a 	add	r7,r5,r3
  806328:	39c00117 	ldw	r7,4(r7)
  80632c:	39c0004c 	andi	r7,r7,1
  806330:	38003a26 	beq	r7,zero,80641c <_free_r+0x178>
  806334:	10c00054 	ori	r3,r2,1
  806338:	30c00115 	stw	r3,4(r6)
  80633c:	3087883a 	add	r3,r6,r2
  806340:	18800015 	stw	r2,0(r3)
  806344:	00c07fc4 	movi	r3,511
  806348:	18801936 	bltu	r3,r2,8063b0 <_free_r+0x10c>
  80634c:	1004d0fa 	srli	r2,r2,3
  806350:	01c00044 	movi	r7,1
  806354:	21400117 	ldw	r5,4(r4)
  806358:	10c00044 	addi	r3,r2,1
  80635c:	18c7883a 	add	r3,r3,r3
  806360:	1005d0ba 	srai	r2,r2,2
  806364:	18c7883a 	add	r3,r3,r3
  806368:	18c7883a 	add	r3,r3,r3
  80636c:	1907883a 	add	r3,r3,r4
  806370:	3884983a 	sll	r2,r7,r2
  806374:	19c00017 	ldw	r7,0(r3)
  806378:	1a3ffe04 	addi	r8,r3,-8
  80637c:	1144b03a 	or	r2,r2,r5
  806380:	32000315 	stw	r8,12(r6)
  806384:	31c00215 	stw	r7,8(r6)
  806388:	20800115 	stw	r2,4(r4)
  80638c:	19800015 	stw	r6,0(r3)
  806390:	39800315 	stw	r6,12(r7)
  806394:	8809883a 	mov	r4,r17
  806398:	dfc00217 	ldw	ra,8(sp)
  80639c:	dc400117 	ldw	r17,4(sp)
  8063a0:	dc000017 	ldw	r16,0(sp)
  8063a4:	dec00304 	addi	sp,sp,12
  8063a8:	080dde41 	jmpi	80dde4 <__malloc_unlock>
  8063ac:	f800283a 	ret
  8063b0:	100ad27a 	srli	r5,r2,9
  8063b4:	00c00104 	movi	r3,4
  8063b8:	19404a36 	bltu	r3,r5,8064e4 <_free_r+0x240>
  8063bc:	100ad1ba 	srli	r5,r2,6
  8063c0:	28c00e44 	addi	r3,r5,57
  8063c4:	18c7883a 	add	r3,r3,r3
  8063c8:	29400e04 	addi	r5,r5,56
  8063cc:	18c7883a 	add	r3,r3,r3
  8063d0:	18c7883a 	add	r3,r3,r3
  8063d4:	1909883a 	add	r4,r3,r4
  8063d8:	20c00017 	ldw	r3,0(r4)
  8063dc:	01c02074 	movhi	r7,129
  8063e0:	213ffe04 	addi	r4,r4,-8
  8063e4:	39c91c04 	addi	r7,r7,9328
  8063e8:	20c04426 	beq	r4,r3,8064fc <_free_r+0x258>
  8063ec:	01ffff04 	movi	r7,-4
  8063f0:	19400117 	ldw	r5,4(r3)
  8063f4:	29ca703a 	and	r5,r5,r7
  8063f8:	1140022e 	bgeu	r2,r5,806404 <_free_r+0x160>
  8063fc:	18c00217 	ldw	r3,8(r3)
  806400:	20fffb1e 	bne	r4,r3,8063f0 <__alt_mem_onchip_mem+0xff7fe3f0>
  806404:	19000317 	ldw	r4,12(r3)
  806408:	31000315 	stw	r4,12(r6)
  80640c:	30c00215 	stw	r3,8(r6)
  806410:	21800215 	stw	r6,8(r4)
  806414:	19800315 	stw	r6,12(r3)
  806418:	003fde06 	br	806394 <__alt_mem_onchip_mem+0xff7fe394>
  80641c:	29c00217 	ldw	r7,8(r5)
  806420:	10c5883a 	add	r2,r2,r3
  806424:	00c02074 	movhi	r3,129
  806428:	18c91e04 	addi	r3,r3,9336
  80642c:	38c03b26 	beq	r7,r3,80651c <_free_r+0x278>
  806430:	2a000317 	ldw	r8,12(r5)
  806434:	11400054 	ori	r5,r2,1
  806438:	3087883a 	add	r3,r6,r2
  80643c:	3a000315 	stw	r8,12(r7)
  806440:	41c00215 	stw	r7,8(r8)
  806444:	31400115 	stw	r5,4(r6)
  806448:	18800015 	stw	r2,0(r3)
  80644c:	003fbd06 	br	806344 <__alt_mem_onchip_mem+0xff7fe344>
  806450:	39c0004c 	andi	r7,r7,1
  806454:	10c5883a 	add	r2,r2,r3
  806458:	3800071e 	bne	r7,zero,806478 <_free_r+0x1d4>
  80645c:	81fffe17 	ldw	r7,-8(r16)
  806460:	31cdc83a 	sub	r6,r6,r7
  806464:	30c00317 	ldw	r3,12(r6)
  806468:	31400217 	ldw	r5,8(r6)
  80646c:	11c5883a 	add	r2,r2,r7
  806470:	28c00315 	stw	r3,12(r5)
  806474:	19400215 	stw	r5,8(r3)
  806478:	10c00054 	ori	r3,r2,1
  80647c:	30c00115 	stw	r3,4(r6)
  806480:	00c02074 	movhi	r3,129
  806484:	18cf4b04 	addi	r3,r3,15660
  806488:	18c00017 	ldw	r3,0(r3)
  80648c:	21800215 	stw	r6,8(r4)
  806490:	10ffc036 	bltu	r2,r3,806394 <__alt_mem_onchip_mem+0xff7fe394>
  806494:	00802074 	movhi	r2,129
  806498:	1096a404 	addi	r2,r2,23184
  80649c:	11400017 	ldw	r5,0(r2)
  8064a0:	8809883a 	mov	r4,r17
  8064a4:	08061800 	call	806180 <_malloc_trim_r>
  8064a8:	003fba06 	br	806394 <__alt_mem_onchip_mem+0xff7fe394>
  8064ac:	28c9883a 	add	r4,r5,r3
  8064b0:	21000117 	ldw	r4,4(r4)
  8064b4:	2100004c 	andi	r4,r4,1
  8064b8:	2000391e 	bne	r4,zero,8065a0 <_free_r+0x2fc>
  8064bc:	29c00217 	ldw	r7,8(r5)
  8064c0:	29000317 	ldw	r4,12(r5)
  8064c4:	1885883a 	add	r2,r3,r2
  8064c8:	10c00054 	ori	r3,r2,1
  8064cc:	39000315 	stw	r4,12(r7)
  8064d0:	21c00215 	stw	r7,8(r4)
  8064d4:	30c00115 	stw	r3,4(r6)
  8064d8:	308d883a 	add	r6,r6,r2
  8064dc:	30800015 	stw	r2,0(r6)
  8064e0:	003fac06 	br	806394 <__alt_mem_onchip_mem+0xff7fe394>
  8064e4:	00c00504 	movi	r3,20
  8064e8:	19401536 	bltu	r3,r5,806540 <_free_r+0x29c>
  8064ec:	28c01704 	addi	r3,r5,92
  8064f0:	18c7883a 	add	r3,r3,r3
  8064f4:	294016c4 	addi	r5,r5,91
  8064f8:	003fb406 	br	8063cc <__alt_mem_onchip_mem+0xff7fe3cc>
  8064fc:	280bd0ba 	srai	r5,r5,2
  806500:	00c00044 	movi	r3,1
  806504:	38800117 	ldw	r2,4(r7)
  806508:	194a983a 	sll	r5,r3,r5
  80650c:	2007883a 	mov	r3,r4
  806510:	2884b03a 	or	r2,r5,r2
  806514:	38800115 	stw	r2,4(r7)
  806518:	003fbb06 	br	806408 <__alt_mem_onchip_mem+0xff7fe408>
  80651c:	21800515 	stw	r6,20(r4)
  806520:	21800415 	stw	r6,16(r4)
  806524:	10c00054 	ori	r3,r2,1
  806528:	31c00315 	stw	r7,12(r6)
  80652c:	31c00215 	stw	r7,8(r6)
  806530:	30c00115 	stw	r3,4(r6)
  806534:	308d883a 	add	r6,r6,r2
  806538:	30800015 	stw	r2,0(r6)
  80653c:	003f9506 	br	806394 <__alt_mem_onchip_mem+0xff7fe394>
  806540:	00c01504 	movi	r3,84
  806544:	19400536 	bltu	r3,r5,80655c <_free_r+0x2b8>
  806548:	100ad33a 	srli	r5,r2,12
  80654c:	28c01bc4 	addi	r3,r5,111
  806550:	18c7883a 	add	r3,r3,r3
  806554:	29401b84 	addi	r5,r5,110
  806558:	003f9c06 	br	8063cc <__alt_mem_onchip_mem+0xff7fe3cc>
  80655c:	00c05504 	movi	r3,340
  806560:	19400536 	bltu	r3,r5,806578 <_free_r+0x2d4>
  806564:	100ad3fa 	srli	r5,r2,15
  806568:	28c01e04 	addi	r3,r5,120
  80656c:	18c7883a 	add	r3,r3,r3
  806570:	29401dc4 	addi	r5,r5,119
  806574:	003f9506 	br	8063cc <__alt_mem_onchip_mem+0xff7fe3cc>
  806578:	00c15504 	movi	r3,1364
  80657c:	19400536 	bltu	r3,r5,806594 <_free_r+0x2f0>
  806580:	100ad4ba 	srli	r5,r2,18
  806584:	28c01f44 	addi	r3,r5,125
  806588:	18c7883a 	add	r3,r3,r3
  80658c:	29401f04 	addi	r5,r5,124
  806590:	003f8e06 	br	8063cc <__alt_mem_onchip_mem+0xff7fe3cc>
  806594:	00c03f84 	movi	r3,254
  806598:	01401f84 	movi	r5,126
  80659c:	003f8b06 	br	8063cc <__alt_mem_onchip_mem+0xff7fe3cc>
  8065a0:	10c00054 	ori	r3,r2,1
  8065a4:	30c00115 	stw	r3,4(r6)
  8065a8:	308d883a 	add	r6,r6,r2
  8065ac:	30800015 	stw	r2,0(r6)
  8065b0:	003f7806 	br	806394 <__alt_mem_onchip_mem+0xff7fe394>

008065b4 <__sfvwrite_r>:
  8065b4:	30800217 	ldw	r2,8(r6)
  8065b8:	10006726 	beq	r2,zero,806758 <__sfvwrite_r+0x1a4>
  8065bc:	28c0030b 	ldhu	r3,12(r5)
  8065c0:	defff404 	addi	sp,sp,-48
  8065c4:	dd400715 	stw	r21,28(sp)
  8065c8:	dd000615 	stw	r20,24(sp)
  8065cc:	dc000215 	stw	r16,8(sp)
  8065d0:	dfc00b15 	stw	ra,44(sp)
  8065d4:	df000a15 	stw	fp,40(sp)
  8065d8:	ddc00915 	stw	r23,36(sp)
  8065dc:	dd800815 	stw	r22,32(sp)
  8065e0:	dcc00515 	stw	r19,20(sp)
  8065e4:	dc800415 	stw	r18,16(sp)
  8065e8:	dc400315 	stw	r17,12(sp)
  8065ec:	1880020c 	andi	r2,r3,8
  8065f0:	2821883a 	mov	r16,r5
  8065f4:	202b883a 	mov	r21,r4
  8065f8:	3029883a 	mov	r20,r6
  8065fc:	10002726 	beq	r2,zero,80669c <__sfvwrite_r+0xe8>
  806600:	28800417 	ldw	r2,16(r5)
  806604:	10002526 	beq	r2,zero,80669c <__sfvwrite_r+0xe8>
  806608:	1880008c 	andi	r2,r3,2
  80660c:	a4400017 	ldw	r17,0(r20)
  806610:	10002a26 	beq	r2,zero,8066bc <__sfvwrite_r+0x108>
  806614:	05a00034 	movhi	r22,32768
  806618:	0027883a 	mov	r19,zero
  80661c:	0025883a 	mov	r18,zero
  806620:	b5bf0004 	addi	r22,r22,-1024
  806624:	980d883a 	mov	r6,r19
  806628:	a809883a 	mov	r4,r21
  80662c:	90004626 	beq	r18,zero,806748 <__sfvwrite_r+0x194>
  806630:	900f883a 	mov	r7,r18
  806634:	b480022e 	bgeu	r22,r18,806640 <__sfvwrite_r+0x8c>
  806638:	01e00034 	movhi	r7,32768
  80663c:	39ff0004 	addi	r7,r7,-1024
  806640:	80800917 	ldw	r2,36(r16)
  806644:	81400717 	ldw	r5,28(r16)
  806648:	103ee83a 	callr	r2
  80664c:	0080570e 	bge	zero,r2,8067ac <__sfvwrite_r+0x1f8>
  806650:	a0c00217 	ldw	r3,8(r20)
  806654:	98a7883a 	add	r19,r19,r2
  806658:	90a5c83a 	sub	r18,r18,r2
  80665c:	1885c83a 	sub	r2,r3,r2
  806660:	a0800215 	stw	r2,8(r20)
  806664:	103fef1e 	bne	r2,zero,806624 <__alt_mem_onchip_mem+0xff7fe624>
  806668:	0005883a 	mov	r2,zero
  80666c:	dfc00b17 	ldw	ra,44(sp)
  806670:	df000a17 	ldw	fp,40(sp)
  806674:	ddc00917 	ldw	r23,36(sp)
  806678:	dd800817 	ldw	r22,32(sp)
  80667c:	dd400717 	ldw	r21,28(sp)
  806680:	dd000617 	ldw	r20,24(sp)
  806684:	dcc00517 	ldw	r19,20(sp)
  806688:	dc800417 	ldw	r18,16(sp)
  80668c:	dc400317 	ldw	r17,12(sp)
  806690:	dc000217 	ldw	r16,8(sp)
  806694:	dec00c04 	addi	sp,sp,48
  806698:	f800283a 	ret
  80669c:	800b883a 	mov	r5,r16
  8066a0:	a809883a 	mov	r4,r21
  8066a4:	080405c0 	call	80405c <__swsetup_r>
  8066a8:	1000eb1e 	bne	r2,zero,806a58 <__sfvwrite_r+0x4a4>
  8066ac:	80c0030b 	ldhu	r3,12(r16)
  8066b0:	a4400017 	ldw	r17,0(r20)
  8066b4:	1880008c 	andi	r2,r3,2
  8066b8:	103fd61e 	bne	r2,zero,806614 <__alt_mem_onchip_mem+0xff7fe614>
  8066bc:	1880004c 	andi	r2,r3,1
  8066c0:	10003f1e 	bne	r2,zero,8067c0 <__sfvwrite_r+0x20c>
  8066c4:	0039883a 	mov	fp,zero
  8066c8:	0025883a 	mov	r18,zero
  8066cc:	90001a26 	beq	r18,zero,806738 <__sfvwrite_r+0x184>
  8066d0:	1880800c 	andi	r2,r3,512
  8066d4:	84c00217 	ldw	r19,8(r16)
  8066d8:	10002126 	beq	r2,zero,806760 <__sfvwrite_r+0x1ac>
  8066dc:	982f883a 	mov	r23,r19
  8066e0:	94c09336 	bltu	r18,r19,806930 <__sfvwrite_r+0x37c>
  8066e4:	1881200c 	andi	r2,r3,1152
  8066e8:	10009e1e 	bne	r2,zero,806964 <__sfvwrite_r+0x3b0>
  8066ec:	81000017 	ldw	r4,0(r16)
  8066f0:	b80d883a 	mov	r6,r23
  8066f4:	e00b883a 	mov	r5,fp
  8066f8:	0806fb40 	call	806fb4 <memmove>
  8066fc:	80c00217 	ldw	r3,8(r16)
  806700:	81000017 	ldw	r4,0(r16)
  806704:	9005883a 	mov	r2,r18
  806708:	1ce7c83a 	sub	r19,r3,r19
  80670c:	25cf883a 	add	r7,r4,r23
  806710:	84c00215 	stw	r19,8(r16)
  806714:	81c00015 	stw	r7,0(r16)
  806718:	a0c00217 	ldw	r3,8(r20)
  80671c:	e0b9883a 	add	fp,fp,r2
  806720:	90a5c83a 	sub	r18,r18,r2
  806724:	18a7c83a 	sub	r19,r3,r2
  806728:	a4c00215 	stw	r19,8(r20)
  80672c:	983fce26 	beq	r19,zero,806668 <__alt_mem_onchip_mem+0xff7fe668>
  806730:	80c0030b 	ldhu	r3,12(r16)
  806734:	903fe61e 	bne	r18,zero,8066d0 <__alt_mem_onchip_mem+0xff7fe6d0>
  806738:	8f000017 	ldw	fp,0(r17)
  80673c:	8c800117 	ldw	r18,4(r17)
  806740:	8c400204 	addi	r17,r17,8
  806744:	003fe106 	br	8066cc <__alt_mem_onchip_mem+0xff7fe6cc>
  806748:	8cc00017 	ldw	r19,0(r17)
  80674c:	8c800117 	ldw	r18,4(r17)
  806750:	8c400204 	addi	r17,r17,8
  806754:	003fb306 	br	806624 <__alt_mem_onchip_mem+0xff7fe624>
  806758:	0005883a 	mov	r2,zero
  80675c:	f800283a 	ret
  806760:	81000017 	ldw	r4,0(r16)
  806764:	80800417 	ldw	r2,16(r16)
  806768:	11005736 	bltu	r2,r4,8068c8 <__sfvwrite_r+0x314>
  80676c:	85c00517 	ldw	r23,20(r16)
  806770:	95c05536 	bltu	r18,r23,8068c8 <__sfvwrite_r+0x314>
  806774:	00a00034 	movhi	r2,32768
  806778:	10bfffc4 	addi	r2,r2,-1
  80677c:	9009883a 	mov	r4,r18
  806780:	1480012e 	bgeu	r2,r18,806788 <__sfvwrite_r+0x1d4>
  806784:	1009883a 	mov	r4,r2
  806788:	b80b883a 	mov	r5,r23
  80678c:	080b0280 	call	80b028 <__divsi3>
  806790:	15cf383a 	mul	r7,r2,r23
  806794:	81400717 	ldw	r5,28(r16)
  806798:	80800917 	ldw	r2,36(r16)
  80679c:	e00d883a 	mov	r6,fp
  8067a0:	a809883a 	mov	r4,r21
  8067a4:	103ee83a 	callr	r2
  8067a8:	00bfdb16 	blt	zero,r2,806718 <__alt_mem_onchip_mem+0xff7fe718>
  8067ac:	8080030b 	ldhu	r2,12(r16)
  8067b0:	10801014 	ori	r2,r2,64
  8067b4:	8080030d 	sth	r2,12(r16)
  8067b8:	00bfffc4 	movi	r2,-1
  8067bc:	003fab06 	br	80666c <__alt_mem_onchip_mem+0xff7fe66c>
  8067c0:	0027883a 	mov	r19,zero
  8067c4:	0011883a 	mov	r8,zero
  8067c8:	0039883a 	mov	fp,zero
  8067cc:	0025883a 	mov	r18,zero
  8067d0:	90001f26 	beq	r18,zero,806850 <__sfvwrite_r+0x29c>
  8067d4:	40005a26 	beq	r8,zero,806940 <__sfvwrite_r+0x38c>
  8067d8:	982d883a 	mov	r22,r19
  8067dc:	94c0012e 	bgeu	r18,r19,8067e4 <__sfvwrite_r+0x230>
  8067e0:	902d883a 	mov	r22,r18
  8067e4:	81000017 	ldw	r4,0(r16)
  8067e8:	80800417 	ldw	r2,16(r16)
  8067ec:	b02f883a 	mov	r23,r22
  8067f0:	81c00517 	ldw	r7,20(r16)
  8067f4:	1100032e 	bgeu	r2,r4,806804 <__sfvwrite_r+0x250>
  8067f8:	80c00217 	ldw	r3,8(r16)
  8067fc:	38c7883a 	add	r3,r7,r3
  806800:	1d801816 	blt	r3,r22,806864 <__sfvwrite_r+0x2b0>
  806804:	b1c03e16 	blt	r22,r7,806900 <__sfvwrite_r+0x34c>
  806808:	80800917 	ldw	r2,36(r16)
  80680c:	81400717 	ldw	r5,28(r16)
  806810:	e00d883a 	mov	r6,fp
  806814:	da000115 	stw	r8,4(sp)
  806818:	a809883a 	mov	r4,r21
  80681c:	103ee83a 	callr	r2
  806820:	102f883a 	mov	r23,r2
  806824:	da000117 	ldw	r8,4(sp)
  806828:	00bfe00e 	bge	zero,r2,8067ac <__alt_mem_onchip_mem+0xff7fe7ac>
  80682c:	9de7c83a 	sub	r19,r19,r23
  806830:	98001f26 	beq	r19,zero,8068b0 <__sfvwrite_r+0x2fc>
  806834:	a0800217 	ldw	r2,8(r20)
  806838:	e5f9883a 	add	fp,fp,r23
  80683c:	95e5c83a 	sub	r18,r18,r23
  806840:	15efc83a 	sub	r23,r2,r23
  806844:	a5c00215 	stw	r23,8(r20)
  806848:	b83f8726 	beq	r23,zero,806668 <__alt_mem_onchip_mem+0xff7fe668>
  80684c:	903fe11e 	bne	r18,zero,8067d4 <__alt_mem_onchip_mem+0xff7fe7d4>
  806850:	8f000017 	ldw	fp,0(r17)
  806854:	8c800117 	ldw	r18,4(r17)
  806858:	0011883a 	mov	r8,zero
  80685c:	8c400204 	addi	r17,r17,8
  806860:	003fdb06 	br	8067d0 <__alt_mem_onchip_mem+0xff7fe7d0>
  806864:	180d883a 	mov	r6,r3
  806868:	e00b883a 	mov	r5,fp
  80686c:	da000115 	stw	r8,4(sp)
  806870:	d8c00015 	stw	r3,0(sp)
  806874:	0806fb40 	call	806fb4 <memmove>
  806878:	d8c00017 	ldw	r3,0(sp)
  80687c:	80800017 	ldw	r2,0(r16)
  806880:	800b883a 	mov	r5,r16
  806884:	a809883a 	mov	r4,r21
  806888:	10c5883a 	add	r2,r2,r3
  80688c:	80800015 	stw	r2,0(r16)
  806890:	d8c00015 	stw	r3,0(sp)
  806894:	0805ca80 	call	805ca8 <_fflush_r>
  806898:	d8c00017 	ldw	r3,0(sp)
  80689c:	da000117 	ldw	r8,4(sp)
  8068a0:	103fc21e 	bne	r2,zero,8067ac <__alt_mem_onchip_mem+0xff7fe7ac>
  8068a4:	182f883a 	mov	r23,r3
  8068a8:	9de7c83a 	sub	r19,r19,r23
  8068ac:	983fe11e 	bne	r19,zero,806834 <__alt_mem_onchip_mem+0xff7fe834>
  8068b0:	800b883a 	mov	r5,r16
  8068b4:	a809883a 	mov	r4,r21
  8068b8:	0805ca80 	call	805ca8 <_fflush_r>
  8068bc:	103fbb1e 	bne	r2,zero,8067ac <__alt_mem_onchip_mem+0xff7fe7ac>
  8068c0:	0011883a 	mov	r8,zero
  8068c4:	003fdb06 	br	806834 <__alt_mem_onchip_mem+0xff7fe834>
  8068c8:	94c0012e 	bgeu	r18,r19,8068d0 <__sfvwrite_r+0x31c>
  8068cc:	9027883a 	mov	r19,r18
  8068d0:	980d883a 	mov	r6,r19
  8068d4:	e00b883a 	mov	r5,fp
  8068d8:	0806fb40 	call	806fb4 <memmove>
  8068dc:	80800217 	ldw	r2,8(r16)
  8068e0:	80c00017 	ldw	r3,0(r16)
  8068e4:	14c5c83a 	sub	r2,r2,r19
  8068e8:	1cc7883a 	add	r3,r3,r19
  8068ec:	80800215 	stw	r2,8(r16)
  8068f0:	80c00015 	stw	r3,0(r16)
  8068f4:	10004326 	beq	r2,zero,806a04 <__sfvwrite_r+0x450>
  8068f8:	9805883a 	mov	r2,r19
  8068fc:	003f8606 	br	806718 <__alt_mem_onchip_mem+0xff7fe718>
  806900:	b00d883a 	mov	r6,r22
  806904:	e00b883a 	mov	r5,fp
  806908:	da000115 	stw	r8,4(sp)
  80690c:	0806fb40 	call	806fb4 <memmove>
  806910:	80800217 	ldw	r2,8(r16)
  806914:	80c00017 	ldw	r3,0(r16)
  806918:	da000117 	ldw	r8,4(sp)
  80691c:	1585c83a 	sub	r2,r2,r22
  806920:	1dad883a 	add	r22,r3,r22
  806924:	80800215 	stw	r2,8(r16)
  806928:	85800015 	stw	r22,0(r16)
  80692c:	003fbf06 	br	80682c <__alt_mem_onchip_mem+0xff7fe82c>
  806930:	81000017 	ldw	r4,0(r16)
  806934:	9027883a 	mov	r19,r18
  806938:	902f883a 	mov	r23,r18
  80693c:	003f6c06 	br	8066f0 <__alt_mem_onchip_mem+0xff7fe6f0>
  806940:	900d883a 	mov	r6,r18
  806944:	01400284 	movi	r5,10
  806948:	e009883a 	mov	r4,fp
  80694c:	0806d880 	call	806d88 <memchr>
  806950:	10003e26 	beq	r2,zero,806a4c <__sfvwrite_r+0x498>
  806954:	10800044 	addi	r2,r2,1
  806958:	1727c83a 	sub	r19,r2,fp
  80695c:	02000044 	movi	r8,1
  806960:	003f9d06 	br	8067d8 <__alt_mem_onchip_mem+0xff7fe7d8>
  806964:	80800517 	ldw	r2,20(r16)
  806968:	81400417 	ldw	r5,16(r16)
  80696c:	81c00017 	ldw	r7,0(r16)
  806970:	10a7883a 	add	r19,r2,r2
  806974:	9885883a 	add	r2,r19,r2
  806978:	1026d7fa 	srli	r19,r2,31
  80697c:	396dc83a 	sub	r22,r7,r5
  806980:	b1000044 	addi	r4,r22,1
  806984:	9885883a 	add	r2,r19,r2
  806988:	1027d07a 	srai	r19,r2,1
  80698c:	2485883a 	add	r2,r4,r18
  806990:	980d883a 	mov	r6,r19
  806994:	9880022e 	bgeu	r19,r2,8069a0 <__sfvwrite_r+0x3ec>
  806998:	1027883a 	mov	r19,r2
  80699c:	100d883a 	mov	r6,r2
  8069a0:	18c1000c 	andi	r3,r3,1024
  8069a4:	18001c26 	beq	r3,zero,806a18 <__sfvwrite_r+0x464>
  8069a8:	300b883a 	mov	r5,r6
  8069ac:	a809883a 	mov	r4,r21
  8069b0:	0800eac0 	call	800eac <_malloc_r>
  8069b4:	102f883a 	mov	r23,r2
  8069b8:	10002926 	beq	r2,zero,806a60 <__sfvwrite_r+0x4ac>
  8069bc:	81400417 	ldw	r5,16(r16)
  8069c0:	b00d883a 	mov	r6,r22
  8069c4:	1009883a 	mov	r4,r2
  8069c8:	0806e6c0 	call	806e6c <memcpy>
  8069cc:	8080030b 	ldhu	r2,12(r16)
  8069d0:	00fedfc4 	movi	r3,-1153
  8069d4:	10c4703a 	and	r2,r2,r3
  8069d8:	10802014 	ori	r2,r2,128
  8069dc:	8080030d 	sth	r2,12(r16)
  8069e0:	bd89883a 	add	r4,r23,r22
  8069e4:	9d8fc83a 	sub	r7,r19,r22
  8069e8:	85c00415 	stw	r23,16(r16)
  8069ec:	84c00515 	stw	r19,20(r16)
  8069f0:	81000015 	stw	r4,0(r16)
  8069f4:	9027883a 	mov	r19,r18
  8069f8:	81c00215 	stw	r7,8(r16)
  8069fc:	902f883a 	mov	r23,r18
  806a00:	003f3b06 	br	8066f0 <__alt_mem_onchip_mem+0xff7fe6f0>
  806a04:	800b883a 	mov	r5,r16
  806a08:	a809883a 	mov	r4,r21
  806a0c:	0805ca80 	call	805ca8 <_fflush_r>
  806a10:	103fb926 	beq	r2,zero,8068f8 <__alt_mem_onchip_mem+0xff7fe8f8>
  806a14:	003f6506 	br	8067ac <__alt_mem_onchip_mem+0xff7fe7ac>
  806a18:	a809883a 	mov	r4,r21
  806a1c:	080816c0 	call	80816c <_realloc_r>
  806a20:	102f883a 	mov	r23,r2
  806a24:	103fee1e 	bne	r2,zero,8069e0 <__alt_mem_onchip_mem+0xff7fe9e0>
  806a28:	81400417 	ldw	r5,16(r16)
  806a2c:	a809883a 	mov	r4,r21
  806a30:	08062a40 	call	8062a4 <_free_r>
  806a34:	8080030b 	ldhu	r2,12(r16)
  806a38:	00ffdfc4 	movi	r3,-129
  806a3c:	1884703a 	and	r2,r3,r2
  806a40:	00c00304 	movi	r3,12
  806a44:	a8c00015 	stw	r3,0(r21)
  806a48:	003f5906 	br	8067b0 <__alt_mem_onchip_mem+0xff7fe7b0>
  806a4c:	94c00044 	addi	r19,r18,1
  806a50:	02000044 	movi	r8,1
  806a54:	003f6006 	br	8067d8 <__alt_mem_onchip_mem+0xff7fe7d8>
  806a58:	00bfffc4 	movi	r2,-1
  806a5c:	003f0306 	br	80666c <__alt_mem_onchip_mem+0xff7fe66c>
  806a60:	00800304 	movi	r2,12
  806a64:	a8800015 	stw	r2,0(r21)
  806a68:	8080030b 	ldhu	r2,12(r16)
  806a6c:	003f5006 	br	8067b0 <__alt_mem_onchip_mem+0xff7fe7b0>

00806a70 <_fwalk>:
  806a70:	defff704 	addi	sp,sp,-36
  806a74:	dd000415 	stw	r20,16(sp)
  806a78:	dfc00815 	stw	ra,32(sp)
  806a7c:	ddc00715 	stw	r23,28(sp)
  806a80:	dd800615 	stw	r22,24(sp)
  806a84:	dd400515 	stw	r21,20(sp)
  806a88:	dcc00315 	stw	r19,12(sp)
  806a8c:	dc800215 	stw	r18,8(sp)
  806a90:	dc400115 	stw	r17,4(sp)
  806a94:	dc000015 	stw	r16,0(sp)
  806a98:	2500b804 	addi	r20,r4,736
  806a9c:	a0002326 	beq	r20,zero,806b2c <_fwalk+0xbc>
  806aa0:	282b883a 	mov	r21,r5
  806aa4:	002f883a 	mov	r23,zero
  806aa8:	05800044 	movi	r22,1
  806aac:	04ffffc4 	movi	r19,-1
  806ab0:	a4400117 	ldw	r17,4(r20)
  806ab4:	a4800217 	ldw	r18,8(r20)
  806ab8:	8c7fffc4 	addi	r17,r17,-1
  806abc:	88000d16 	blt	r17,zero,806af4 <_fwalk+0x84>
  806ac0:	94000304 	addi	r16,r18,12
  806ac4:	94800384 	addi	r18,r18,14
  806ac8:	8080000b 	ldhu	r2,0(r16)
  806acc:	8c7fffc4 	addi	r17,r17,-1
  806ad0:	813ffd04 	addi	r4,r16,-12
  806ad4:	b080042e 	bgeu	r22,r2,806ae8 <_fwalk+0x78>
  806ad8:	9080000f 	ldh	r2,0(r18)
  806adc:	14c00226 	beq	r2,r19,806ae8 <_fwalk+0x78>
  806ae0:	a83ee83a 	callr	r21
  806ae4:	b8aeb03a 	or	r23,r23,r2
  806ae8:	84001a04 	addi	r16,r16,104
  806aec:	94801a04 	addi	r18,r18,104
  806af0:	8cfff51e 	bne	r17,r19,806ac8 <__alt_mem_onchip_mem+0xff7feac8>
  806af4:	a5000017 	ldw	r20,0(r20)
  806af8:	a03fed1e 	bne	r20,zero,806ab0 <__alt_mem_onchip_mem+0xff7feab0>
  806afc:	b805883a 	mov	r2,r23
  806b00:	dfc00817 	ldw	ra,32(sp)
  806b04:	ddc00717 	ldw	r23,28(sp)
  806b08:	dd800617 	ldw	r22,24(sp)
  806b0c:	dd400517 	ldw	r21,20(sp)
  806b10:	dd000417 	ldw	r20,16(sp)
  806b14:	dcc00317 	ldw	r19,12(sp)
  806b18:	dc800217 	ldw	r18,8(sp)
  806b1c:	dc400117 	ldw	r17,4(sp)
  806b20:	dc000017 	ldw	r16,0(sp)
  806b24:	dec00904 	addi	sp,sp,36
  806b28:	f800283a 	ret
  806b2c:	002f883a 	mov	r23,zero
  806b30:	003ff206 	br	806afc <__alt_mem_onchip_mem+0xff7feafc>

00806b34 <_fwalk_reent>:
  806b34:	defff704 	addi	sp,sp,-36
  806b38:	dd000415 	stw	r20,16(sp)
  806b3c:	dfc00815 	stw	ra,32(sp)
  806b40:	ddc00715 	stw	r23,28(sp)
  806b44:	dd800615 	stw	r22,24(sp)
  806b48:	dd400515 	stw	r21,20(sp)
  806b4c:	dcc00315 	stw	r19,12(sp)
  806b50:	dc800215 	stw	r18,8(sp)
  806b54:	dc400115 	stw	r17,4(sp)
  806b58:	dc000015 	stw	r16,0(sp)
  806b5c:	2500b804 	addi	r20,r4,736
  806b60:	a0002326 	beq	r20,zero,806bf0 <_fwalk_reent+0xbc>
  806b64:	282b883a 	mov	r21,r5
  806b68:	2027883a 	mov	r19,r4
  806b6c:	002f883a 	mov	r23,zero
  806b70:	05800044 	movi	r22,1
  806b74:	04bfffc4 	movi	r18,-1
  806b78:	a4400117 	ldw	r17,4(r20)
  806b7c:	a4000217 	ldw	r16,8(r20)
  806b80:	8c7fffc4 	addi	r17,r17,-1
  806b84:	88000c16 	blt	r17,zero,806bb8 <_fwalk_reent+0x84>
  806b88:	84000304 	addi	r16,r16,12
  806b8c:	8080000b 	ldhu	r2,0(r16)
  806b90:	8c7fffc4 	addi	r17,r17,-1
  806b94:	817ffd04 	addi	r5,r16,-12
  806b98:	b080052e 	bgeu	r22,r2,806bb0 <_fwalk_reent+0x7c>
  806b9c:	8080008f 	ldh	r2,2(r16)
  806ba0:	9809883a 	mov	r4,r19
  806ba4:	14800226 	beq	r2,r18,806bb0 <_fwalk_reent+0x7c>
  806ba8:	a83ee83a 	callr	r21
  806bac:	b8aeb03a 	or	r23,r23,r2
  806bb0:	84001a04 	addi	r16,r16,104
  806bb4:	8cbff51e 	bne	r17,r18,806b8c <__alt_mem_onchip_mem+0xff7feb8c>
  806bb8:	a5000017 	ldw	r20,0(r20)
  806bbc:	a03fee1e 	bne	r20,zero,806b78 <__alt_mem_onchip_mem+0xff7feb78>
  806bc0:	b805883a 	mov	r2,r23
  806bc4:	dfc00817 	ldw	ra,32(sp)
  806bc8:	ddc00717 	ldw	r23,28(sp)
  806bcc:	dd800617 	ldw	r22,24(sp)
  806bd0:	dd400517 	ldw	r21,20(sp)
  806bd4:	dd000417 	ldw	r20,16(sp)
  806bd8:	dcc00317 	ldw	r19,12(sp)
  806bdc:	dc800217 	ldw	r18,8(sp)
  806be0:	dc400117 	ldw	r17,4(sp)
  806be4:	dc000017 	ldw	r16,0(sp)
  806be8:	dec00904 	addi	sp,sp,36
  806bec:	f800283a 	ret
  806bf0:	002f883a 	mov	r23,zero
  806bf4:	003ff206 	br	806bc0 <__alt_mem_onchip_mem+0xff7febc0>

00806bf8 <_isatty_r>:
  806bf8:	defffd04 	addi	sp,sp,-12
  806bfc:	dc000015 	stw	r16,0(sp)
  806c00:	04002074 	movhi	r16,129
  806c04:	dc400115 	stw	r17,4(sp)
  806c08:	8416a104 	addi	r16,r16,23172
  806c0c:	2023883a 	mov	r17,r4
  806c10:	2809883a 	mov	r4,r5
  806c14:	dfc00215 	stw	ra,8(sp)
  806c18:	80000015 	stw	zero,0(r16)
  806c1c:	080daa40 	call	80daa4 <isatty>
  806c20:	00ffffc4 	movi	r3,-1
  806c24:	10c00526 	beq	r2,r3,806c3c <_isatty_r+0x44>
  806c28:	dfc00217 	ldw	ra,8(sp)
  806c2c:	dc400117 	ldw	r17,4(sp)
  806c30:	dc000017 	ldw	r16,0(sp)
  806c34:	dec00304 	addi	sp,sp,12
  806c38:	f800283a 	ret
  806c3c:	80c00017 	ldw	r3,0(r16)
  806c40:	183ff926 	beq	r3,zero,806c28 <__alt_mem_onchip_mem+0xff7fec28>
  806c44:	88c00015 	stw	r3,0(r17)
  806c48:	003ff706 	br	806c28 <__alt_mem_onchip_mem+0xff7fec28>

00806c4c <_setlocale_r>:
  806c4c:	30001b26 	beq	r6,zero,806cbc <_setlocale_r+0x70>
  806c50:	01402074 	movhi	r5,129
  806c54:	defffe04 	addi	sp,sp,-8
  806c58:	2946c704 	addi	r5,r5,6940
  806c5c:	3009883a 	mov	r4,r6
  806c60:	dc000015 	stw	r16,0(sp)
  806c64:	dfc00115 	stw	ra,4(sp)
  806c68:	3021883a 	mov	r16,r6
  806c6c:	08087440 	call	808744 <strcmp>
  806c70:	1000061e 	bne	r2,zero,806c8c <_setlocale_r+0x40>
  806c74:	00802074 	movhi	r2,129
  806c78:	1086a804 	addi	r2,r2,6816
  806c7c:	dfc00117 	ldw	ra,4(sp)
  806c80:	dc000017 	ldw	r16,0(sp)
  806c84:	dec00204 	addi	sp,sp,8
  806c88:	f800283a 	ret
  806c8c:	01402074 	movhi	r5,129
  806c90:	2946a804 	addi	r5,r5,6816
  806c94:	8009883a 	mov	r4,r16
  806c98:	08087440 	call	808744 <strcmp>
  806c9c:	103ff526 	beq	r2,zero,806c74 <__alt_mem_onchip_mem+0xff7fec74>
  806ca0:	01402074 	movhi	r5,129
  806ca4:	2946b204 	addi	r5,r5,6856
  806ca8:	8009883a 	mov	r4,r16
  806cac:	08087440 	call	808744 <strcmp>
  806cb0:	103ff026 	beq	r2,zero,806c74 <__alt_mem_onchip_mem+0xff7fec74>
  806cb4:	0005883a 	mov	r2,zero
  806cb8:	003ff006 	br	806c7c <__alt_mem_onchip_mem+0xff7fec7c>
  806cbc:	00802074 	movhi	r2,129
  806cc0:	1086a804 	addi	r2,r2,6816
  806cc4:	f800283a 	ret

00806cc8 <__locale_charset>:
  806cc8:	00802074 	movhi	r2,129
  806ccc:	108a2604 	addi	r2,r2,10392
  806cd0:	f800283a 	ret

00806cd4 <__locale_mb_cur_max>:
  806cd4:	00802074 	movhi	r2,129
  806cd8:	108f4c04 	addi	r2,r2,15664
  806cdc:	10800017 	ldw	r2,0(r2)
  806ce0:	f800283a 	ret

00806ce4 <__locale_msgcharset>:
  806ce4:	00802074 	movhi	r2,129
  806ce8:	108a1e04 	addi	r2,r2,10360
  806cec:	f800283a 	ret

00806cf0 <__locale_cjk_lang>:
  806cf0:	0005883a 	mov	r2,zero
  806cf4:	f800283a 	ret

00806cf8 <_localeconv_r>:
  806cf8:	00802074 	movhi	r2,129
  806cfc:	108a2e04 	addi	r2,r2,10424
  806d00:	f800283a 	ret

00806d04 <setlocale>:
  806d04:	00802074 	movhi	r2,129
  806d08:	108f4904 	addi	r2,r2,15652
  806d0c:	280d883a 	mov	r6,r5
  806d10:	200b883a 	mov	r5,r4
  806d14:	11000017 	ldw	r4,0(r2)
  806d18:	0806c4c1 	jmpi	806c4c <_setlocale_r>

00806d1c <localeconv>:
  806d1c:	00802074 	movhi	r2,129
  806d20:	108a2e04 	addi	r2,r2,10424
  806d24:	f800283a 	ret

00806d28 <_lseek_r>:
  806d28:	defffd04 	addi	sp,sp,-12
  806d2c:	2805883a 	mov	r2,r5
  806d30:	dc000015 	stw	r16,0(sp)
  806d34:	04002074 	movhi	r16,129
  806d38:	dc400115 	stw	r17,4(sp)
  806d3c:	300b883a 	mov	r5,r6
  806d40:	8416a104 	addi	r16,r16,23172
  806d44:	2023883a 	mov	r17,r4
  806d48:	380d883a 	mov	r6,r7
  806d4c:	1009883a 	mov	r4,r2
  806d50:	dfc00215 	stw	ra,8(sp)
  806d54:	80000015 	stw	zero,0(r16)
  806d58:	080dc700 	call	80dc70 <lseek>
  806d5c:	00ffffc4 	movi	r3,-1
  806d60:	10c00526 	beq	r2,r3,806d78 <_lseek_r+0x50>
  806d64:	dfc00217 	ldw	ra,8(sp)
  806d68:	dc400117 	ldw	r17,4(sp)
  806d6c:	dc000017 	ldw	r16,0(sp)
  806d70:	dec00304 	addi	sp,sp,12
  806d74:	f800283a 	ret
  806d78:	80c00017 	ldw	r3,0(r16)
  806d7c:	183ff926 	beq	r3,zero,806d64 <__alt_mem_onchip_mem+0xff7fed64>
  806d80:	88c00015 	stw	r3,0(r17)
  806d84:	003ff706 	br	806d64 <__alt_mem_onchip_mem+0xff7fed64>

00806d88 <memchr>:
  806d88:	208000cc 	andi	r2,r4,3
  806d8c:	280f883a 	mov	r7,r5
  806d90:	10003426 	beq	r2,zero,806e64 <memchr+0xdc>
  806d94:	30bfffc4 	addi	r2,r6,-1
  806d98:	30001a26 	beq	r6,zero,806e04 <memchr+0x7c>
  806d9c:	20c00003 	ldbu	r3,0(r4)
  806da0:	29803fcc 	andi	r6,r5,255
  806da4:	30c0051e 	bne	r6,r3,806dbc <memchr+0x34>
  806da8:	00001806 	br	806e0c <memchr+0x84>
  806dac:	10001526 	beq	r2,zero,806e04 <memchr+0x7c>
  806db0:	20c00003 	ldbu	r3,0(r4)
  806db4:	10bfffc4 	addi	r2,r2,-1
  806db8:	30c01426 	beq	r6,r3,806e0c <memchr+0x84>
  806dbc:	21000044 	addi	r4,r4,1
  806dc0:	20c000cc 	andi	r3,r4,3
  806dc4:	183ff91e 	bne	r3,zero,806dac <__alt_mem_onchip_mem+0xff7fedac>
  806dc8:	020000c4 	movi	r8,3
  806dcc:	40801136 	bltu	r8,r2,806e14 <memchr+0x8c>
  806dd0:	10000c26 	beq	r2,zero,806e04 <memchr+0x7c>
  806dd4:	20c00003 	ldbu	r3,0(r4)
  806dd8:	29403fcc 	andi	r5,r5,255
  806ddc:	28c00b26 	beq	r5,r3,806e0c <memchr+0x84>
  806de0:	20c00044 	addi	r3,r4,1
  806de4:	39803fcc 	andi	r6,r7,255
  806de8:	2089883a 	add	r4,r4,r2
  806dec:	00000306 	br	806dfc <memchr+0x74>
  806df0:	18c00044 	addi	r3,r3,1
  806df4:	197fffc3 	ldbu	r5,-1(r3)
  806df8:	31400526 	beq	r6,r5,806e10 <memchr+0x88>
  806dfc:	1805883a 	mov	r2,r3
  806e00:	20fffb1e 	bne	r4,r3,806df0 <__alt_mem_onchip_mem+0xff7fedf0>
  806e04:	0005883a 	mov	r2,zero
  806e08:	f800283a 	ret
  806e0c:	2005883a 	mov	r2,r4
  806e10:	f800283a 	ret
  806e14:	28c03fcc 	andi	r3,r5,255
  806e18:	1812923a 	slli	r9,r3,8
  806e1c:	02ffbff4 	movhi	r11,65279
  806e20:	02a02074 	movhi	r10,32897
  806e24:	48d2b03a 	or	r9,r9,r3
  806e28:	4806943a 	slli	r3,r9,16
  806e2c:	5affbfc4 	addi	r11,r11,-257
  806e30:	52a02004 	addi	r10,r10,-32640
  806e34:	48d2b03a 	or	r9,r9,r3
  806e38:	20c00017 	ldw	r3,0(r4)
  806e3c:	48c6f03a 	xor	r3,r9,r3
  806e40:	1acd883a 	add	r6,r3,r11
  806e44:	00c6303a 	nor	r3,zero,r3
  806e48:	30c6703a 	and	r3,r6,r3
  806e4c:	1a86703a 	and	r3,r3,r10
  806e50:	183fe01e 	bne	r3,zero,806dd4 <__alt_mem_onchip_mem+0xff7fedd4>
  806e54:	10bfff04 	addi	r2,r2,-4
  806e58:	21000104 	addi	r4,r4,4
  806e5c:	40bff636 	bltu	r8,r2,806e38 <__alt_mem_onchip_mem+0xff7fee38>
  806e60:	003fdb06 	br	806dd0 <__alt_mem_onchip_mem+0xff7fedd0>
  806e64:	3005883a 	mov	r2,r6
  806e68:	003fd706 	br	806dc8 <__alt_mem_onchip_mem+0xff7fedc8>

00806e6c <memcpy>:
  806e6c:	defffd04 	addi	sp,sp,-12
  806e70:	dfc00215 	stw	ra,8(sp)
  806e74:	dc400115 	stw	r17,4(sp)
  806e78:	dc000015 	stw	r16,0(sp)
  806e7c:	00c003c4 	movi	r3,15
  806e80:	2005883a 	mov	r2,r4
  806e84:	1980452e 	bgeu	r3,r6,806f9c <memcpy+0x130>
  806e88:	2906b03a 	or	r3,r5,r4
  806e8c:	18c000cc 	andi	r3,r3,3
  806e90:	1800441e 	bne	r3,zero,806fa4 <memcpy+0x138>
  806e94:	347ffc04 	addi	r17,r6,-16
  806e98:	8822d13a 	srli	r17,r17,4
  806e9c:	28c00104 	addi	r3,r5,4
  806ea0:	23400104 	addi	r13,r4,4
  806ea4:	8820913a 	slli	r16,r17,4
  806ea8:	2b000204 	addi	r12,r5,8
  806eac:	22c00204 	addi	r11,r4,8
  806eb0:	84000504 	addi	r16,r16,20
  806eb4:	2a800304 	addi	r10,r5,12
  806eb8:	22400304 	addi	r9,r4,12
  806ebc:	2c21883a 	add	r16,r5,r16
  806ec0:	2811883a 	mov	r8,r5
  806ec4:	200f883a 	mov	r7,r4
  806ec8:	41000017 	ldw	r4,0(r8)
  806ecc:	1fc00017 	ldw	ra,0(r3)
  806ed0:	63c00017 	ldw	r15,0(r12)
  806ed4:	39000015 	stw	r4,0(r7)
  806ed8:	53800017 	ldw	r14,0(r10)
  806edc:	6fc00015 	stw	ra,0(r13)
  806ee0:	5bc00015 	stw	r15,0(r11)
  806ee4:	4b800015 	stw	r14,0(r9)
  806ee8:	18c00404 	addi	r3,r3,16
  806eec:	39c00404 	addi	r7,r7,16
  806ef0:	42000404 	addi	r8,r8,16
  806ef4:	6b400404 	addi	r13,r13,16
  806ef8:	63000404 	addi	r12,r12,16
  806efc:	5ac00404 	addi	r11,r11,16
  806f00:	52800404 	addi	r10,r10,16
  806f04:	4a400404 	addi	r9,r9,16
  806f08:	1c3fef1e 	bne	r3,r16,806ec8 <__alt_mem_onchip_mem+0xff7feec8>
  806f0c:	89c00044 	addi	r7,r17,1
  806f10:	380e913a 	slli	r7,r7,4
  806f14:	310003cc 	andi	r4,r6,15
  806f18:	02c000c4 	movi	r11,3
  806f1c:	11c7883a 	add	r3,r2,r7
  806f20:	29cb883a 	add	r5,r5,r7
  806f24:	5900212e 	bgeu	r11,r4,806fac <memcpy+0x140>
  806f28:	1813883a 	mov	r9,r3
  806f2c:	2811883a 	mov	r8,r5
  806f30:	200f883a 	mov	r7,r4
  806f34:	42800017 	ldw	r10,0(r8)
  806f38:	4a400104 	addi	r9,r9,4
  806f3c:	39ffff04 	addi	r7,r7,-4
  806f40:	4abfff15 	stw	r10,-4(r9)
  806f44:	42000104 	addi	r8,r8,4
  806f48:	59fffa36 	bltu	r11,r7,806f34 <__alt_mem_onchip_mem+0xff7fef34>
  806f4c:	213fff04 	addi	r4,r4,-4
  806f50:	2008d0ba 	srli	r4,r4,2
  806f54:	318000cc 	andi	r6,r6,3
  806f58:	21000044 	addi	r4,r4,1
  806f5c:	2109883a 	add	r4,r4,r4
  806f60:	2109883a 	add	r4,r4,r4
  806f64:	1907883a 	add	r3,r3,r4
  806f68:	290b883a 	add	r5,r5,r4
  806f6c:	30000626 	beq	r6,zero,806f88 <memcpy+0x11c>
  806f70:	198d883a 	add	r6,r3,r6
  806f74:	29c00003 	ldbu	r7,0(r5)
  806f78:	18c00044 	addi	r3,r3,1
  806f7c:	29400044 	addi	r5,r5,1
  806f80:	19ffffc5 	stb	r7,-1(r3)
  806f84:	19bffb1e 	bne	r3,r6,806f74 <__alt_mem_onchip_mem+0xff7fef74>
  806f88:	dfc00217 	ldw	ra,8(sp)
  806f8c:	dc400117 	ldw	r17,4(sp)
  806f90:	dc000017 	ldw	r16,0(sp)
  806f94:	dec00304 	addi	sp,sp,12
  806f98:	f800283a 	ret
  806f9c:	2007883a 	mov	r3,r4
  806fa0:	003ff206 	br	806f6c <__alt_mem_onchip_mem+0xff7fef6c>
  806fa4:	2007883a 	mov	r3,r4
  806fa8:	003ff106 	br	806f70 <__alt_mem_onchip_mem+0xff7fef70>
  806fac:	200d883a 	mov	r6,r4
  806fb0:	003fee06 	br	806f6c <__alt_mem_onchip_mem+0xff7fef6c>

00806fb4 <memmove>:
  806fb4:	2005883a 	mov	r2,r4
  806fb8:	29000b2e 	bgeu	r5,r4,806fe8 <memmove+0x34>
  806fbc:	298f883a 	add	r7,r5,r6
  806fc0:	21c0092e 	bgeu	r4,r7,806fe8 <memmove+0x34>
  806fc4:	2187883a 	add	r3,r4,r6
  806fc8:	198bc83a 	sub	r5,r3,r6
  806fcc:	30004826 	beq	r6,zero,8070f0 <memmove+0x13c>
  806fd0:	39ffffc4 	addi	r7,r7,-1
  806fd4:	39000003 	ldbu	r4,0(r7)
  806fd8:	18ffffc4 	addi	r3,r3,-1
  806fdc:	19000005 	stb	r4,0(r3)
  806fe0:	28fffb1e 	bne	r5,r3,806fd0 <__alt_mem_onchip_mem+0xff7fefd0>
  806fe4:	f800283a 	ret
  806fe8:	00c003c4 	movi	r3,15
  806fec:	1980412e 	bgeu	r3,r6,8070f4 <memmove+0x140>
  806ff0:	2886b03a 	or	r3,r5,r2
  806ff4:	18c000cc 	andi	r3,r3,3
  806ff8:	1800401e 	bne	r3,zero,8070fc <memmove+0x148>
  806ffc:	33fffc04 	addi	r15,r6,-16
  807000:	781ed13a 	srli	r15,r15,4
  807004:	28c00104 	addi	r3,r5,4
  807008:	13400104 	addi	r13,r2,4
  80700c:	781c913a 	slli	r14,r15,4
  807010:	2b000204 	addi	r12,r5,8
  807014:	12c00204 	addi	r11,r2,8
  807018:	73800504 	addi	r14,r14,20
  80701c:	2a800304 	addi	r10,r5,12
  807020:	12400304 	addi	r9,r2,12
  807024:	2b9d883a 	add	r14,r5,r14
  807028:	2811883a 	mov	r8,r5
  80702c:	100f883a 	mov	r7,r2
  807030:	41000017 	ldw	r4,0(r8)
  807034:	39c00404 	addi	r7,r7,16
  807038:	18c00404 	addi	r3,r3,16
  80703c:	393ffc15 	stw	r4,-16(r7)
  807040:	193ffc17 	ldw	r4,-16(r3)
  807044:	6b400404 	addi	r13,r13,16
  807048:	5ac00404 	addi	r11,r11,16
  80704c:	693ffc15 	stw	r4,-16(r13)
  807050:	61000017 	ldw	r4,0(r12)
  807054:	4a400404 	addi	r9,r9,16
  807058:	42000404 	addi	r8,r8,16
  80705c:	593ffc15 	stw	r4,-16(r11)
  807060:	51000017 	ldw	r4,0(r10)
  807064:	63000404 	addi	r12,r12,16
  807068:	52800404 	addi	r10,r10,16
  80706c:	493ffc15 	stw	r4,-16(r9)
  807070:	1bbfef1e 	bne	r3,r14,807030 <__alt_mem_onchip_mem+0xff7ff030>
  807074:	79000044 	addi	r4,r15,1
  807078:	2008913a 	slli	r4,r4,4
  80707c:	328003cc 	andi	r10,r6,15
  807080:	02c000c4 	movi	r11,3
  807084:	1107883a 	add	r3,r2,r4
  807088:	290b883a 	add	r5,r5,r4
  80708c:	5a801e2e 	bgeu	r11,r10,807108 <memmove+0x154>
  807090:	1813883a 	mov	r9,r3
  807094:	2811883a 	mov	r8,r5
  807098:	500f883a 	mov	r7,r10
  80709c:	41000017 	ldw	r4,0(r8)
  8070a0:	4a400104 	addi	r9,r9,4
  8070a4:	39ffff04 	addi	r7,r7,-4
  8070a8:	493fff15 	stw	r4,-4(r9)
  8070ac:	42000104 	addi	r8,r8,4
  8070b0:	59fffa36 	bltu	r11,r7,80709c <__alt_mem_onchip_mem+0xff7ff09c>
  8070b4:	513fff04 	addi	r4,r10,-4
  8070b8:	2008d0ba 	srli	r4,r4,2
  8070bc:	318000cc 	andi	r6,r6,3
  8070c0:	21000044 	addi	r4,r4,1
  8070c4:	2109883a 	add	r4,r4,r4
  8070c8:	2109883a 	add	r4,r4,r4
  8070cc:	1907883a 	add	r3,r3,r4
  8070d0:	290b883a 	add	r5,r5,r4
  8070d4:	30000b26 	beq	r6,zero,807104 <memmove+0x150>
  8070d8:	198d883a 	add	r6,r3,r6
  8070dc:	29c00003 	ldbu	r7,0(r5)
  8070e0:	18c00044 	addi	r3,r3,1
  8070e4:	29400044 	addi	r5,r5,1
  8070e8:	19ffffc5 	stb	r7,-1(r3)
  8070ec:	19bffb1e 	bne	r3,r6,8070dc <__alt_mem_onchip_mem+0xff7ff0dc>
  8070f0:	f800283a 	ret
  8070f4:	1007883a 	mov	r3,r2
  8070f8:	003ff606 	br	8070d4 <__alt_mem_onchip_mem+0xff7ff0d4>
  8070fc:	1007883a 	mov	r3,r2
  807100:	003ff506 	br	8070d8 <__alt_mem_onchip_mem+0xff7ff0d8>
  807104:	f800283a 	ret
  807108:	500d883a 	mov	r6,r10
  80710c:	003ff106 	br	8070d4 <__alt_mem_onchip_mem+0xff7ff0d4>

00807110 <_Balloc>:
  807110:	20801317 	ldw	r2,76(r4)
  807114:	defffc04 	addi	sp,sp,-16
  807118:	dc400115 	stw	r17,4(sp)
  80711c:	dc000015 	stw	r16,0(sp)
  807120:	dfc00315 	stw	ra,12(sp)
  807124:	dc800215 	stw	r18,8(sp)
  807128:	2023883a 	mov	r17,r4
  80712c:	2821883a 	mov	r16,r5
  807130:	10000f26 	beq	r2,zero,807170 <_Balloc+0x60>
  807134:	8407883a 	add	r3,r16,r16
  807138:	18c7883a 	add	r3,r3,r3
  80713c:	10c7883a 	add	r3,r2,r3
  807140:	18800017 	ldw	r2,0(r3)
  807144:	10001126 	beq	r2,zero,80718c <_Balloc+0x7c>
  807148:	11000017 	ldw	r4,0(r2)
  80714c:	19000015 	stw	r4,0(r3)
  807150:	10000415 	stw	zero,16(r2)
  807154:	10000315 	stw	zero,12(r2)
  807158:	dfc00317 	ldw	ra,12(sp)
  80715c:	dc800217 	ldw	r18,8(sp)
  807160:	dc400117 	ldw	r17,4(sp)
  807164:	dc000017 	ldw	r16,0(sp)
  807168:	dec00404 	addi	sp,sp,16
  80716c:	f800283a 	ret
  807170:	01800844 	movi	r6,33
  807174:	01400104 	movi	r5,4
  807178:	0809e680 	call	809e68 <_calloc_r>
  80717c:	88801315 	stw	r2,76(r17)
  807180:	103fec1e 	bne	r2,zero,807134 <__alt_mem_onchip_mem+0xff7ff134>
  807184:	0005883a 	mov	r2,zero
  807188:	003ff306 	br	807158 <__alt_mem_onchip_mem+0xff7ff158>
  80718c:	01400044 	movi	r5,1
  807190:	2c24983a 	sll	r18,r5,r16
  807194:	8809883a 	mov	r4,r17
  807198:	91800144 	addi	r6,r18,5
  80719c:	318d883a 	add	r6,r6,r6
  8071a0:	318d883a 	add	r6,r6,r6
  8071a4:	0809e680 	call	809e68 <_calloc_r>
  8071a8:	103ff626 	beq	r2,zero,807184 <__alt_mem_onchip_mem+0xff7ff184>
  8071ac:	14000115 	stw	r16,4(r2)
  8071b0:	14800215 	stw	r18,8(r2)
  8071b4:	003fe606 	br	807150 <__alt_mem_onchip_mem+0xff7ff150>

008071b8 <_Bfree>:
  8071b8:	28000826 	beq	r5,zero,8071dc <_Bfree+0x24>
  8071bc:	28c00117 	ldw	r3,4(r5)
  8071c0:	20801317 	ldw	r2,76(r4)
  8071c4:	18c7883a 	add	r3,r3,r3
  8071c8:	18c7883a 	add	r3,r3,r3
  8071cc:	10c5883a 	add	r2,r2,r3
  8071d0:	10c00017 	ldw	r3,0(r2)
  8071d4:	28c00015 	stw	r3,0(r5)
  8071d8:	11400015 	stw	r5,0(r2)
  8071dc:	f800283a 	ret

008071e0 <__multadd>:
  8071e0:	defffa04 	addi	sp,sp,-24
  8071e4:	dc800315 	stw	r18,12(sp)
  8071e8:	dc400215 	stw	r17,8(sp)
  8071ec:	dc000115 	stw	r16,4(sp)
  8071f0:	2823883a 	mov	r17,r5
  8071f4:	2c000417 	ldw	r16,16(r5)
  8071f8:	dfc00515 	stw	ra,20(sp)
  8071fc:	dcc00415 	stw	r19,16(sp)
  807200:	2025883a 	mov	r18,r4
  807204:	29400504 	addi	r5,r5,20
  807208:	0011883a 	mov	r8,zero
  80720c:	28c00017 	ldw	r3,0(r5)
  807210:	29400104 	addi	r5,r5,4
  807214:	42000044 	addi	r8,r8,1
  807218:	18bfffcc 	andi	r2,r3,65535
  80721c:	1185383a 	mul	r2,r2,r6
  807220:	1806d43a 	srli	r3,r3,16
  807224:	11cf883a 	add	r7,r2,r7
  807228:	3808d43a 	srli	r4,r7,16
  80722c:	1987383a 	mul	r3,r3,r6
  807230:	38bfffcc 	andi	r2,r7,65535
  807234:	1907883a 	add	r3,r3,r4
  807238:	1808943a 	slli	r4,r3,16
  80723c:	180ed43a 	srli	r7,r3,16
  807240:	2085883a 	add	r2,r4,r2
  807244:	28bfff15 	stw	r2,-4(r5)
  807248:	443ff016 	blt	r8,r16,80720c <__alt_mem_onchip_mem+0xff7ff20c>
  80724c:	38000926 	beq	r7,zero,807274 <__multadd+0x94>
  807250:	88800217 	ldw	r2,8(r17)
  807254:	80800f0e 	bge	r16,r2,807294 <__multadd+0xb4>
  807258:	80800144 	addi	r2,r16,5
  80725c:	1085883a 	add	r2,r2,r2
  807260:	1085883a 	add	r2,r2,r2
  807264:	8885883a 	add	r2,r17,r2
  807268:	11c00015 	stw	r7,0(r2)
  80726c:	84000044 	addi	r16,r16,1
  807270:	8c000415 	stw	r16,16(r17)
  807274:	8805883a 	mov	r2,r17
  807278:	dfc00517 	ldw	ra,20(sp)
  80727c:	dcc00417 	ldw	r19,16(sp)
  807280:	dc800317 	ldw	r18,12(sp)
  807284:	dc400217 	ldw	r17,8(sp)
  807288:	dc000117 	ldw	r16,4(sp)
  80728c:	dec00604 	addi	sp,sp,24
  807290:	f800283a 	ret
  807294:	89400117 	ldw	r5,4(r17)
  807298:	9009883a 	mov	r4,r18
  80729c:	d9c00015 	stw	r7,0(sp)
  8072a0:	29400044 	addi	r5,r5,1
  8072a4:	08071100 	call	807110 <_Balloc>
  8072a8:	89800417 	ldw	r6,16(r17)
  8072ac:	89400304 	addi	r5,r17,12
  8072b0:	11000304 	addi	r4,r2,12
  8072b4:	31800084 	addi	r6,r6,2
  8072b8:	318d883a 	add	r6,r6,r6
  8072bc:	318d883a 	add	r6,r6,r6
  8072c0:	1027883a 	mov	r19,r2
  8072c4:	0806e6c0 	call	806e6c <memcpy>
  8072c8:	d9c00017 	ldw	r7,0(sp)
  8072cc:	88000a26 	beq	r17,zero,8072f8 <__multadd+0x118>
  8072d0:	88c00117 	ldw	r3,4(r17)
  8072d4:	90801317 	ldw	r2,76(r18)
  8072d8:	18c7883a 	add	r3,r3,r3
  8072dc:	18c7883a 	add	r3,r3,r3
  8072e0:	10c5883a 	add	r2,r2,r3
  8072e4:	10c00017 	ldw	r3,0(r2)
  8072e8:	88c00015 	stw	r3,0(r17)
  8072ec:	14400015 	stw	r17,0(r2)
  8072f0:	9823883a 	mov	r17,r19
  8072f4:	003fd806 	br	807258 <__alt_mem_onchip_mem+0xff7ff258>
  8072f8:	9823883a 	mov	r17,r19
  8072fc:	003fd606 	br	807258 <__alt_mem_onchip_mem+0xff7ff258>

00807300 <__s2b>:
  807300:	defff904 	addi	sp,sp,-28
  807304:	dc400115 	stw	r17,4(sp)
  807308:	dc000015 	stw	r16,0(sp)
  80730c:	2023883a 	mov	r17,r4
  807310:	2821883a 	mov	r16,r5
  807314:	39000204 	addi	r4,r7,8
  807318:	01400244 	movi	r5,9
  80731c:	dcc00315 	stw	r19,12(sp)
  807320:	dc800215 	stw	r18,8(sp)
  807324:	dfc00615 	stw	ra,24(sp)
  807328:	dd400515 	stw	r21,20(sp)
  80732c:	dd000415 	stw	r20,16(sp)
  807330:	3825883a 	mov	r18,r7
  807334:	3027883a 	mov	r19,r6
  807338:	080b0280 	call	80b028 <__divsi3>
  80733c:	00c00044 	movi	r3,1
  807340:	000b883a 	mov	r5,zero
  807344:	1880030e 	bge	r3,r2,807354 <__s2b+0x54>
  807348:	18c7883a 	add	r3,r3,r3
  80734c:	29400044 	addi	r5,r5,1
  807350:	18bffd16 	blt	r3,r2,807348 <__alt_mem_onchip_mem+0xff7ff348>
  807354:	8809883a 	mov	r4,r17
  807358:	08071100 	call	807110 <_Balloc>
  80735c:	d8c00717 	ldw	r3,28(sp)
  807360:	10c00515 	stw	r3,20(r2)
  807364:	00c00044 	movi	r3,1
  807368:	10c00415 	stw	r3,16(r2)
  80736c:	00c00244 	movi	r3,9
  807370:	1cc0210e 	bge	r3,r19,8073f8 <__s2b+0xf8>
  807374:	80eb883a 	add	r21,r16,r3
  807378:	a829883a 	mov	r20,r21
  80737c:	84e1883a 	add	r16,r16,r19
  807380:	a1c00007 	ldb	r7,0(r20)
  807384:	01800284 	movi	r6,10
  807388:	a5000044 	addi	r20,r20,1
  80738c:	100b883a 	mov	r5,r2
  807390:	39fff404 	addi	r7,r7,-48
  807394:	8809883a 	mov	r4,r17
  807398:	08071e00 	call	8071e0 <__multadd>
  80739c:	a43ff81e 	bne	r20,r16,807380 <__alt_mem_onchip_mem+0xff7ff380>
  8073a0:	ace1883a 	add	r16,r21,r19
  8073a4:	843ffe04 	addi	r16,r16,-8
  8073a8:	9c800a0e 	bge	r19,r18,8073d4 <__s2b+0xd4>
  8073ac:	94e5c83a 	sub	r18,r18,r19
  8073b0:	84a5883a 	add	r18,r16,r18
  8073b4:	81c00007 	ldb	r7,0(r16)
  8073b8:	01800284 	movi	r6,10
  8073bc:	84000044 	addi	r16,r16,1
  8073c0:	100b883a 	mov	r5,r2
  8073c4:	39fff404 	addi	r7,r7,-48
  8073c8:	8809883a 	mov	r4,r17
  8073cc:	08071e00 	call	8071e0 <__multadd>
  8073d0:	84bff81e 	bne	r16,r18,8073b4 <__alt_mem_onchip_mem+0xff7ff3b4>
  8073d4:	dfc00617 	ldw	ra,24(sp)
  8073d8:	dd400517 	ldw	r21,20(sp)
  8073dc:	dd000417 	ldw	r20,16(sp)
  8073e0:	dcc00317 	ldw	r19,12(sp)
  8073e4:	dc800217 	ldw	r18,8(sp)
  8073e8:	dc400117 	ldw	r17,4(sp)
  8073ec:	dc000017 	ldw	r16,0(sp)
  8073f0:	dec00704 	addi	sp,sp,28
  8073f4:	f800283a 	ret
  8073f8:	84000284 	addi	r16,r16,10
  8073fc:	1827883a 	mov	r19,r3
  807400:	003fe906 	br	8073a8 <__alt_mem_onchip_mem+0xff7ff3a8>

00807404 <__hi0bits>:
  807404:	20bfffec 	andhi	r2,r4,65535
  807408:	1000141e 	bne	r2,zero,80745c <__hi0bits+0x58>
  80740c:	2008943a 	slli	r4,r4,16
  807410:	00800404 	movi	r2,16
  807414:	20ffc02c 	andhi	r3,r4,65280
  807418:	1800021e 	bne	r3,zero,807424 <__hi0bits+0x20>
  80741c:	2008923a 	slli	r4,r4,8
  807420:	10800204 	addi	r2,r2,8
  807424:	20fc002c 	andhi	r3,r4,61440
  807428:	1800021e 	bne	r3,zero,807434 <__hi0bits+0x30>
  80742c:	2008913a 	slli	r4,r4,4
  807430:	10800104 	addi	r2,r2,4
  807434:	20f0002c 	andhi	r3,r4,49152
  807438:	1800031e 	bne	r3,zero,807448 <__hi0bits+0x44>
  80743c:	2109883a 	add	r4,r4,r4
  807440:	10800084 	addi	r2,r2,2
  807444:	2109883a 	add	r4,r4,r4
  807448:	20000316 	blt	r4,zero,807458 <__hi0bits+0x54>
  80744c:	2110002c 	andhi	r4,r4,16384
  807450:	2000041e 	bne	r4,zero,807464 <__hi0bits+0x60>
  807454:	00800804 	movi	r2,32
  807458:	f800283a 	ret
  80745c:	0005883a 	mov	r2,zero
  807460:	003fec06 	br	807414 <__alt_mem_onchip_mem+0xff7ff414>
  807464:	10800044 	addi	r2,r2,1
  807468:	f800283a 	ret

0080746c <__lo0bits>:
  80746c:	20c00017 	ldw	r3,0(r4)
  807470:	188001cc 	andi	r2,r3,7
  807474:	10000826 	beq	r2,zero,807498 <__lo0bits+0x2c>
  807478:	1880004c 	andi	r2,r3,1
  80747c:	1000211e 	bne	r2,zero,807504 <__lo0bits+0x98>
  807480:	1880008c 	andi	r2,r3,2
  807484:	1000211e 	bne	r2,zero,80750c <__lo0bits+0xa0>
  807488:	1806d0ba 	srli	r3,r3,2
  80748c:	00800084 	movi	r2,2
  807490:	20c00015 	stw	r3,0(r4)
  807494:	f800283a 	ret
  807498:	18bfffcc 	andi	r2,r3,65535
  80749c:	10001326 	beq	r2,zero,8074ec <__lo0bits+0x80>
  8074a0:	0005883a 	mov	r2,zero
  8074a4:	19403fcc 	andi	r5,r3,255
  8074a8:	2800021e 	bne	r5,zero,8074b4 <__lo0bits+0x48>
  8074ac:	1806d23a 	srli	r3,r3,8
  8074b0:	10800204 	addi	r2,r2,8
  8074b4:	194003cc 	andi	r5,r3,15
  8074b8:	2800021e 	bne	r5,zero,8074c4 <__lo0bits+0x58>
  8074bc:	1806d13a 	srli	r3,r3,4
  8074c0:	10800104 	addi	r2,r2,4
  8074c4:	194000cc 	andi	r5,r3,3
  8074c8:	2800021e 	bne	r5,zero,8074d4 <__lo0bits+0x68>
  8074cc:	1806d0ba 	srli	r3,r3,2
  8074d0:	10800084 	addi	r2,r2,2
  8074d4:	1940004c 	andi	r5,r3,1
  8074d8:	2800081e 	bne	r5,zero,8074fc <__lo0bits+0x90>
  8074dc:	1806d07a 	srli	r3,r3,1
  8074e0:	1800051e 	bne	r3,zero,8074f8 <__lo0bits+0x8c>
  8074e4:	00800804 	movi	r2,32
  8074e8:	f800283a 	ret
  8074ec:	1806d43a 	srli	r3,r3,16
  8074f0:	00800404 	movi	r2,16
  8074f4:	003feb06 	br	8074a4 <__alt_mem_onchip_mem+0xff7ff4a4>
  8074f8:	10800044 	addi	r2,r2,1
  8074fc:	20c00015 	stw	r3,0(r4)
  807500:	f800283a 	ret
  807504:	0005883a 	mov	r2,zero
  807508:	f800283a 	ret
  80750c:	1806d07a 	srli	r3,r3,1
  807510:	00800044 	movi	r2,1
  807514:	20c00015 	stw	r3,0(r4)
  807518:	f800283a 	ret

0080751c <__i2b>:
  80751c:	defffd04 	addi	sp,sp,-12
  807520:	dc000015 	stw	r16,0(sp)
  807524:	04000044 	movi	r16,1
  807528:	dc400115 	stw	r17,4(sp)
  80752c:	2823883a 	mov	r17,r5
  807530:	800b883a 	mov	r5,r16
  807534:	dfc00215 	stw	ra,8(sp)
  807538:	08071100 	call	807110 <_Balloc>
  80753c:	14400515 	stw	r17,20(r2)
  807540:	14000415 	stw	r16,16(r2)
  807544:	dfc00217 	ldw	ra,8(sp)
  807548:	dc400117 	ldw	r17,4(sp)
  80754c:	dc000017 	ldw	r16,0(sp)
  807550:	dec00304 	addi	sp,sp,12
  807554:	f800283a 	ret

00807558 <__multiply>:
  807558:	defffa04 	addi	sp,sp,-24
  80755c:	dcc00315 	stw	r19,12(sp)
  807560:	dc800215 	stw	r18,8(sp)
  807564:	34c00417 	ldw	r19,16(r6)
  807568:	2c800417 	ldw	r18,16(r5)
  80756c:	dd000415 	stw	r20,16(sp)
  807570:	dc400115 	stw	r17,4(sp)
  807574:	dfc00515 	stw	ra,20(sp)
  807578:	dc000015 	stw	r16,0(sp)
  80757c:	2829883a 	mov	r20,r5
  807580:	3023883a 	mov	r17,r6
  807584:	94c0050e 	bge	r18,r19,80759c <__multiply+0x44>
  807588:	9007883a 	mov	r3,r18
  80758c:	3029883a 	mov	r20,r6
  807590:	9825883a 	mov	r18,r19
  807594:	2823883a 	mov	r17,r5
  807598:	1827883a 	mov	r19,r3
  80759c:	a0800217 	ldw	r2,8(r20)
  8075a0:	94e1883a 	add	r16,r18,r19
  8075a4:	a1400117 	ldw	r5,4(r20)
  8075a8:	1400010e 	bge	r2,r16,8075b0 <__multiply+0x58>
  8075ac:	29400044 	addi	r5,r5,1
  8075b0:	08071100 	call	807110 <_Balloc>
  8075b4:	8415883a 	add	r10,r16,r16
  8075b8:	12c00504 	addi	r11,r2,20
  8075bc:	5295883a 	add	r10,r10,r10
  8075c0:	5a95883a 	add	r10,r11,r10
  8075c4:	5807883a 	mov	r3,r11
  8075c8:	5a80032e 	bgeu	r11,r10,8075d8 <__multiply+0x80>
  8075cc:	18000015 	stw	zero,0(r3)
  8075d0:	18c00104 	addi	r3,r3,4
  8075d4:	1abffd36 	bltu	r3,r10,8075cc <__alt_mem_onchip_mem+0xff7ff5cc>
  8075d8:	9ce7883a 	add	r19,r19,r19
  8075dc:	94a5883a 	add	r18,r18,r18
  8075e0:	89800504 	addi	r6,r17,20
  8075e4:	9ce7883a 	add	r19,r19,r19
  8075e8:	a3400504 	addi	r13,r20,20
  8075ec:	94a5883a 	add	r18,r18,r18
  8075f0:	34d9883a 	add	r12,r6,r19
  8075f4:	6c93883a 	add	r9,r13,r18
  8075f8:	3300422e 	bgeu	r6,r12,807704 <__multiply+0x1ac>
  8075fc:	37c00017 	ldw	ra,0(r6)
  807600:	fbffffcc 	andi	r15,ra,65535
  807604:	78001b26 	beq	r15,zero,807674 <__multiply+0x11c>
  807608:	5811883a 	mov	r8,r11
  80760c:	681d883a 	mov	r14,r13
  807610:	000f883a 	mov	r7,zero
  807614:	71000017 	ldw	r4,0(r14)
  807618:	40c00017 	ldw	r3,0(r8)
  80761c:	73800104 	addi	r14,r14,4
  807620:	217fffcc 	andi	r5,r4,65535
  807624:	2bcb383a 	mul	r5,r5,r15
  807628:	2008d43a 	srli	r4,r4,16
  80762c:	1c7fffcc 	andi	r17,r3,65535
  807630:	2c4b883a 	add	r5,r5,r17
  807634:	29cb883a 	add	r5,r5,r7
  807638:	23c9383a 	mul	r4,r4,r15
  80763c:	1806d43a 	srli	r3,r3,16
  807640:	280ed43a 	srli	r7,r5,16
  807644:	297fffcc 	andi	r5,r5,65535
  807648:	20c7883a 	add	r3,r4,r3
  80764c:	19c7883a 	add	r3,r3,r7
  807650:	1808943a 	slli	r4,r3,16
  807654:	4023883a 	mov	r17,r8
  807658:	180ed43a 	srli	r7,r3,16
  80765c:	214ab03a 	or	r5,r4,r5
  807660:	41400015 	stw	r5,0(r8)
  807664:	42000104 	addi	r8,r8,4
  807668:	727fea36 	bltu	r14,r9,807614 <__alt_mem_onchip_mem+0xff7ff614>
  80766c:	89c00115 	stw	r7,4(r17)
  807670:	37c00017 	ldw	ra,0(r6)
  807674:	f83ed43a 	srli	ra,ra,16
  807678:	f8001f26 	beq	ra,zero,8076f8 <__multiply+0x1a0>
  80767c:	58c00017 	ldw	r3,0(r11)
  807680:	681d883a 	mov	r14,r13
  807684:	581f883a 	mov	r15,r11
  807688:	1811883a 	mov	r8,r3
  80768c:	5825883a 	mov	r18,r11
  807690:	000f883a 	mov	r7,zero
  807694:	00000106 	br	80769c <__multiply+0x144>
  807698:	8825883a 	mov	r18,r17
  80769c:	7140000b 	ldhu	r5,0(r14)
  8076a0:	4010d43a 	srli	r8,r8,16
  8076a4:	193fffcc 	andi	r4,r3,65535
  8076a8:	2fcb383a 	mul	r5,r5,ra
  8076ac:	7bc00104 	addi	r15,r15,4
  8076b0:	73800104 	addi	r14,r14,4
  8076b4:	2a0b883a 	add	r5,r5,r8
  8076b8:	29cb883a 	add	r5,r5,r7
  8076bc:	2806943a 	slli	r3,r5,16
  8076c0:	94400104 	addi	r17,r18,4
  8076c4:	280ad43a 	srli	r5,r5,16
  8076c8:	1908b03a 	or	r4,r3,r4
  8076cc:	793fff15 	stw	r4,-4(r15)
  8076d0:	70ffff17 	ldw	r3,-4(r14)
  8076d4:	8a000017 	ldw	r8,0(r17)
  8076d8:	1806d43a 	srli	r3,r3,16
  8076dc:	413fffcc 	andi	r4,r8,65535
  8076e0:	1fc7383a 	mul	r3,r3,ra
  8076e4:	1907883a 	add	r3,r3,r4
  8076e8:	1947883a 	add	r3,r3,r5
  8076ec:	180ed43a 	srli	r7,r3,16
  8076f0:	727fe936 	bltu	r14,r9,807698 <__alt_mem_onchip_mem+0xff7ff698>
  8076f4:	90c00115 	stw	r3,4(r18)
  8076f8:	31800104 	addi	r6,r6,4
  8076fc:	5ac00104 	addi	r11,r11,4
  807700:	333fbe36 	bltu	r6,r12,8075fc <__alt_mem_onchip_mem+0xff7ff5fc>
  807704:	0400090e 	bge	zero,r16,80772c <__multiply+0x1d4>
  807708:	50ffff17 	ldw	r3,-4(r10)
  80770c:	52bfff04 	addi	r10,r10,-4
  807710:	18000326 	beq	r3,zero,807720 <__multiply+0x1c8>
  807714:	00000506 	br	80772c <__multiply+0x1d4>
  807718:	50c00017 	ldw	r3,0(r10)
  80771c:	1800031e 	bne	r3,zero,80772c <__multiply+0x1d4>
  807720:	843fffc4 	addi	r16,r16,-1
  807724:	52bfff04 	addi	r10,r10,-4
  807728:	803ffb1e 	bne	r16,zero,807718 <__alt_mem_onchip_mem+0xff7ff718>
  80772c:	14000415 	stw	r16,16(r2)
  807730:	dfc00517 	ldw	ra,20(sp)
  807734:	dd000417 	ldw	r20,16(sp)
  807738:	dcc00317 	ldw	r19,12(sp)
  80773c:	dc800217 	ldw	r18,8(sp)
  807740:	dc400117 	ldw	r17,4(sp)
  807744:	dc000017 	ldw	r16,0(sp)
  807748:	dec00604 	addi	sp,sp,24
  80774c:	f800283a 	ret

00807750 <__pow5mult>:
  807750:	defffa04 	addi	sp,sp,-24
  807754:	dcc00315 	stw	r19,12(sp)
  807758:	dc000015 	stw	r16,0(sp)
  80775c:	dfc00515 	stw	ra,20(sp)
  807760:	dd000415 	stw	r20,16(sp)
  807764:	dc800215 	stw	r18,8(sp)
  807768:	dc400115 	stw	r17,4(sp)
  80776c:	308000cc 	andi	r2,r6,3
  807770:	3021883a 	mov	r16,r6
  807774:	2027883a 	mov	r19,r4
  807778:	10002f1e 	bne	r2,zero,807838 <__pow5mult+0xe8>
  80777c:	2825883a 	mov	r18,r5
  807780:	8021d0ba 	srai	r16,r16,2
  807784:	80001a26 	beq	r16,zero,8077f0 <__pow5mult+0xa0>
  807788:	9c401217 	ldw	r17,72(r19)
  80778c:	8800061e 	bne	r17,zero,8077a8 <__pow5mult+0x58>
  807790:	00003406 	br	807864 <__pow5mult+0x114>
  807794:	8021d07a 	srai	r16,r16,1
  807798:	80001526 	beq	r16,zero,8077f0 <__pow5mult+0xa0>
  80779c:	88800017 	ldw	r2,0(r17)
  8077a0:	10001c26 	beq	r2,zero,807814 <__pow5mult+0xc4>
  8077a4:	1023883a 	mov	r17,r2
  8077a8:	8080004c 	andi	r2,r16,1
  8077ac:	103ff926 	beq	r2,zero,807794 <__alt_mem_onchip_mem+0xff7ff794>
  8077b0:	880d883a 	mov	r6,r17
  8077b4:	900b883a 	mov	r5,r18
  8077b8:	9809883a 	mov	r4,r19
  8077bc:	08075580 	call	807558 <__multiply>
  8077c0:	90001b26 	beq	r18,zero,807830 <__pow5mult+0xe0>
  8077c4:	91000117 	ldw	r4,4(r18)
  8077c8:	98c01317 	ldw	r3,76(r19)
  8077cc:	8021d07a 	srai	r16,r16,1
  8077d0:	2109883a 	add	r4,r4,r4
  8077d4:	2109883a 	add	r4,r4,r4
  8077d8:	1907883a 	add	r3,r3,r4
  8077dc:	19000017 	ldw	r4,0(r3)
  8077e0:	91000015 	stw	r4,0(r18)
  8077e4:	1c800015 	stw	r18,0(r3)
  8077e8:	1025883a 	mov	r18,r2
  8077ec:	803feb1e 	bne	r16,zero,80779c <__alt_mem_onchip_mem+0xff7ff79c>
  8077f0:	9005883a 	mov	r2,r18
  8077f4:	dfc00517 	ldw	ra,20(sp)
  8077f8:	dd000417 	ldw	r20,16(sp)
  8077fc:	dcc00317 	ldw	r19,12(sp)
  807800:	dc800217 	ldw	r18,8(sp)
  807804:	dc400117 	ldw	r17,4(sp)
  807808:	dc000017 	ldw	r16,0(sp)
  80780c:	dec00604 	addi	sp,sp,24
  807810:	f800283a 	ret
  807814:	880d883a 	mov	r6,r17
  807818:	880b883a 	mov	r5,r17
  80781c:	9809883a 	mov	r4,r19
  807820:	08075580 	call	807558 <__multiply>
  807824:	88800015 	stw	r2,0(r17)
  807828:	10000015 	stw	zero,0(r2)
  80782c:	003fdd06 	br	8077a4 <__alt_mem_onchip_mem+0xff7ff7a4>
  807830:	1025883a 	mov	r18,r2
  807834:	003fd706 	br	807794 <__alt_mem_onchip_mem+0xff7ff794>
  807838:	10bfffc4 	addi	r2,r2,-1
  80783c:	1085883a 	add	r2,r2,r2
  807840:	00c02074 	movhi	r3,129
  807844:	18c6ca04 	addi	r3,r3,6952
  807848:	1085883a 	add	r2,r2,r2
  80784c:	1885883a 	add	r2,r3,r2
  807850:	11800017 	ldw	r6,0(r2)
  807854:	000f883a 	mov	r7,zero
  807858:	08071e00 	call	8071e0 <__multadd>
  80785c:	1025883a 	mov	r18,r2
  807860:	003fc706 	br	807780 <__alt_mem_onchip_mem+0xff7ff780>
  807864:	05000044 	movi	r20,1
  807868:	a00b883a 	mov	r5,r20
  80786c:	9809883a 	mov	r4,r19
  807870:	08071100 	call	807110 <_Balloc>
  807874:	1023883a 	mov	r17,r2
  807878:	00809c44 	movi	r2,625
  80787c:	88800515 	stw	r2,20(r17)
  807880:	8d000415 	stw	r20,16(r17)
  807884:	9c401215 	stw	r17,72(r19)
  807888:	88000015 	stw	zero,0(r17)
  80788c:	003fc606 	br	8077a8 <__alt_mem_onchip_mem+0xff7ff7a8>

00807890 <__lshift>:
  807890:	defff904 	addi	sp,sp,-28
  807894:	dd400515 	stw	r21,20(sp)
  807898:	dcc00315 	stw	r19,12(sp)
  80789c:	302bd17a 	srai	r21,r6,5
  8078a0:	2cc00417 	ldw	r19,16(r5)
  8078a4:	28800217 	ldw	r2,8(r5)
  8078a8:	dd000415 	stw	r20,16(sp)
  8078ac:	ace7883a 	add	r19,r21,r19
  8078b0:	dc800215 	stw	r18,8(sp)
  8078b4:	dc400115 	stw	r17,4(sp)
  8078b8:	dc000015 	stw	r16,0(sp)
  8078bc:	dfc00615 	stw	ra,24(sp)
  8078c0:	9c000044 	addi	r16,r19,1
  8078c4:	2823883a 	mov	r17,r5
  8078c8:	3029883a 	mov	r20,r6
  8078cc:	2025883a 	mov	r18,r4
  8078d0:	29400117 	ldw	r5,4(r5)
  8078d4:	1400030e 	bge	r2,r16,8078e4 <__lshift+0x54>
  8078d8:	1085883a 	add	r2,r2,r2
  8078dc:	29400044 	addi	r5,r5,1
  8078e0:	143ffd16 	blt	r2,r16,8078d8 <__alt_mem_onchip_mem+0xff7ff8d8>
  8078e4:	9009883a 	mov	r4,r18
  8078e8:	08071100 	call	807110 <_Balloc>
  8078ec:	10c00504 	addi	r3,r2,20
  8078f0:	0540070e 	bge	zero,r21,807910 <__lshift+0x80>
  8078f4:	ad6b883a 	add	r21,r21,r21
  8078f8:	ad6b883a 	add	r21,r21,r21
  8078fc:	1809883a 	mov	r4,r3
  807900:	1d47883a 	add	r3,r3,r21
  807904:	20000015 	stw	zero,0(r4)
  807908:	21000104 	addi	r4,r4,4
  80790c:	193ffd1e 	bne	r3,r4,807904 <__alt_mem_onchip_mem+0xff7ff904>
  807910:	8a000417 	ldw	r8,16(r17)
  807914:	89000504 	addi	r4,r17,20
  807918:	a18007cc 	andi	r6,r20,31
  80791c:	4211883a 	add	r8,r8,r8
  807920:	4211883a 	add	r8,r8,r8
  807924:	2211883a 	add	r8,r4,r8
  807928:	30002326 	beq	r6,zero,8079b8 <__lshift+0x128>
  80792c:	02400804 	movi	r9,32
  807930:	4993c83a 	sub	r9,r9,r6
  807934:	000b883a 	mov	r5,zero
  807938:	21c00017 	ldw	r7,0(r4)
  80793c:	1815883a 	mov	r10,r3
  807940:	18c00104 	addi	r3,r3,4
  807944:	398e983a 	sll	r7,r7,r6
  807948:	21000104 	addi	r4,r4,4
  80794c:	394ab03a 	or	r5,r7,r5
  807950:	197fff15 	stw	r5,-4(r3)
  807954:	217fff17 	ldw	r5,-4(r4)
  807958:	2a4ad83a 	srl	r5,r5,r9
  80795c:	223ff636 	bltu	r4,r8,807938 <__alt_mem_onchip_mem+0xff7ff938>
  807960:	51400115 	stw	r5,4(r10)
  807964:	28001a1e 	bne	r5,zero,8079d0 <__lshift+0x140>
  807968:	843fffc4 	addi	r16,r16,-1
  80796c:	14000415 	stw	r16,16(r2)
  807970:	88000826 	beq	r17,zero,807994 <__lshift+0x104>
  807974:	89000117 	ldw	r4,4(r17)
  807978:	90c01317 	ldw	r3,76(r18)
  80797c:	2109883a 	add	r4,r4,r4
  807980:	2109883a 	add	r4,r4,r4
  807984:	1907883a 	add	r3,r3,r4
  807988:	19000017 	ldw	r4,0(r3)
  80798c:	89000015 	stw	r4,0(r17)
  807990:	1c400015 	stw	r17,0(r3)
  807994:	dfc00617 	ldw	ra,24(sp)
  807998:	dd400517 	ldw	r21,20(sp)
  80799c:	dd000417 	ldw	r20,16(sp)
  8079a0:	dcc00317 	ldw	r19,12(sp)
  8079a4:	dc800217 	ldw	r18,8(sp)
  8079a8:	dc400117 	ldw	r17,4(sp)
  8079ac:	dc000017 	ldw	r16,0(sp)
  8079b0:	dec00704 	addi	sp,sp,28
  8079b4:	f800283a 	ret
  8079b8:	21400017 	ldw	r5,0(r4)
  8079bc:	18c00104 	addi	r3,r3,4
  8079c0:	21000104 	addi	r4,r4,4
  8079c4:	197fff15 	stw	r5,-4(r3)
  8079c8:	223ffb36 	bltu	r4,r8,8079b8 <__alt_mem_onchip_mem+0xff7ff9b8>
  8079cc:	003fe606 	br	807968 <__alt_mem_onchip_mem+0xff7ff968>
  8079d0:	9c000084 	addi	r16,r19,2
  8079d4:	003fe406 	br	807968 <__alt_mem_onchip_mem+0xff7ff968>

008079d8 <__mcmp>:
  8079d8:	20800417 	ldw	r2,16(r4)
  8079dc:	28c00417 	ldw	r3,16(r5)
  8079e0:	10c5c83a 	sub	r2,r2,r3
  8079e4:	1000111e 	bne	r2,zero,807a2c <__mcmp+0x54>
  8079e8:	18c7883a 	add	r3,r3,r3
  8079ec:	18c7883a 	add	r3,r3,r3
  8079f0:	21000504 	addi	r4,r4,20
  8079f4:	29400504 	addi	r5,r5,20
  8079f8:	20c5883a 	add	r2,r4,r3
  8079fc:	28cb883a 	add	r5,r5,r3
  807a00:	00000106 	br	807a08 <__mcmp+0x30>
  807a04:	20800a2e 	bgeu	r4,r2,807a30 <__mcmp+0x58>
  807a08:	10bfff04 	addi	r2,r2,-4
  807a0c:	297fff04 	addi	r5,r5,-4
  807a10:	11800017 	ldw	r6,0(r2)
  807a14:	28c00017 	ldw	r3,0(r5)
  807a18:	30fffa26 	beq	r6,r3,807a04 <__alt_mem_onchip_mem+0xff7ffa04>
  807a1c:	30c00236 	bltu	r6,r3,807a28 <__mcmp+0x50>
  807a20:	00800044 	movi	r2,1
  807a24:	f800283a 	ret
  807a28:	00bfffc4 	movi	r2,-1
  807a2c:	f800283a 	ret
  807a30:	0005883a 	mov	r2,zero
  807a34:	f800283a 	ret

00807a38 <__mdiff>:
  807a38:	28c00417 	ldw	r3,16(r5)
  807a3c:	30800417 	ldw	r2,16(r6)
  807a40:	defffa04 	addi	sp,sp,-24
  807a44:	dcc00315 	stw	r19,12(sp)
  807a48:	dc800215 	stw	r18,8(sp)
  807a4c:	dfc00515 	stw	ra,20(sp)
  807a50:	dd000415 	stw	r20,16(sp)
  807a54:	dc400115 	stw	r17,4(sp)
  807a58:	dc000015 	stw	r16,0(sp)
  807a5c:	1887c83a 	sub	r3,r3,r2
  807a60:	2825883a 	mov	r18,r5
  807a64:	3027883a 	mov	r19,r6
  807a68:	1800141e 	bne	r3,zero,807abc <__mdiff+0x84>
  807a6c:	1085883a 	add	r2,r2,r2
  807a70:	1085883a 	add	r2,r2,r2
  807a74:	2a000504 	addi	r8,r5,20
  807a78:	34000504 	addi	r16,r6,20
  807a7c:	4087883a 	add	r3,r8,r2
  807a80:	8085883a 	add	r2,r16,r2
  807a84:	00000106 	br	807a8c <__mdiff+0x54>
  807a88:	40c0592e 	bgeu	r8,r3,807bf0 <__mdiff+0x1b8>
  807a8c:	18ffff04 	addi	r3,r3,-4
  807a90:	10bfff04 	addi	r2,r2,-4
  807a94:	19c00017 	ldw	r7,0(r3)
  807a98:	11400017 	ldw	r5,0(r2)
  807a9c:	397ffa26 	beq	r7,r5,807a88 <__alt_mem_onchip_mem+0xff7ffa88>
  807aa0:	3940592e 	bgeu	r7,r5,807c08 <__mdiff+0x1d0>
  807aa4:	9005883a 	mov	r2,r18
  807aa8:	4023883a 	mov	r17,r8
  807aac:	9825883a 	mov	r18,r19
  807ab0:	05000044 	movi	r20,1
  807ab4:	1027883a 	mov	r19,r2
  807ab8:	00000406 	br	807acc <__mdiff+0x94>
  807abc:	18005616 	blt	r3,zero,807c18 <__mdiff+0x1e0>
  807ac0:	34400504 	addi	r17,r6,20
  807ac4:	2c000504 	addi	r16,r5,20
  807ac8:	0029883a 	mov	r20,zero
  807acc:	91400117 	ldw	r5,4(r18)
  807ad0:	08071100 	call	807110 <_Balloc>
  807ad4:	92400417 	ldw	r9,16(r18)
  807ad8:	9b000417 	ldw	r12,16(r19)
  807adc:	12c00504 	addi	r11,r2,20
  807ae0:	4a51883a 	add	r8,r9,r9
  807ae4:	6319883a 	add	r12,r12,r12
  807ae8:	4211883a 	add	r8,r8,r8
  807aec:	6319883a 	add	r12,r12,r12
  807af0:	15000315 	stw	r20,12(r2)
  807af4:	8211883a 	add	r8,r16,r8
  807af8:	8b19883a 	add	r12,r17,r12
  807afc:	0007883a 	mov	r3,zero
  807b00:	81400017 	ldw	r5,0(r16)
  807b04:	89c00017 	ldw	r7,0(r17)
  807b08:	59800104 	addi	r6,r11,4
  807b0c:	293fffcc 	andi	r4,r5,65535
  807b10:	20c7883a 	add	r3,r4,r3
  807b14:	393fffcc 	andi	r4,r7,65535
  807b18:	1909c83a 	sub	r4,r3,r4
  807b1c:	280ad43a 	srli	r5,r5,16
  807b20:	380ed43a 	srli	r7,r7,16
  807b24:	2007d43a 	srai	r3,r4,16
  807b28:	213fffcc 	andi	r4,r4,65535
  807b2c:	29cbc83a 	sub	r5,r5,r7
  807b30:	28c7883a 	add	r3,r5,r3
  807b34:	180a943a 	slli	r5,r3,16
  807b38:	8c400104 	addi	r17,r17,4
  807b3c:	84000104 	addi	r16,r16,4
  807b40:	2908b03a 	or	r4,r5,r4
  807b44:	59000015 	stw	r4,0(r11)
  807b48:	1807d43a 	srai	r3,r3,16
  807b4c:	3015883a 	mov	r10,r6
  807b50:	3017883a 	mov	r11,r6
  807b54:	8b3fea36 	bltu	r17,r12,807b00 <__alt_mem_onchip_mem+0xff7ffb00>
  807b58:	8200162e 	bgeu	r16,r8,807bb4 <__mdiff+0x17c>
  807b5c:	8017883a 	mov	r11,r16
  807b60:	59400017 	ldw	r5,0(r11)
  807b64:	31800104 	addi	r6,r6,4
  807b68:	5ac00104 	addi	r11,r11,4
  807b6c:	293fffcc 	andi	r4,r5,65535
  807b70:	20c7883a 	add	r3,r4,r3
  807b74:	280ed43a 	srli	r7,r5,16
  807b78:	180bd43a 	srai	r5,r3,16
  807b7c:	193fffcc 	andi	r4,r3,65535
  807b80:	3947883a 	add	r3,r7,r5
  807b84:	180a943a 	slli	r5,r3,16
  807b88:	1807d43a 	srai	r3,r3,16
  807b8c:	2908b03a 	or	r4,r5,r4
  807b90:	313fff15 	stw	r4,-4(r6)
  807b94:	5a3ff236 	bltu	r11,r8,807b60 <__alt_mem_onchip_mem+0xff7ffb60>
  807b98:	0406303a 	nor	r3,zero,r16
  807b9c:	1a07883a 	add	r3,r3,r8
  807ba0:	1806d0ba 	srli	r3,r3,2
  807ba4:	18c00044 	addi	r3,r3,1
  807ba8:	18c7883a 	add	r3,r3,r3
  807bac:	18c7883a 	add	r3,r3,r3
  807bb0:	50d5883a 	add	r10,r10,r3
  807bb4:	50ffff04 	addi	r3,r10,-4
  807bb8:	2000041e 	bne	r4,zero,807bcc <__mdiff+0x194>
  807bbc:	18ffff04 	addi	r3,r3,-4
  807bc0:	19000017 	ldw	r4,0(r3)
  807bc4:	4a7fffc4 	addi	r9,r9,-1
  807bc8:	203ffc26 	beq	r4,zero,807bbc <__alt_mem_onchip_mem+0xff7ffbbc>
  807bcc:	12400415 	stw	r9,16(r2)
  807bd0:	dfc00517 	ldw	ra,20(sp)
  807bd4:	dd000417 	ldw	r20,16(sp)
  807bd8:	dcc00317 	ldw	r19,12(sp)
  807bdc:	dc800217 	ldw	r18,8(sp)
  807be0:	dc400117 	ldw	r17,4(sp)
  807be4:	dc000017 	ldw	r16,0(sp)
  807be8:	dec00604 	addi	sp,sp,24
  807bec:	f800283a 	ret
  807bf0:	000b883a 	mov	r5,zero
  807bf4:	08071100 	call	807110 <_Balloc>
  807bf8:	00c00044 	movi	r3,1
  807bfc:	10c00415 	stw	r3,16(r2)
  807c00:	10000515 	stw	zero,20(r2)
  807c04:	003ff206 	br	807bd0 <__alt_mem_onchip_mem+0xff7ffbd0>
  807c08:	8023883a 	mov	r17,r16
  807c0c:	0029883a 	mov	r20,zero
  807c10:	4021883a 	mov	r16,r8
  807c14:	003fad06 	br	807acc <__alt_mem_onchip_mem+0xff7ffacc>
  807c18:	9005883a 	mov	r2,r18
  807c1c:	94400504 	addi	r17,r18,20
  807c20:	9c000504 	addi	r16,r19,20
  807c24:	9825883a 	mov	r18,r19
  807c28:	05000044 	movi	r20,1
  807c2c:	1027883a 	mov	r19,r2
  807c30:	003fa606 	br	807acc <__alt_mem_onchip_mem+0xff7ffacc>

00807c34 <__ulp>:
  807c34:	295ffc2c 	andhi	r5,r5,32752
  807c38:	00bf3034 	movhi	r2,64704
  807c3c:	2887883a 	add	r3,r5,r2
  807c40:	00c0020e 	bge	zero,r3,807c4c <__ulp+0x18>
  807c44:	0005883a 	mov	r2,zero
  807c48:	f800283a 	ret
  807c4c:	00c7c83a 	sub	r3,zero,r3
  807c50:	1807d53a 	srai	r3,r3,20
  807c54:	008004c4 	movi	r2,19
  807c58:	10c00b0e 	bge	r2,r3,807c88 <__ulp+0x54>
  807c5c:	18bffb04 	addi	r2,r3,-20
  807c60:	01000784 	movi	r4,30
  807c64:	0007883a 	mov	r3,zero
  807c68:	20800516 	blt	r4,r2,807c80 <__ulp+0x4c>
  807c6c:	010007c4 	movi	r4,31
  807c70:	2089c83a 	sub	r4,r4,r2
  807c74:	00800044 	movi	r2,1
  807c78:	1104983a 	sll	r2,r2,r4
  807c7c:	f800283a 	ret
  807c80:	00800044 	movi	r2,1
  807c84:	f800283a 	ret
  807c88:	01400234 	movhi	r5,8
  807c8c:	28c7d83a 	sra	r3,r5,r3
  807c90:	0005883a 	mov	r2,zero
  807c94:	f800283a 	ret

00807c98 <__b2d>:
  807c98:	defffa04 	addi	sp,sp,-24
  807c9c:	dc000015 	stw	r16,0(sp)
  807ca0:	24000417 	ldw	r16,16(r4)
  807ca4:	dc400115 	stw	r17,4(sp)
  807ca8:	24400504 	addi	r17,r4,20
  807cac:	8421883a 	add	r16,r16,r16
  807cb0:	8421883a 	add	r16,r16,r16
  807cb4:	8c21883a 	add	r16,r17,r16
  807cb8:	dc800215 	stw	r18,8(sp)
  807cbc:	84bfff17 	ldw	r18,-4(r16)
  807cc0:	dd000415 	stw	r20,16(sp)
  807cc4:	dcc00315 	stw	r19,12(sp)
  807cc8:	9009883a 	mov	r4,r18
  807ccc:	2829883a 	mov	r20,r5
  807cd0:	dfc00515 	stw	ra,20(sp)
  807cd4:	08074040 	call	807404 <__hi0bits>
  807cd8:	00c00804 	movi	r3,32
  807cdc:	1889c83a 	sub	r4,r3,r2
  807ce0:	a1000015 	stw	r4,0(r20)
  807ce4:	01000284 	movi	r4,10
  807ce8:	84ffff04 	addi	r19,r16,-4
  807cec:	20801216 	blt	r4,r2,807d38 <__b2d+0xa0>
  807cf0:	018002c4 	movi	r6,11
  807cf4:	308dc83a 	sub	r6,r6,r2
  807cf8:	9186d83a 	srl	r3,r18,r6
  807cfc:	18cffc34 	orhi	r3,r3,16368
  807d00:	8cc0212e 	bgeu	r17,r19,807d88 <__b2d+0xf0>
  807d04:	813ffe17 	ldw	r4,-8(r16)
  807d08:	218cd83a 	srl	r6,r4,r6
  807d0c:	10800544 	addi	r2,r2,21
  807d10:	9084983a 	sll	r2,r18,r2
  807d14:	1184b03a 	or	r2,r2,r6
  807d18:	dfc00517 	ldw	ra,20(sp)
  807d1c:	dd000417 	ldw	r20,16(sp)
  807d20:	dcc00317 	ldw	r19,12(sp)
  807d24:	dc800217 	ldw	r18,8(sp)
  807d28:	dc400117 	ldw	r17,4(sp)
  807d2c:	dc000017 	ldw	r16,0(sp)
  807d30:	dec00604 	addi	sp,sp,24
  807d34:	f800283a 	ret
  807d38:	8cc00f2e 	bgeu	r17,r19,807d78 <__b2d+0xe0>
  807d3c:	117ffd44 	addi	r5,r2,-11
  807d40:	80bffe17 	ldw	r2,-8(r16)
  807d44:	28000e26 	beq	r5,zero,807d80 <__b2d+0xe8>
  807d48:	1949c83a 	sub	r4,r3,r5
  807d4c:	9164983a 	sll	r18,r18,r5
  807d50:	1106d83a 	srl	r3,r2,r4
  807d54:	81bffe04 	addi	r6,r16,-8
  807d58:	948ffc34 	orhi	r18,r18,16368
  807d5c:	90c6b03a 	or	r3,r18,r3
  807d60:	89800e2e 	bgeu	r17,r6,807d9c <__b2d+0x104>
  807d64:	81bffd17 	ldw	r6,-12(r16)
  807d68:	1144983a 	sll	r2,r2,r5
  807d6c:	310ad83a 	srl	r5,r6,r4
  807d70:	2884b03a 	or	r2,r5,r2
  807d74:	003fe806 	br	807d18 <__alt_mem_onchip_mem+0xff7ffd18>
  807d78:	10bffd44 	addi	r2,r2,-11
  807d7c:	1000041e 	bne	r2,zero,807d90 <__b2d+0xf8>
  807d80:	90cffc34 	orhi	r3,r18,16368
  807d84:	003fe406 	br	807d18 <__alt_mem_onchip_mem+0xff7ffd18>
  807d88:	000d883a 	mov	r6,zero
  807d8c:	003fdf06 	br	807d0c <__alt_mem_onchip_mem+0xff7ffd0c>
  807d90:	90a4983a 	sll	r18,r18,r2
  807d94:	0005883a 	mov	r2,zero
  807d98:	003ff906 	br	807d80 <__alt_mem_onchip_mem+0xff7ffd80>
  807d9c:	1144983a 	sll	r2,r2,r5
  807da0:	003fdd06 	br	807d18 <__alt_mem_onchip_mem+0xff7ffd18>

00807da4 <__d2b>:
  807da4:	defff804 	addi	sp,sp,-32
  807da8:	dc000215 	stw	r16,8(sp)
  807dac:	3021883a 	mov	r16,r6
  807db0:	dc400315 	stw	r17,12(sp)
  807db4:	8022907a 	slli	r17,r16,1
  807db8:	dd000615 	stw	r20,24(sp)
  807dbc:	2829883a 	mov	r20,r5
  807dc0:	01400044 	movi	r5,1
  807dc4:	dcc00515 	stw	r19,20(sp)
  807dc8:	dc800415 	stw	r18,16(sp)
  807dcc:	dfc00715 	stw	ra,28(sp)
  807dd0:	3825883a 	mov	r18,r7
  807dd4:	8822d57a 	srli	r17,r17,21
  807dd8:	08071100 	call	807110 <_Balloc>
  807ddc:	1027883a 	mov	r19,r2
  807de0:	00800434 	movhi	r2,16
  807de4:	10bfffc4 	addi	r2,r2,-1
  807de8:	808c703a 	and	r6,r16,r2
  807dec:	88000126 	beq	r17,zero,807df4 <__d2b+0x50>
  807df0:	31800434 	orhi	r6,r6,16
  807df4:	d9800015 	stw	r6,0(sp)
  807df8:	a0002426 	beq	r20,zero,807e8c <__d2b+0xe8>
  807dfc:	d9000104 	addi	r4,sp,4
  807e00:	dd000115 	stw	r20,4(sp)
  807e04:	080746c0 	call	80746c <__lo0bits>
  807e08:	d8c00017 	ldw	r3,0(sp)
  807e0c:	10002f1e 	bne	r2,zero,807ecc <__d2b+0x128>
  807e10:	d9000117 	ldw	r4,4(sp)
  807e14:	99000515 	stw	r4,20(r19)
  807e18:	1821003a 	cmpeq	r16,r3,zero
  807e1c:	01000084 	movi	r4,2
  807e20:	2421c83a 	sub	r16,r4,r16
  807e24:	98c00615 	stw	r3,24(r19)
  807e28:	9c000415 	stw	r16,16(r19)
  807e2c:	88001f1e 	bne	r17,zero,807eac <__d2b+0x108>
  807e30:	10bef384 	addi	r2,r2,-1074
  807e34:	90800015 	stw	r2,0(r18)
  807e38:	00900034 	movhi	r2,16384
  807e3c:	10bfffc4 	addi	r2,r2,-1
  807e40:	8085883a 	add	r2,r16,r2
  807e44:	1085883a 	add	r2,r2,r2
  807e48:	1085883a 	add	r2,r2,r2
  807e4c:	9885883a 	add	r2,r19,r2
  807e50:	11000517 	ldw	r4,20(r2)
  807e54:	8020917a 	slli	r16,r16,5
  807e58:	08074040 	call	807404 <__hi0bits>
  807e5c:	d8c00817 	ldw	r3,32(sp)
  807e60:	8085c83a 	sub	r2,r16,r2
  807e64:	18800015 	stw	r2,0(r3)
  807e68:	9805883a 	mov	r2,r19
  807e6c:	dfc00717 	ldw	ra,28(sp)
  807e70:	dd000617 	ldw	r20,24(sp)
  807e74:	dcc00517 	ldw	r19,20(sp)
  807e78:	dc800417 	ldw	r18,16(sp)
  807e7c:	dc400317 	ldw	r17,12(sp)
  807e80:	dc000217 	ldw	r16,8(sp)
  807e84:	dec00804 	addi	sp,sp,32
  807e88:	f800283a 	ret
  807e8c:	d809883a 	mov	r4,sp
  807e90:	080746c0 	call	80746c <__lo0bits>
  807e94:	d8c00017 	ldw	r3,0(sp)
  807e98:	04000044 	movi	r16,1
  807e9c:	9c000415 	stw	r16,16(r19)
  807ea0:	98c00515 	stw	r3,20(r19)
  807ea4:	10800804 	addi	r2,r2,32
  807ea8:	883fe126 	beq	r17,zero,807e30 <__alt_mem_onchip_mem+0xff7ffe30>
  807eac:	00c00d44 	movi	r3,53
  807eb0:	8c7ef344 	addi	r17,r17,-1075
  807eb4:	88a3883a 	add	r17,r17,r2
  807eb8:	1885c83a 	sub	r2,r3,r2
  807ebc:	d8c00817 	ldw	r3,32(sp)
  807ec0:	94400015 	stw	r17,0(r18)
  807ec4:	18800015 	stw	r2,0(r3)
  807ec8:	003fe706 	br	807e68 <__alt_mem_onchip_mem+0xff7ffe68>
  807ecc:	01000804 	movi	r4,32
  807ed0:	2089c83a 	sub	r4,r4,r2
  807ed4:	1908983a 	sll	r4,r3,r4
  807ed8:	d9400117 	ldw	r5,4(sp)
  807edc:	1886d83a 	srl	r3,r3,r2
  807ee0:	2148b03a 	or	r4,r4,r5
  807ee4:	99000515 	stw	r4,20(r19)
  807ee8:	d8c00015 	stw	r3,0(sp)
  807eec:	003fca06 	br	807e18 <__alt_mem_onchip_mem+0xff7ffe18>

00807ef0 <__ratio>:
  807ef0:	defff904 	addi	sp,sp,-28
  807ef4:	dc400315 	stw	r17,12(sp)
  807ef8:	2823883a 	mov	r17,r5
  807efc:	d9400104 	addi	r5,sp,4
  807f00:	dfc00615 	stw	ra,24(sp)
  807f04:	dcc00515 	stw	r19,20(sp)
  807f08:	dc800415 	stw	r18,16(sp)
  807f0c:	2027883a 	mov	r19,r4
  807f10:	dc000215 	stw	r16,8(sp)
  807f14:	0807c980 	call	807c98 <__b2d>
  807f18:	d80b883a 	mov	r5,sp
  807f1c:	8809883a 	mov	r4,r17
  807f20:	1025883a 	mov	r18,r2
  807f24:	1821883a 	mov	r16,r3
  807f28:	0807c980 	call	807c98 <__b2d>
  807f2c:	8a000417 	ldw	r8,16(r17)
  807f30:	99000417 	ldw	r4,16(r19)
  807f34:	d9400117 	ldw	r5,4(sp)
  807f38:	2209c83a 	sub	r4,r4,r8
  807f3c:	2010917a 	slli	r8,r4,5
  807f40:	d9000017 	ldw	r4,0(sp)
  807f44:	2909c83a 	sub	r4,r5,r4
  807f48:	4109883a 	add	r4,r8,r4
  807f4c:	01000e0e 	bge	zero,r4,807f88 <__ratio+0x98>
  807f50:	2008953a 	slli	r4,r4,20
  807f54:	2421883a 	add	r16,r4,r16
  807f58:	100d883a 	mov	r6,r2
  807f5c:	180f883a 	mov	r7,r3
  807f60:	9009883a 	mov	r4,r18
  807f64:	800b883a 	mov	r5,r16
  807f68:	080ba880 	call	80ba88 <__divdf3>
  807f6c:	dfc00617 	ldw	ra,24(sp)
  807f70:	dcc00517 	ldw	r19,20(sp)
  807f74:	dc800417 	ldw	r18,16(sp)
  807f78:	dc400317 	ldw	r17,12(sp)
  807f7c:	dc000217 	ldw	r16,8(sp)
  807f80:	dec00704 	addi	sp,sp,28
  807f84:	f800283a 	ret
  807f88:	2008953a 	slli	r4,r4,20
  807f8c:	1907c83a 	sub	r3,r3,r4
  807f90:	003ff106 	br	807f58 <__alt_mem_onchip_mem+0xff7fff58>

00807f94 <_mprec_log10>:
  807f94:	defffe04 	addi	sp,sp,-8
  807f98:	dc000015 	stw	r16,0(sp)
  807f9c:	dfc00115 	stw	ra,4(sp)
  807fa0:	008005c4 	movi	r2,23
  807fa4:	2021883a 	mov	r16,r4
  807fa8:	11000d0e 	bge	r2,r4,807fe0 <_mprec_log10+0x4c>
  807fac:	0005883a 	mov	r2,zero
  807fb0:	00cffc34 	movhi	r3,16368
  807fb4:	843fffc4 	addi	r16,r16,-1
  807fb8:	000d883a 	mov	r6,zero
  807fbc:	01d00934 	movhi	r7,16420
  807fc0:	1009883a 	mov	r4,r2
  807fc4:	180b883a 	mov	r5,r3
  807fc8:	080c5c80 	call	80c5c8 <__muldf3>
  807fcc:	803ff91e 	bne	r16,zero,807fb4 <__alt_mem_onchip_mem+0xff7fffb4>
  807fd0:	dfc00117 	ldw	ra,4(sp)
  807fd4:	dc000017 	ldw	r16,0(sp)
  807fd8:	dec00204 	addi	sp,sp,8
  807fdc:	f800283a 	ret
  807fe0:	202090fa 	slli	r16,r4,3
  807fe4:	00802074 	movhi	r2,129
  807fe8:	1086e104 	addi	r2,r2,7044
  807fec:	1421883a 	add	r16,r2,r16
  807ff0:	80800017 	ldw	r2,0(r16)
  807ff4:	80c00117 	ldw	r3,4(r16)
  807ff8:	dfc00117 	ldw	ra,4(sp)
  807ffc:	dc000017 	ldw	r16,0(sp)
  808000:	dec00204 	addi	sp,sp,8
  808004:	f800283a 	ret

00808008 <__copybits>:
  808008:	297fffc4 	addi	r5,r5,-1
  80800c:	280fd17a 	srai	r7,r5,5
  808010:	30c00417 	ldw	r3,16(r6)
  808014:	30800504 	addi	r2,r6,20
  808018:	39c00044 	addi	r7,r7,1
  80801c:	18c7883a 	add	r3,r3,r3
  808020:	39cf883a 	add	r7,r7,r7
  808024:	18c7883a 	add	r3,r3,r3
  808028:	39cf883a 	add	r7,r7,r7
  80802c:	10c7883a 	add	r3,r2,r3
  808030:	21cf883a 	add	r7,r4,r7
  808034:	10c00d2e 	bgeu	r2,r3,80806c <__copybits+0x64>
  808038:	200b883a 	mov	r5,r4
  80803c:	12000017 	ldw	r8,0(r2)
  808040:	29400104 	addi	r5,r5,4
  808044:	10800104 	addi	r2,r2,4
  808048:	2a3fff15 	stw	r8,-4(r5)
  80804c:	10fffb36 	bltu	r2,r3,80803c <__alt_mem_onchip_mem+0xff80003c>
  808050:	1985c83a 	sub	r2,r3,r6
  808054:	10bffac4 	addi	r2,r2,-21
  808058:	1004d0ba 	srli	r2,r2,2
  80805c:	10800044 	addi	r2,r2,1
  808060:	1085883a 	add	r2,r2,r2
  808064:	1085883a 	add	r2,r2,r2
  808068:	2089883a 	add	r4,r4,r2
  80806c:	21c0032e 	bgeu	r4,r7,80807c <__copybits+0x74>
  808070:	20000015 	stw	zero,0(r4)
  808074:	21000104 	addi	r4,r4,4
  808078:	21fffd36 	bltu	r4,r7,808070 <__alt_mem_onchip_mem+0xff800070>
  80807c:	f800283a 	ret

00808080 <__any_on>:
  808080:	20c00417 	ldw	r3,16(r4)
  808084:	2805d17a 	srai	r2,r5,5
  808088:	21000504 	addi	r4,r4,20
  80808c:	18800d0e 	bge	r3,r2,8080c4 <__any_on+0x44>
  808090:	18c7883a 	add	r3,r3,r3
  808094:	18c7883a 	add	r3,r3,r3
  808098:	20c7883a 	add	r3,r4,r3
  80809c:	20c0192e 	bgeu	r4,r3,808104 <__any_on+0x84>
  8080a0:	18bfff17 	ldw	r2,-4(r3)
  8080a4:	18ffff04 	addi	r3,r3,-4
  8080a8:	1000041e 	bne	r2,zero,8080bc <__any_on+0x3c>
  8080ac:	20c0142e 	bgeu	r4,r3,808100 <__any_on+0x80>
  8080b0:	18ffff04 	addi	r3,r3,-4
  8080b4:	19400017 	ldw	r5,0(r3)
  8080b8:	283ffc26 	beq	r5,zero,8080ac <__alt_mem_onchip_mem+0xff8000ac>
  8080bc:	00800044 	movi	r2,1
  8080c0:	f800283a 	ret
  8080c4:	10c00a0e 	bge	r2,r3,8080f0 <__any_on+0x70>
  8080c8:	1085883a 	add	r2,r2,r2
  8080cc:	1085883a 	add	r2,r2,r2
  8080d0:	294007cc 	andi	r5,r5,31
  8080d4:	2087883a 	add	r3,r4,r2
  8080d8:	283ff026 	beq	r5,zero,80809c <__alt_mem_onchip_mem+0xff80009c>
  8080dc:	19800017 	ldw	r6,0(r3)
  8080e0:	3144d83a 	srl	r2,r6,r5
  8080e4:	114a983a 	sll	r5,r2,r5
  8080e8:	317ff41e 	bne	r6,r5,8080bc <__alt_mem_onchip_mem+0xff8000bc>
  8080ec:	003feb06 	br	80809c <__alt_mem_onchip_mem+0xff80009c>
  8080f0:	1085883a 	add	r2,r2,r2
  8080f4:	1085883a 	add	r2,r2,r2
  8080f8:	2087883a 	add	r3,r4,r2
  8080fc:	003fe706 	br	80809c <__alt_mem_onchip_mem+0xff80009c>
  808100:	f800283a 	ret
  808104:	0005883a 	mov	r2,zero
  808108:	f800283a 	ret

0080810c <_read_r>:
  80810c:	defffd04 	addi	sp,sp,-12
  808110:	2805883a 	mov	r2,r5
  808114:	dc000015 	stw	r16,0(sp)
  808118:	04002074 	movhi	r16,129
  80811c:	dc400115 	stw	r17,4(sp)
  808120:	300b883a 	mov	r5,r6
  808124:	8416a104 	addi	r16,r16,23172
  808128:	2023883a 	mov	r17,r4
  80812c:	380d883a 	mov	r6,r7
  808130:	1009883a 	mov	r4,r2
  808134:	dfc00215 	stw	ra,8(sp)
  808138:	80000015 	stw	zero,0(r16)
  80813c:	080e0980 	call	80e098 <read>
  808140:	00ffffc4 	movi	r3,-1
  808144:	10c00526 	beq	r2,r3,80815c <_read_r+0x50>
  808148:	dfc00217 	ldw	ra,8(sp)
  80814c:	dc400117 	ldw	r17,4(sp)
  808150:	dc000017 	ldw	r16,0(sp)
  808154:	dec00304 	addi	sp,sp,12
  808158:	f800283a 	ret
  80815c:	80c00017 	ldw	r3,0(r16)
  808160:	183ff926 	beq	r3,zero,808148 <__alt_mem_onchip_mem+0xff800148>
  808164:	88c00015 	stw	r3,0(r17)
  808168:	003ff706 	br	808148 <__alt_mem_onchip_mem+0xff800148>

0080816c <_realloc_r>:
  80816c:	defff604 	addi	sp,sp,-40
  808170:	dc800215 	stw	r18,8(sp)
  808174:	dfc00915 	stw	ra,36(sp)
  808178:	df000815 	stw	fp,32(sp)
  80817c:	ddc00715 	stw	r23,28(sp)
  808180:	dd800615 	stw	r22,24(sp)
  808184:	dd400515 	stw	r21,20(sp)
  808188:	dd000415 	stw	r20,16(sp)
  80818c:	dcc00315 	stw	r19,12(sp)
  808190:	dc400115 	stw	r17,4(sp)
  808194:	dc000015 	stw	r16,0(sp)
  808198:	3025883a 	mov	r18,r6
  80819c:	2800b726 	beq	r5,zero,80847c <_realloc_r+0x310>
  8081a0:	282b883a 	mov	r21,r5
  8081a4:	2029883a 	mov	r20,r4
  8081a8:	080ddc00 	call	80ddc0 <__malloc_lock>
  8081ac:	a8bfff17 	ldw	r2,-4(r21)
  8081b0:	043fff04 	movi	r16,-4
  8081b4:	90c002c4 	addi	r3,r18,11
  8081b8:	01000584 	movi	r4,22
  8081bc:	acfffe04 	addi	r19,r21,-8
  8081c0:	1420703a 	and	r16,r2,r16
  8081c4:	20c0332e 	bgeu	r4,r3,808294 <_realloc_r+0x128>
  8081c8:	047ffe04 	movi	r17,-8
  8081cc:	1c62703a 	and	r17,r3,r17
  8081d0:	8807883a 	mov	r3,r17
  8081d4:	88005816 	blt	r17,zero,808338 <_realloc_r+0x1cc>
  8081d8:	8c805736 	bltu	r17,r18,808338 <_realloc_r+0x1cc>
  8081dc:	80c0300e 	bge	r16,r3,8082a0 <_realloc_r+0x134>
  8081e0:	07002074 	movhi	fp,129
  8081e4:	e7091c04 	addi	fp,fp,9328
  8081e8:	e1c00217 	ldw	r7,8(fp)
  8081ec:	9c09883a 	add	r4,r19,r16
  8081f0:	22000117 	ldw	r8,4(r4)
  8081f4:	21c06326 	beq	r4,r7,808384 <_realloc_r+0x218>
  8081f8:	017fff84 	movi	r5,-2
  8081fc:	414a703a 	and	r5,r8,r5
  808200:	214b883a 	add	r5,r4,r5
  808204:	29800117 	ldw	r6,4(r5)
  808208:	3180004c 	andi	r6,r6,1
  80820c:	30003f26 	beq	r6,zero,80830c <_realloc_r+0x1a0>
  808210:	1080004c 	andi	r2,r2,1
  808214:	10008326 	beq	r2,zero,808424 <_realloc_r+0x2b8>
  808218:	900b883a 	mov	r5,r18
  80821c:	a009883a 	mov	r4,r20
  808220:	0800eac0 	call	800eac <_malloc_r>
  808224:	1025883a 	mov	r18,r2
  808228:	10011e26 	beq	r2,zero,8086a4 <_realloc_r+0x538>
  80822c:	a93fff17 	ldw	r4,-4(r21)
  808230:	10fffe04 	addi	r3,r2,-8
  808234:	00bfff84 	movi	r2,-2
  808238:	2084703a 	and	r2,r4,r2
  80823c:	9885883a 	add	r2,r19,r2
  808240:	1880ee26 	beq	r3,r2,8085fc <_realloc_r+0x490>
  808244:	81bfff04 	addi	r6,r16,-4
  808248:	00800904 	movi	r2,36
  80824c:	1180b836 	bltu	r2,r6,808530 <_realloc_r+0x3c4>
  808250:	00c004c4 	movi	r3,19
  808254:	19809636 	bltu	r3,r6,8084b0 <_realloc_r+0x344>
  808258:	9005883a 	mov	r2,r18
  80825c:	a807883a 	mov	r3,r21
  808260:	19000017 	ldw	r4,0(r3)
  808264:	11000015 	stw	r4,0(r2)
  808268:	19000117 	ldw	r4,4(r3)
  80826c:	11000115 	stw	r4,4(r2)
  808270:	18c00217 	ldw	r3,8(r3)
  808274:	10c00215 	stw	r3,8(r2)
  808278:	a80b883a 	mov	r5,r21
  80827c:	a009883a 	mov	r4,r20
  808280:	08062a40 	call	8062a4 <_free_r>
  808284:	a009883a 	mov	r4,r20
  808288:	080dde40 	call	80dde4 <__malloc_unlock>
  80828c:	9005883a 	mov	r2,r18
  808290:	00001206 	br	8082dc <_realloc_r+0x170>
  808294:	00c00404 	movi	r3,16
  808298:	1823883a 	mov	r17,r3
  80829c:	003fce06 	br	8081d8 <__alt_mem_onchip_mem+0xff8001d8>
  8082a0:	a825883a 	mov	r18,r21
  8082a4:	8445c83a 	sub	r2,r16,r17
  8082a8:	00c003c4 	movi	r3,15
  8082ac:	18802636 	bltu	r3,r2,808348 <_realloc_r+0x1dc>
  8082b0:	99800117 	ldw	r6,4(r19)
  8082b4:	9c07883a 	add	r3,r19,r16
  8082b8:	3180004c 	andi	r6,r6,1
  8082bc:	3420b03a 	or	r16,r6,r16
  8082c0:	9c000115 	stw	r16,4(r19)
  8082c4:	18800117 	ldw	r2,4(r3)
  8082c8:	10800054 	ori	r2,r2,1
  8082cc:	18800115 	stw	r2,4(r3)
  8082d0:	a009883a 	mov	r4,r20
  8082d4:	080dde40 	call	80dde4 <__malloc_unlock>
  8082d8:	9005883a 	mov	r2,r18
  8082dc:	dfc00917 	ldw	ra,36(sp)
  8082e0:	df000817 	ldw	fp,32(sp)
  8082e4:	ddc00717 	ldw	r23,28(sp)
  8082e8:	dd800617 	ldw	r22,24(sp)
  8082ec:	dd400517 	ldw	r21,20(sp)
  8082f0:	dd000417 	ldw	r20,16(sp)
  8082f4:	dcc00317 	ldw	r19,12(sp)
  8082f8:	dc800217 	ldw	r18,8(sp)
  8082fc:	dc400117 	ldw	r17,4(sp)
  808300:	dc000017 	ldw	r16,0(sp)
  808304:	dec00a04 	addi	sp,sp,40
  808308:	f800283a 	ret
  80830c:	017fff04 	movi	r5,-4
  808310:	414a703a 	and	r5,r8,r5
  808314:	814d883a 	add	r6,r16,r5
  808318:	30c01f16 	blt	r6,r3,808398 <_realloc_r+0x22c>
  80831c:	20800317 	ldw	r2,12(r4)
  808320:	20c00217 	ldw	r3,8(r4)
  808324:	a825883a 	mov	r18,r21
  808328:	3021883a 	mov	r16,r6
  80832c:	18800315 	stw	r2,12(r3)
  808330:	10c00215 	stw	r3,8(r2)
  808334:	003fdb06 	br	8082a4 <__alt_mem_onchip_mem+0xff8002a4>
  808338:	00800304 	movi	r2,12
  80833c:	a0800015 	stw	r2,0(r20)
  808340:	0005883a 	mov	r2,zero
  808344:	003fe506 	br	8082dc <__alt_mem_onchip_mem+0xff8002dc>
  808348:	98c00117 	ldw	r3,4(r19)
  80834c:	9c4b883a 	add	r5,r19,r17
  808350:	11000054 	ori	r4,r2,1
  808354:	18c0004c 	andi	r3,r3,1
  808358:	1c62b03a 	or	r17,r3,r17
  80835c:	9c400115 	stw	r17,4(r19)
  808360:	29000115 	stw	r4,4(r5)
  808364:	2885883a 	add	r2,r5,r2
  808368:	10c00117 	ldw	r3,4(r2)
  80836c:	29400204 	addi	r5,r5,8
  808370:	a009883a 	mov	r4,r20
  808374:	18c00054 	ori	r3,r3,1
  808378:	10c00115 	stw	r3,4(r2)
  80837c:	08062a40 	call	8062a4 <_free_r>
  808380:	003fd306 	br	8082d0 <__alt_mem_onchip_mem+0xff8002d0>
  808384:	017fff04 	movi	r5,-4
  808388:	414a703a 	and	r5,r8,r5
  80838c:	89800404 	addi	r6,r17,16
  808390:	8151883a 	add	r8,r16,r5
  808394:	4180590e 	bge	r8,r6,8084fc <_realloc_r+0x390>
  808398:	1080004c 	andi	r2,r2,1
  80839c:	103f9e1e 	bne	r2,zero,808218 <__alt_mem_onchip_mem+0xff800218>
  8083a0:	adbffe17 	ldw	r22,-8(r21)
  8083a4:	00bfff04 	movi	r2,-4
  8083a8:	9dadc83a 	sub	r22,r19,r22
  8083ac:	b1800117 	ldw	r6,4(r22)
  8083b0:	3084703a 	and	r2,r6,r2
  8083b4:	20002026 	beq	r4,zero,808438 <_realloc_r+0x2cc>
  8083b8:	80af883a 	add	r23,r16,r2
  8083bc:	b96f883a 	add	r23,r23,r5
  8083c0:	21c05f26 	beq	r4,r7,808540 <_realloc_r+0x3d4>
  8083c4:	b8c01c16 	blt	r23,r3,808438 <_realloc_r+0x2cc>
  8083c8:	20800317 	ldw	r2,12(r4)
  8083cc:	20c00217 	ldw	r3,8(r4)
  8083d0:	81bfff04 	addi	r6,r16,-4
  8083d4:	01000904 	movi	r4,36
  8083d8:	18800315 	stw	r2,12(r3)
  8083dc:	10c00215 	stw	r3,8(r2)
  8083e0:	b0c00217 	ldw	r3,8(r22)
  8083e4:	b0800317 	ldw	r2,12(r22)
  8083e8:	b4800204 	addi	r18,r22,8
  8083ec:	18800315 	stw	r2,12(r3)
  8083f0:	10c00215 	stw	r3,8(r2)
  8083f4:	21801b36 	bltu	r4,r6,808464 <_realloc_r+0x2f8>
  8083f8:	008004c4 	movi	r2,19
  8083fc:	1180352e 	bgeu	r2,r6,8084d4 <_realloc_r+0x368>
  808400:	a8800017 	ldw	r2,0(r21)
  808404:	b0800215 	stw	r2,8(r22)
  808408:	a8800117 	ldw	r2,4(r21)
  80840c:	b0800315 	stw	r2,12(r22)
  808410:	008006c4 	movi	r2,27
  808414:	11807f36 	bltu	r2,r6,808614 <_realloc_r+0x4a8>
  808418:	b0800404 	addi	r2,r22,16
  80841c:	ad400204 	addi	r21,r21,8
  808420:	00002d06 	br	8084d8 <_realloc_r+0x36c>
  808424:	adbffe17 	ldw	r22,-8(r21)
  808428:	00bfff04 	movi	r2,-4
  80842c:	9dadc83a 	sub	r22,r19,r22
  808430:	b1000117 	ldw	r4,4(r22)
  808434:	2084703a 	and	r2,r4,r2
  808438:	b03f7726 	beq	r22,zero,808218 <__alt_mem_onchip_mem+0xff800218>
  80843c:	80af883a 	add	r23,r16,r2
  808440:	b8ff7516 	blt	r23,r3,808218 <__alt_mem_onchip_mem+0xff800218>
  808444:	b0800317 	ldw	r2,12(r22)
  808448:	b0c00217 	ldw	r3,8(r22)
  80844c:	81bfff04 	addi	r6,r16,-4
  808450:	01000904 	movi	r4,36
  808454:	18800315 	stw	r2,12(r3)
  808458:	10c00215 	stw	r3,8(r2)
  80845c:	b4800204 	addi	r18,r22,8
  808460:	21bfe52e 	bgeu	r4,r6,8083f8 <__alt_mem_onchip_mem+0xff8003f8>
  808464:	a80b883a 	mov	r5,r21
  808468:	9009883a 	mov	r4,r18
  80846c:	0806fb40 	call	806fb4 <memmove>
  808470:	b821883a 	mov	r16,r23
  808474:	b027883a 	mov	r19,r22
  808478:	003f8a06 	br	8082a4 <__alt_mem_onchip_mem+0xff8002a4>
  80847c:	300b883a 	mov	r5,r6
  808480:	dfc00917 	ldw	ra,36(sp)
  808484:	df000817 	ldw	fp,32(sp)
  808488:	ddc00717 	ldw	r23,28(sp)
  80848c:	dd800617 	ldw	r22,24(sp)
  808490:	dd400517 	ldw	r21,20(sp)
  808494:	dd000417 	ldw	r20,16(sp)
  808498:	dcc00317 	ldw	r19,12(sp)
  80849c:	dc800217 	ldw	r18,8(sp)
  8084a0:	dc400117 	ldw	r17,4(sp)
  8084a4:	dc000017 	ldw	r16,0(sp)
  8084a8:	dec00a04 	addi	sp,sp,40
  8084ac:	0800eac1 	jmpi	800eac <_malloc_r>
  8084b0:	a8c00017 	ldw	r3,0(r21)
  8084b4:	90c00015 	stw	r3,0(r18)
  8084b8:	a8c00117 	ldw	r3,4(r21)
  8084bc:	90c00115 	stw	r3,4(r18)
  8084c0:	00c006c4 	movi	r3,27
  8084c4:	19804536 	bltu	r3,r6,8085dc <_realloc_r+0x470>
  8084c8:	90800204 	addi	r2,r18,8
  8084cc:	a8c00204 	addi	r3,r21,8
  8084d0:	003f6306 	br	808260 <__alt_mem_onchip_mem+0xff800260>
  8084d4:	9005883a 	mov	r2,r18
  8084d8:	a8c00017 	ldw	r3,0(r21)
  8084dc:	b821883a 	mov	r16,r23
  8084e0:	b027883a 	mov	r19,r22
  8084e4:	10c00015 	stw	r3,0(r2)
  8084e8:	a8c00117 	ldw	r3,4(r21)
  8084ec:	10c00115 	stw	r3,4(r2)
  8084f0:	a8c00217 	ldw	r3,8(r21)
  8084f4:	10c00215 	stw	r3,8(r2)
  8084f8:	003f6a06 	br	8082a4 <__alt_mem_onchip_mem+0xff8002a4>
  8084fc:	9c67883a 	add	r19,r19,r17
  808500:	4445c83a 	sub	r2,r8,r17
  808504:	e4c00215 	stw	r19,8(fp)
  808508:	10800054 	ori	r2,r2,1
  80850c:	98800115 	stw	r2,4(r19)
  808510:	a8bfff17 	ldw	r2,-4(r21)
  808514:	a009883a 	mov	r4,r20
  808518:	1080004c 	andi	r2,r2,1
  80851c:	1462b03a 	or	r17,r2,r17
  808520:	ac7fff15 	stw	r17,-4(r21)
  808524:	080dde40 	call	80dde4 <__malloc_unlock>
  808528:	a805883a 	mov	r2,r21
  80852c:	003f6b06 	br	8082dc <__alt_mem_onchip_mem+0xff8002dc>
  808530:	a80b883a 	mov	r5,r21
  808534:	9009883a 	mov	r4,r18
  808538:	0806fb40 	call	806fb4 <memmove>
  80853c:	003f4e06 	br	808278 <__alt_mem_onchip_mem+0xff800278>
  808540:	89000404 	addi	r4,r17,16
  808544:	b93fbc16 	blt	r23,r4,808438 <__alt_mem_onchip_mem+0xff800438>
  808548:	b0800317 	ldw	r2,12(r22)
  80854c:	b0c00217 	ldw	r3,8(r22)
  808550:	81bfff04 	addi	r6,r16,-4
  808554:	01000904 	movi	r4,36
  808558:	18800315 	stw	r2,12(r3)
  80855c:	10c00215 	stw	r3,8(r2)
  808560:	b4800204 	addi	r18,r22,8
  808564:	21804336 	bltu	r4,r6,808674 <_realloc_r+0x508>
  808568:	008004c4 	movi	r2,19
  80856c:	11803f2e 	bgeu	r2,r6,80866c <_realloc_r+0x500>
  808570:	a8800017 	ldw	r2,0(r21)
  808574:	b0800215 	stw	r2,8(r22)
  808578:	a8800117 	ldw	r2,4(r21)
  80857c:	b0800315 	stw	r2,12(r22)
  808580:	008006c4 	movi	r2,27
  808584:	11803f36 	bltu	r2,r6,808684 <_realloc_r+0x518>
  808588:	b0800404 	addi	r2,r22,16
  80858c:	ad400204 	addi	r21,r21,8
  808590:	a8c00017 	ldw	r3,0(r21)
  808594:	10c00015 	stw	r3,0(r2)
  808598:	a8c00117 	ldw	r3,4(r21)
  80859c:	10c00115 	stw	r3,4(r2)
  8085a0:	a8c00217 	ldw	r3,8(r21)
  8085a4:	10c00215 	stw	r3,8(r2)
  8085a8:	b447883a 	add	r3,r22,r17
  8085ac:	bc45c83a 	sub	r2,r23,r17
  8085b0:	e0c00215 	stw	r3,8(fp)
  8085b4:	10800054 	ori	r2,r2,1
  8085b8:	18800115 	stw	r2,4(r3)
  8085bc:	b0800117 	ldw	r2,4(r22)
  8085c0:	a009883a 	mov	r4,r20
  8085c4:	1080004c 	andi	r2,r2,1
  8085c8:	1462b03a 	or	r17,r2,r17
  8085cc:	b4400115 	stw	r17,4(r22)
  8085d0:	080dde40 	call	80dde4 <__malloc_unlock>
  8085d4:	9005883a 	mov	r2,r18
  8085d8:	003f4006 	br	8082dc <__alt_mem_onchip_mem+0xff8002dc>
  8085dc:	a8c00217 	ldw	r3,8(r21)
  8085e0:	90c00215 	stw	r3,8(r18)
  8085e4:	a8c00317 	ldw	r3,12(r21)
  8085e8:	90c00315 	stw	r3,12(r18)
  8085ec:	30801126 	beq	r6,r2,808634 <_realloc_r+0x4c8>
  8085f0:	90800404 	addi	r2,r18,16
  8085f4:	a8c00404 	addi	r3,r21,16
  8085f8:	003f1906 	br	808260 <__alt_mem_onchip_mem+0xff800260>
  8085fc:	90ffff17 	ldw	r3,-4(r18)
  808600:	00bfff04 	movi	r2,-4
  808604:	a825883a 	mov	r18,r21
  808608:	1884703a 	and	r2,r3,r2
  80860c:	80a1883a 	add	r16,r16,r2
  808610:	003f2406 	br	8082a4 <__alt_mem_onchip_mem+0xff8002a4>
  808614:	a8800217 	ldw	r2,8(r21)
  808618:	b0800415 	stw	r2,16(r22)
  80861c:	a8800317 	ldw	r2,12(r21)
  808620:	b0800515 	stw	r2,20(r22)
  808624:	31000a26 	beq	r6,r4,808650 <_realloc_r+0x4e4>
  808628:	b0800604 	addi	r2,r22,24
  80862c:	ad400404 	addi	r21,r21,16
  808630:	003fa906 	br	8084d8 <__alt_mem_onchip_mem+0xff8004d8>
  808634:	a9000417 	ldw	r4,16(r21)
  808638:	90800604 	addi	r2,r18,24
  80863c:	a8c00604 	addi	r3,r21,24
  808640:	91000415 	stw	r4,16(r18)
  808644:	a9000517 	ldw	r4,20(r21)
  808648:	91000515 	stw	r4,20(r18)
  80864c:	003f0406 	br	808260 <__alt_mem_onchip_mem+0xff800260>
  808650:	a8c00417 	ldw	r3,16(r21)
  808654:	ad400604 	addi	r21,r21,24
  808658:	b0800804 	addi	r2,r22,32
  80865c:	b0c00615 	stw	r3,24(r22)
  808660:	a8ffff17 	ldw	r3,-4(r21)
  808664:	b0c00715 	stw	r3,28(r22)
  808668:	003f9b06 	br	8084d8 <__alt_mem_onchip_mem+0xff8004d8>
  80866c:	9005883a 	mov	r2,r18
  808670:	003fc706 	br	808590 <__alt_mem_onchip_mem+0xff800590>
  808674:	a80b883a 	mov	r5,r21
  808678:	9009883a 	mov	r4,r18
  80867c:	0806fb40 	call	806fb4 <memmove>
  808680:	003fc906 	br	8085a8 <__alt_mem_onchip_mem+0xff8005a8>
  808684:	a8800217 	ldw	r2,8(r21)
  808688:	b0800415 	stw	r2,16(r22)
  80868c:	a8800317 	ldw	r2,12(r21)
  808690:	b0800515 	stw	r2,20(r22)
  808694:	31000726 	beq	r6,r4,8086b4 <_realloc_r+0x548>
  808698:	b0800604 	addi	r2,r22,24
  80869c:	ad400404 	addi	r21,r21,16
  8086a0:	003fbb06 	br	808590 <__alt_mem_onchip_mem+0xff800590>
  8086a4:	a009883a 	mov	r4,r20
  8086a8:	080dde40 	call	80dde4 <__malloc_unlock>
  8086ac:	0005883a 	mov	r2,zero
  8086b0:	003f0a06 	br	8082dc <__alt_mem_onchip_mem+0xff8002dc>
  8086b4:	a8c00417 	ldw	r3,16(r21)
  8086b8:	ad400604 	addi	r21,r21,24
  8086bc:	b0800804 	addi	r2,r22,32
  8086c0:	b0c00615 	stw	r3,24(r22)
  8086c4:	a8ffff17 	ldw	r3,-4(r21)
  8086c8:	b0c00715 	stw	r3,28(r22)
  8086cc:	003fb006 	br	808590 <__alt_mem_onchip_mem+0xff800590>

008086d0 <__fpclassifyd>:
  8086d0:	00a00034 	movhi	r2,32768
  8086d4:	10bfffc4 	addi	r2,r2,-1
  8086d8:	2884703a 	and	r2,r5,r2
  8086dc:	10000726 	beq	r2,zero,8086fc <__fpclassifyd+0x2c>
  8086e0:	00fffc34 	movhi	r3,65520
  8086e4:	019ff834 	movhi	r6,32736
  8086e8:	28c7883a 	add	r3,r5,r3
  8086ec:	31bfffc4 	addi	r6,r6,-1
  8086f0:	30c00536 	bltu	r6,r3,808708 <__fpclassifyd+0x38>
  8086f4:	00800104 	movi	r2,4
  8086f8:	f800283a 	ret
  8086fc:	2000021e 	bne	r4,zero,808708 <__fpclassifyd+0x38>
  808700:	00800084 	movi	r2,2
  808704:	f800283a 	ret
  808708:	00dffc34 	movhi	r3,32752
  80870c:	019ff834 	movhi	r6,32736
  808710:	28cb883a 	add	r5,r5,r3
  808714:	31bfffc4 	addi	r6,r6,-1
  808718:	317ff62e 	bgeu	r6,r5,8086f4 <__alt_mem_onchip_mem+0xff8006f4>
  80871c:	01400434 	movhi	r5,16
  808720:	297fffc4 	addi	r5,r5,-1
  808724:	28800236 	bltu	r5,r2,808730 <__fpclassifyd+0x60>
  808728:	008000c4 	movi	r2,3
  80872c:	f800283a 	ret
  808730:	10c00226 	beq	r2,r3,80873c <__fpclassifyd+0x6c>
  808734:	0005883a 	mov	r2,zero
  808738:	f800283a 	ret
  80873c:	2005003a 	cmpeq	r2,r4,zero
  808740:	f800283a 	ret

00808744 <strcmp>:
  808744:	2144b03a 	or	r2,r4,r5
  808748:	108000cc 	andi	r2,r2,3
  80874c:	1000171e 	bne	r2,zero,8087ac <strcmp+0x68>
  808750:	20800017 	ldw	r2,0(r4)
  808754:	28c00017 	ldw	r3,0(r5)
  808758:	10c0141e 	bne	r2,r3,8087ac <strcmp+0x68>
  80875c:	027fbff4 	movhi	r9,65279
  808760:	4a7fbfc4 	addi	r9,r9,-257
  808764:	0086303a 	nor	r3,zero,r2
  808768:	02202074 	movhi	r8,32897
  80876c:	1245883a 	add	r2,r2,r9
  808770:	42202004 	addi	r8,r8,-32640
  808774:	10c4703a 	and	r2,r2,r3
  808778:	1204703a 	and	r2,r2,r8
  80877c:	10000226 	beq	r2,zero,808788 <strcmp+0x44>
  808780:	00002306 	br	808810 <strcmp+0xcc>
  808784:	1000221e 	bne	r2,zero,808810 <strcmp+0xcc>
  808788:	21000104 	addi	r4,r4,4
  80878c:	20c00017 	ldw	r3,0(r4)
  808790:	29400104 	addi	r5,r5,4
  808794:	29800017 	ldw	r6,0(r5)
  808798:	1a4f883a 	add	r7,r3,r9
  80879c:	00c4303a 	nor	r2,zero,r3
  8087a0:	3884703a 	and	r2,r7,r2
  8087a4:	1204703a 	and	r2,r2,r8
  8087a8:	19bff626 	beq	r3,r6,808784 <__alt_mem_onchip_mem+0xff800784>
  8087ac:	20800003 	ldbu	r2,0(r4)
  8087b0:	10c03fcc 	andi	r3,r2,255
  8087b4:	18c0201c 	xori	r3,r3,128
  8087b8:	18ffe004 	addi	r3,r3,-128
  8087bc:	18000c26 	beq	r3,zero,8087f0 <strcmp+0xac>
  8087c0:	29800007 	ldb	r6,0(r5)
  8087c4:	19800326 	beq	r3,r6,8087d4 <strcmp+0x90>
  8087c8:	00001306 	br	808818 <strcmp+0xd4>
  8087cc:	29800007 	ldb	r6,0(r5)
  8087d0:	11800b1e 	bne	r2,r6,808800 <strcmp+0xbc>
  8087d4:	21000044 	addi	r4,r4,1
  8087d8:	20c00003 	ldbu	r3,0(r4)
  8087dc:	29400044 	addi	r5,r5,1
  8087e0:	18803fcc 	andi	r2,r3,255
  8087e4:	1080201c 	xori	r2,r2,128
  8087e8:	10bfe004 	addi	r2,r2,-128
  8087ec:	103ff71e 	bne	r2,zero,8087cc <__alt_mem_onchip_mem+0xff8007cc>
  8087f0:	0007883a 	mov	r3,zero
  8087f4:	28800003 	ldbu	r2,0(r5)
  8087f8:	1885c83a 	sub	r2,r3,r2
  8087fc:	f800283a 	ret
  808800:	28800003 	ldbu	r2,0(r5)
  808804:	18c03fcc 	andi	r3,r3,255
  808808:	1885c83a 	sub	r2,r3,r2
  80880c:	f800283a 	ret
  808810:	0005883a 	mov	r2,zero
  808814:	f800283a 	ret
  808818:	10c03fcc 	andi	r3,r2,255
  80881c:	003ff506 	br	8087f4 <__alt_mem_onchip_mem+0xff8007f4>

00808820 <__sprint_r.part.0>:
  808820:	28801917 	ldw	r2,100(r5)
  808824:	defff604 	addi	sp,sp,-40
  808828:	dd400515 	stw	r21,20(sp)
  80882c:	dfc00915 	stw	ra,36(sp)
  808830:	df000815 	stw	fp,32(sp)
  808834:	ddc00715 	stw	r23,28(sp)
  808838:	dd800615 	stw	r22,24(sp)
  80883c:	dd000415 	stw	r20,16(sp)
  808840:	dcc00315 	stw	r19,12(sp)
  808844:	dc800215 	stw	r18,8(sp)
  808848:	dc400115 	stw	r17,4(sp)
  80884c:	dc000015 	stw	r16,0(sp)
  808850:	1088000c 	andi	r2,r2,8192
  808854:	302b883a 	mov	r21,r6
  808858:	10002e26 	beq	r2,zero,808914 <__sprint_r.part.0+0xf4>
  80885c:	30800217 	ldw	r2,8(r6)
  808860:	35800017 	ldw	r22,0(r6)
  808864:	10002926 	beq	r2,zero,80890c <__sprint_r.part.0+0xec>
  808868:	2827883a 	mov	r19,r5
  80886c:	2029883a 	mov	r20,r4
  808870:	b5c00104 	addi	r23,r22,4
  808874:	04bfffc4 	movi	r18,-1
  808878:	bc400017 	ldw	r17,0(r23)
  80887c:	b4000017 	ldw	r16,0(r22)
  808880:	0039883a 	mov	fp,zero
  808884:	8822d0ba 	srli	r17,r17,2
  808888:	8800031e 	bne	r17,zero,808898 <__sprint_r.part.0+0x78>
  80888c:	00001806 	br	8088f0 <__sprint_r.part.0+0xd0>
  808890:	84000104 	addi	r16,r16,4
  808894:	8f001526 	beq	r17,fp,8088ec <__sprint_r.part.0+0xcc>
  808898:	81400017 	ldw	r5,0(r16)
  80889c:	980d883a 	mov	r6,r19
  8088a0:	a009883a 	mov	r4,r20
  8088a4:	080a1940 	call	80a194 <_fputwc_r>
  8088a8:	e7000044 	addi	fp,fp,1
  8088ac:	14bff81e 	bne	r2,r18,808890 <__alt_mem_onchip_mem+0xff800890>
  8088b0:	9005883a 	mov	r2,r18
  8088b4:	a8000215 	stw	zero,8(r21)
  8088b8:	a8000115 	stw	zero,4(r21)
  8088bc:	dfc00917 	ldw	ra,36(sp)
  8088c0:	df000817 	ldw	fp,32(sp)
  8088c4:	ddc00717 	ldw	r23,28(sp)
  8088c8:	dd800617 	ldw	r22,24(sp)
  8088cc:	dd400517 	ldw	r21,20(sp)
  8088d0:	dd000417 	ldw	r20,16(sp)
  8088d4:	dcc00317 	ldw	r19,12(sp)
  8088d8:	dc800217 	ldw	r18,8(sp)
  8088dc:	dc400117 	ldw	r17,4(sp)
  8088e0:	dc000017 	ldw	r16,0(sp)
  8088e4:	dec00a04 	addi	sp,sp,40
  8088e8:	f800283a 	ret
  8088ec:	a8800217 	ldw	r2,8(r21)
  8088f0:	8c63883a 	add	r17,r17,r17
  8088f4:	8c63883a 	add	r17,r17,r17
  8088f8:	1445c83a 	sub	r2,r2,r17
  8088fc:	a8800215 	stw	r2,8(r21)
  808900:	b5800204 	addi	r22,r22,8
  808904:	bdc00204 	addi	r23,r23,8
  808908:	103fdb1e 	bne	r2,zero,808878 <__alt_mem_onchip_mem+0xff800878>
  80890c:	0005883a 	mov	r2,zero
  808910:	003fe806 	br	8088b4 <__alt_mem_onchip_mem+0xff8008b4>
  808914:	08065b40 	call	8065b4 <__sfvwrite_r>
  808918:	003fe606 	br	8088b4 <__alt_mem_onchip_mem+0xff8008b4>

0080891c <__sprint_r>:
  80891c:	30c00217 	ldw	r3,8(r6)
  808920:	18000126 	beq	r3,zero,808928 <__sprint_r+0xc>
  808924:	08088201 	jmpi	808820 <__sprint_r.part.0>
  808928:	30000115 	stw	zero,4(r6)
  80892c:	0005883a 	mov	r2,zero
  808930:	f800283a 	ret

00808934 <___vfiprintf_internal_r>:
  808934:	deffc904 	addi	sp,sp,-220
  808938:	df003515 	stw	fp,212(sp)
  80893c:	dd003115 	stw	r20,196(sp)
  808940:	dfc03615 	stw	ra,216(sp)
  808944:	ddc03415 	stw	r23,208(sp)
  808948:	dd803315 	stw	r22,204(sp)
  80894c:	dd403215 	stw	r21,200(sp)
  808950:	dcc03015 	stw	r19,192(sp)
  808954:	dc802f15 	stw	r18,188(sp)
  808958:	dc402e15 	stw	r17,184(sp)
  80895c:	dc002d15 	stw	r16,180(sp)
  808960:	d9002015 	stw	r4,128(sp)
  808964:	d9c02215 	stw	r7,136(sp)
  808968:	2829883a 	mov	r20,r5
  80896c:	3039883a 	mov	fp,r6
  808970:	20000226 	beq	r4,zero,80897c <___vfiprintf_internal_r+0x48>
  808974:	20800e17 	ldw	r2,56(r4)
  808978:	1000cf26 	beq	r2,zero,808cb8 <___vfiprintf_internal_r+0x384>
  80897c:	a080030b 	ldhu	r2,12(r20)
  808980:	10c8000c 	andi	r3,r2,8192
  808984:	1800061e 	bne	r3,zero,8089a0 <___vfiprintf_internal_r+0x6c>
  808988:	a1001917 	ldw	r4,100(r20)
  80898c:	00f7ffc4 	movi	r3,-8193
  808990:	10880014 	ori	r2,r2,8192
  808994:	20c6703a 	and	r3,r4,r3
  808998:	a080030d 	sth	r2,12(r20)
  80899c:	a0c01915 	stw	r3,100(r20)
  8089a0:	10c0020c 	andi	r3,r2,8
  8089a4:	1800a926 	beq	r3,zero,808c4c <___vfiprintf_internal_r+0x318>
  8089a8:	a0c00417 	ldw	r3,16(r20)
  8089ac:	1800a726 	beq	r3,zero,808c4c <___vfiprintf_internal_r+0x318>
  8089b0:	1080068c 	andi	r2,r2,26
  8089b4:	00c00284 	movi	r3,10
  8089b8:	10c0ac26 	beq	r2,r3,808c6c <___vfiprintf_internal_r+0x338>
  8089bc:	da801a04 	addi	r10,sp,104
  8089c0:	da801e15 	stw	r10,120(sp)
  8089c4:	d8801e17 	ldw	r2,120(sp)
  8089c8:	da8019c4 	addi	r10,sp,103
  8089cc:	05802074 	movhi	r22,129
  8089d0:	05c02074 	movhi	r23,129
  8089d4:	da801f15 	stw	r10,124(sp)
  8089d8:	1295c83a 	sub	r10,r2,r10
  8089dc:	b5871704 	addi	r22,r22,7260
  8089e0:	bdc71304 	addi	r23,r23,7244
  8089e4:	dec01a15 	stw	sp,104(sp)
  8089e8:	d8001c15 	stw	zero,112(sp)
  8089ec:	d8001b15 	stw	zero,108(sp)
  8089f0:	d8002615 	stw	zero,152(sp)
  8089f4:	d8002315 	stw	zero,140(sp)
  8089f8:	da802715 	stw	r10,156(sp)
  8089fc:	d811883a 	mov	r8,sp
  808a00:	dd002115 	stw	r20,132(sp)
  808a04:	e021883a 	mov	r16,fp
  808a08:	80800007 	ldb	r2,0(r16)
  808a0c:	1003ea26 	beq	r2,zero,8099b8 <___vfiprintf_internal_r+0x1084>
  808a10:	00c00944 	movi	r3,37
  808a14:	8025883a 	mov	r18,r16
  808a18:	10c0021e 	bne	r2,r3,808a24 <___vfiprintf_internal_r+0xf0>
  808a1c:	00001606 	br	808a78 <___vfiprintf_internal_r+0x144>
  808a20:	10c00326 	beq	r2,r3,808a30 <___vfiprintf_internal_r+0xfc>
  808a24:	94800044 	addi	r18,r18,1
  808a28:	90800007 	ldb	r2,0(r18)
  808a2c:	103ffc1e 	bne	r2,zero,808a20 <__alt_mem_onchip_mem+0xff800a20>
  808a30:	9423c83a 	sub	r17,r18,r16
  808a34:	88001026 	beq	r17,zero,808a78 <___vfiprintf_internal_r+0x144>
  808a38:	d8c01c17 	ldw	r3,112(sp)
  808a3c:	d8801b17 	ldw	r2,108(sp)
  808a40:	44000015 	stw	r16,0(r8)
  808a44:	88c7883a 	add	r3,r17,r3
  808a48:	10800044 	addi	r2,r2,1
  808a4c:	44400115 	stw	r17,4(r8)
  808a50:	d8c01c15 	stw	r3,112(sp)
  808a54:	d8801b15 	stw	r2,108(sp)
  808a58:	010001c4 	movi	r4,7
  808a5c:	2080760e 	bge	r4,r2,808c38 <___vfiprintf_internal_r+0x304>
  808a60:	1803821e 	bne	r3,zero,80986c <___vfiprintf_internal_r+0xf38>
  808a64:	da802317 	ldw	r10,140(sp)
  808a68:	d8001b15 	stw	zero,108(sp)
  808a6c:	d811883a 	mov	r8,sp
  808a70:	5455883a 	add	r10,r10,r17
  808a74:	da802315 	stw	r10,140(sp)
  808a78:	90800007 	ldb	r2,0(r18)
  808a7c:	10044626 	beq	r2,zero,809b98 <___vfiprintf_internal_r+0x1264>
  808a80:	90c00047 	ldb	r3,1(r18)
  808a84:	94000044 	addi	r16,r18,1
  808a88:	d8001d85 	stb	zero,118(sp)
  808a8c:	0009883a 	mov	r4,zero
  808a90:	000f883a 	mov	r7,zero
  808a94:	027fffc4 	movi	r9,-1
  808a98:	0023883a 	mov	r17,zero
  808a9c:	0029883a 	mov	r20,zero
  808aa0:	01401604 	movi	r5,88
  808aa4:	01800244 	movi	r6,9
  808aa8:	03400a84 	movi	r13,42
  808aac:	03001b04 	movi	r12,108
  808ab0:	84000044 	addi	r16,r16,1
  808ab4:	18bff804 	addi	r2,r3,-32
  808ab8:	28827336 	bltu	r5,r2,809488 <___vfiprintf_internal_r+0xb54>
  808abc:	100490ba 	slli	r2,r2,2
  808ac0:	02802074 	movhi	r10,129
  808ac4:	52a2b504 	addi	r10,r10,-29996
  808ac8:	1285883a 	add	r2,r2,r10
  808acc:	10800017 	ldw	r2,0(r2)
  808ad0:	1000683a 	jmp	r2
  808ad4:	008091bc 	xorhi	r2,zero,582
  808ad8:	00809488 	cmpgei	r2,zero,594
  808adc:	00809488 	cmpgei	r2,zero,594
  808ae0:	008091dc 	xori	r2,zero,583
  808ae4:	00809488 	cmpgei	r2,zero,594
  808ae8:	00809488 	cmpgei	r2,zero,594
  808aec:	00809488 	cmpgei	r2,zero,594
  808af0:	00809488 	cmpgei	r2,zero,594
  808af4:	00809488 	cmpgei	r2,zero,594
  808af8:	00809488 	cmpgei	r2,zero,594
  808afc:	008093c4 	movi	r2,591
  808b00:	008093e0 	cmpeqi	r2,zero,591
  808b04:	00809488 	cmpgei	r2,zero,594
  808b08:	00808cc8 	cmpgei	r2,zero,563
  808b0c:	008093f0 	cmpltui	r2,zero,591
  808b10:	00809488 	cmpgei	r2,zero,594
  808b14:	008091e8 	cmpgeui	r2,zero,583
  808b18:	008091f4 	movhi	r2,583
  808b1c:	008091f4 	movhi	r2,583
  808b20:	008091f4 	movhi	r2,583
  808b24:	008091f4 	movhi	r2,583
  808b28:	008091f4 	movhi	r2,583
  808b2c:	008091f4 	movhi	r2,583
  808b30:	008091f4 	movhi	r2,583
  808b34:	008091f4 	movhi	r2,583
  808b38:	008091f4 	movhi	r2,583
  808b3c:	00809488 	cmpgei	r2,zero,594
  808b40:	00809488 	cmpgei	r2,zero,594
  808b44:	00809488 	cmpgei	r2,zero,594
  808b48:	00809488 	cmpgei	r2,zero,594
  808b4c:	00809488 	cmpgei	r2,zero,594
  808b50:	00809488 	cmpgei	r2,zero,594
  808b54:	00809488 	cmpgei	r2,zero,594
  808b58:	00809488 	cmpgei	r2,zero,594
  808b5c:	00809488 	cmpgei	r2,zero,594
  808b60:	00809488 	cmpgei	r2,zero,594
  808b64:	00809220 	cmpeqi	r2,zero,584
  808b68:	00809488 	cmpgei	r2,zero,594
  808b6c:	00809488 	cmpgei	r2,zero,594
  808b70:	00809488 	cmpgei	r2,zero,594
  808b74:	00809488 	cmpgei	r2,zero,594
  808b78:	00809488 	cmpgei	r2,zero,594
  808b7c:	00809488 	cmpgei	r2,zero,594
  808b80:	00809488 	cmpgei	r2,zero,594
  808b84:	00809488 	cmpgei	r2,zero,594
  808b88:	00809488 	cmpgei	r2,zero,594
  808b8c:	00809488 	cmpgei	r2,zero,594
  808b90:	00809258 	cmpnei	r2,zero,585
  808b94:	00809488 	cmpgei	r2,zero,594
  808b98:	00809488 	cmpgei	r2,zero,594
  808b9c:	00809488 	cmpgei	r2,zero,594
  808ba0:	00809488 	cmpgei	r2,zero,594
  808ba4:	00809488 	cmpgei	r2,zero,594
  808ba8:	008092b0 	cmpltui	r2,zero,586
  808bac:	00809488 	cmpgei	r2,zero,594
  808bb0:	00809488 	cmpgei	r2,zero,594
  808bb4:	00809320 	cmpeqi	r2,zero,588
  808bb8:	00809488 	cmpgei	r2,zero,594
  808bbc:	00809488 	cmpgei	r2,zero,594
  808bc0:	00809488 	cmpgei	r2,zero,594
  808bc4:	00809488 	cmpgei	r2,zero,594
  808bc8:	00809488 	cmpgei	r2,zero,594
  808bcc:	00809488 	cmpgei	r2,zero,594
  808bd0:	00809488 	cmpgei	r2,zero,594
  808bd4:	00809488 	cmpgei	r2,zero,594
  808bd8:	00809488 	cmpgei	r2,zero,594
  808bdc:	00809488 	cmpgei	r2,zero,594
  808be0:	008090cc 	andi	r2,zero,579
  808be4:	008090f8 	rdprs	r2,zero,579
  808be8:	00809488 	cmpgei	r2,zero,594
  808bec:	00809488 	cmpgei	r2,zero,594
  808bf0:	00809488 	cmpgei	r2,zero,594
  808bf4:	00809430 	cmpltui	r2,zero,592
  808bf8:	008090f8 	rdprs	r2,zero,579
  808bfc:	00809488 	cmpgei	r2,zero,594
  808c00:	00809488 	cmpgei	r2,zero,594
  808c04:	00808f8c 	andi	r2,zero,574
  808c08:	00809488 	cmpgei	r2,zero,594
  808c0c:	00808f9c 	xori	r2,zero,574
  808c10:	00808fd8 	cmpnei	r2,zero,575
  808c14:	00808cd4 	movui	r2,563
  808c18:	00808f80 	call	808f8 <__alt_mem_sdram-0x77f708>
  808c1c:	00809488 	cmpgei	r2,zero,594
  808c20:	0080935c 	xori	r2,zero,589
  808c24:	00809488 	cmpgei	r2,zero,594
  808c28:	008093b4 	movhi	r2,590
  808c2c:	00809488 	cmpgei	r2,zero,594
  808c30:	00809488 	cmpgei	r2,zero,594
  808c34:	00809078 	rdprs	r2,zero,577
  808c38:	42000204 	addi	r8,r8,8
  808c3c:	da802317 	ldw	r10,140(sp)
  808c40:	5455883a 	add	r10,r10,r17
  808c44:	da802315 	stw	r10,140(sp)
  808c48:	003f8b06 	br	808a78 <__alt_mem_onchip_mem+0xff800a78>
  808c4c:	d9002017 	ldw	r4,128(sp)
  808c50:	a00b883a 	mov	r5,r20
  808c54:	080405c0 	call	80405c <__swsetup_r>
  808c58:	1003b11e 	bne	r2,zero,809b20 <___vfiprintf_internal_r+0x11ec>
  808c5c:	a080030b 	ldhu	r2,12(r20)
  808c60:	00c00284 	movi	r3,10
  808c64:	1080068c 	andi	r2,r2,26
  808c68:	10ff541e 	bne	r2,r3,8089bc <__alt_mem_onchip_mem+0xff8009bc>
  808c6c:	a080038f 	ldh	r2,14(r20)
  808c70:	103f5216 	blt	r2,zero,8089bc <__alt_mem_onchip_mem+0xff8009bc>
  808c74:	d9c02217 	ldw	r7,136(sp)
  808c78:	d9002017 	ldw	r4,128(sp)
  808c7c:	e00d883a 	mov	r6,fp
  808c80:	a00b883a 	mov	r5,r20
  808c84:	0809dac0 	call	809dac <__sbprintf>
  808c88:	dfc03617 	ldw	ra,216(sp)
  808c8c:	df003517 	ldw	fp,212(sp)
  808c90:	ddc03417 	ldw	r23,208(sp)
  808c94:	dd803317 	ldw	r22,204(sp)
  808c98:	dd403217 	ldw	r21,200(sp)
  808c9c:	dd003117 	ldw	r20,196(sp)
  808ca0:	dcc03017 	ldw	r19,192(sp)
  808ca4:	dc802f17 	ldw	r18,188(sp)
  808ca8:	dc402e17 	ldw	r17,184(sp)
  808cac:	dc002d17 	ldw	r16,180(sp)
  808cb0:	dec03704 	addi	sp,sp,220
  808cb4:	f800283a 	ret
  808cb8:	08060840 	call	806084 <__sinit>
  808cbc:	003f2f06 	br	80897c <__alt_mem_onchip_mem+0xff80097c>
  808cc0:	0463c83a 	sub	r17,zero,r17
  808cc4:	d8802215 	stw	r2,136(sp)
  808cc8:	a5000114 	ori	r20,r20,4
  808ccc:	80c00007 	ldb	r3,0(r16)
  808cd0:	003f7706 	br	808ab0 <__alt_mem_onchip_mem+0xff800ab0>
  808cd4:	00800c04 	movi	r2,48
  808cd8:	da802217 	ldw	r10,136(sp)
  808cdc:	d8801d05 	stb	r2,116(sp)
  808ce0:	00801e04 	movi	r2,120
  808ce4:	d8801d45 	stb	r2,117(sp)
  808ce8:	d8001d85 	stb	zero,118(sp)
  808cec:	50c00104 	addi	r3,r10,4
  808cf0:	54800017 	ldw	r18,0(r10)
  808cf4:	0027883a 	mov	r19,zero
  808cf8:	a0800094 	ori	r2,r20,2
  808cfc:	48030b16 	blt	r9,zero,80992c <___vfiprintf_internal_r+0xff8>
  808d00:	00bfdfc4 	movi	r2,-129
  808d04:	a096703a 	and	r11,r20,r2
  808d08:	d8c02215 	stw	r3,136(sp)
  808d0c:	5d000094 	ori	r20,r11,2
  808d10:	90032b1e 	bne	r18,zero,8099c0 <___vfiprintf_internal_r+0x108c>
  808d14:	00802074 	movhi	r2,129
  808d18:	1086b304 	addi	r2,r2,6860
  808d1c:	d8802615 	stw	r2,152(sp)
  808d20:	0039883a 	mov	fp,zero
  808d24:	48017b1e 	bne	r9,zero,809314 <___vfiprintf_internal_r+0x9e0>
  808d28:	0013883a 	mov	r9,zero
  808d2c:	0027883a 	mov	r19,zero
  808d30:	dd401a04 	addi	r21,sp,104
  808d34:	4825883a 	mov	r18,r9
  808d38:	4cc0010e 	bge	r9,r19,808d40 <___vfiprintf_internal_r+0x40c>
  808d3c:	9825883a 	mov	r18,r19
  808d40:	e7003fcc 	andi	fp,fp,255
  808d44:	e700201c 	xori	fp,fp,128
  808d48:	e73fe004 	addi	fp,fp,-128
  808d4c:	e0000126 	beq	fp,zero,808d54 <___vfiprintf_internal_r+0x420>
  808d50:	94800044 	addi	r18,r18,1
  808d54:	a380008c 	andi	r14,r20,2
  808d58:	70000126 	beq	r14,zero,808d60 <___vfiprintf_internal_r+0x42c>
  808d5c:	94800084 	addi	r18,r18,2
  808d60:	a700210c 	andi	fp,r20,132
  808d64:	e001df1e 	bne	fp,zero,8094e4 <___vfiprintf_internal_r+0xbb0>
  808d68:	8c87c83a 	sub	r3,r17,r18
  808d6c:	00c1dd0e 	bge	zero,r3,8094e4 <___vfiprintf_internal_r+0xbb0>
  808d70:	01c00404 	movi	r7,16
  808d74:	d8801c17 	ldw	r2,112(sp)
  808d78:	38c3ad0e 	bge	r7,r3,809c30 <___vfiprintf_internal_r+0x12fc>
  808d7c:	02802074 	movhi	r10,129
  808d80:	52871704 	addi	r10,r10,7260
  808d84:	dc002915 	stw	r16,164(sp)
  808d88:	d9801b17 	ldw	r6,108(sp)
  808d8c:	da802415 	stw	r10,144(sp)
  808d90:	03c001c4 	movi	r15,7
  808d94:	da402515 	stw	r9,148(sp)
  808d98:	db802815 	stw	r14,160(sp)
  808d9c:	1821883a 	mov	r16,r3
  808da0:	00000506 	br	808db8 <___vfiprintf_internal_r+0x484>
  808da4:	31400084 	addi	r5,r6,2
  808da8:	42000204 	addi	r8,r8,8
  808dac:	200d883a 	mov	r6,r4
  808db0:	843ffc04 	addi	r16,r16,-16
  808db4:	3c000d0e 	bge	r7,r16,808dec <___vfiprintf_internal_r+0x4b8>
  808db8:	10800404 	addi	r2,r2,16
  808dbc:	31000044 	addi	r4,r6,1
  808dc0:	45800015 	stw	r22,0(r8)
  808dc4:	41c00115 	stw	r7,4(r8)
  808dc8:	d8801c15 	stw	r2,112(sp)
  808dcc:	d9001b15 	stw	r4,108(sp)
  808dd0:	793ff40e 	bge	r15,r4,808da4 <__alt_mem_onchip_mem+0xff800da4>
  808dd4:	1001b51e 	bne	r2,zero,8094ac <___vfiprintf_internal_r+0xb78>
  808dd8:	843ffc04 	addi	r16,r16,-16
  808ddc:	000d883a 	mov	r6,zero
  808de0:	01400044 	movi	r5,1
  808de4:	d811883a 	mov	r8,sp
  808de8:	3c3ff316 	blt	r7,r16,808db8 <__alt_mem_onchip_mem+0xff800db8>
  808dec:	8007883a 	mov	r3,r16
  808df0:	da402517 	ldw	r9,148(sp)
  808df4:	db802817 	ldw	r14,160(sp)
  808df8:	dc002917 	ldw	r16,164(sp)
  808dfc:	da802417 	ldw	r10,144(sp)
  808e00:	1885883a 	add	r2,r3,r2
  808e04:	40c00115 	stw	r3,4(r8)
  808e08:	42800015 	stw	r10,0(r8)
  808e0c:	d8801c15 	stw	r2,112(sp)
  808e10:	d9401b15 	stw	r5,108(sp)
  808e14:	00c001c4 	movi	r3,7
  808e18:	19426016 	blt	r3,r5,80979c <___vfiprintf_internal_r+0xe68>
  808e1c:	d8c01d87 	ldb	r3,118(sp)
  808e20:	42000204 	addi	r8,r8,8
  808e24:	29000044 	addi	r4,r5,1
  808e28:	1801b31e 	bne	r3,zero,8094f8 <___vfiprintf_internal_r+0xbc4>
  808e2c:	7001c026 	beq	r14,zero,809530 <___vfiprintf_internal_r+0xbfc>
  808e30:	d8c01d04 	addi	r3,sp,116
  808e34:	10800084 	addi	r2,r2,2
  808e38:	40c00015 	stw	r3,0(r8)
  808e3c:	00c00084 	movi	r3,2
  808e40:	40c00115 	stw	r3,4(r8)
  808e44:	d8801c15 	stw	r2,112(sp)
  808e48:	d9001b15 	stw	r4,108(sp)
  808e4c:	00c001c4 	movi	r3,7
  808e50:	1902650e 	bge	r3,r4,8097e8 <___vfiprintf_internal_r+0xeb4>
  808e54:	10029a1e 	bne	r2,zero,8098c0 <___vfiprintf_internal_r+0xf8c>
  808e58:	00c02004 	movi	r3,128
  808e5c:	01000044 	movi	r4,1
  808e60:	000b883a 	mov	r5,zero
  808e64:	d811883a 	mov	r8,sp
  808e68:	e0c1b31e 	bne	fp,r3,809538 <___vfiprintf_internal_r+0xc04>
  808e6c:	8cb9c83a 	sub	fp,r17,r18
  808e70:	0701b10e 	bge	zero,fp,809538 <___vfiprintf_internal_r+0xc04>
  808e74:	01c00404 	movi	r7,16
  808e78:	3f03890e 	bge	r7,fp,809ca0 <___vfiprintf_internal_r+0x136c>
  808e7c:	00c02074 	movhi	r3,129
  808e80:	18c71304 	addi	r3,r3,7244
  808e84:	d8c02415 	stw	r3,144(sp)
  808e88:	8007883a 	mov	r3,r16
  808e8c:	034001c4 	movi	r13,7
  808e90:	e021883a 	mov	r16,fp
  808e94:	da402515 	stw	r9,148(sp)
  808e98:	1839883a 	mov	fp,r3
  808e9c:	00000506 	br	808eb4 <___vfiprintf_internal_r+0x580>
  808ea0:	29800084 	addi	r6,r5,2
  808ea4:	42000204 	addi	r8,r8,8
  808ea8:	180b883a 	mov	r5,r3
  808eac:	843ffc04 	addi	r16,r16,-16
  808eb0:	3c000d0e 	bge	r7,r16,808ee8 <___vfiprintf_internal_r+0x5b4>
  808eb4:	10800404 	addi	r2,r2,16
  808eb8:	28c00044 	addi	r3,r5,1
  808ebc:	45c00015 	stw	r23,0(r8)
  808ec0:	41c00115 	stw	r7,4(r8)
  808ec4:	d8801c15 	stw	r2,112(sp)
  808ec8:	d8c01b15 	stw	r3,108(sp)
  808ecc:	68fff40e 	bge	r13,r3,808ea0 <__alt_mem_onchip_mem+0xff800ea0>
  808ed0:	1002241e 	bne	r2,zero,809764 <___vfiprintf_internal_r+0xe30>
  808ed4:	843ffc04 	addi	r16,r16,-16
  808ed8:	01800044 	movi	r6,1
  808edc:	000b883a 	mov	r5,zero
  808ee0:	d811883a 	mov	r8,sp
  808ee4:	3c3ff316 	blt	r7,r16,808eb4 <__alt_mem_onchip_mem+0xff800eb4>
  808ee8:	da402517 	ldw	r9,148(sp)
  808eec:	e007883a 	mov	r3,fp
  808ef0:	8039883a 	mov	fp,r16
  808ef4:	1821883a 	mov	r16,r3
  808ef8:	d8c02417 	ldw	r3,144(sp)
  808efc:	1705883a 	add	r2,r2,fp
  808f00:	47000115 	stw	fp,4(r8)
  808f04:	40c00015 	stw	r3,0(r8)
  808f08:	d8801c15 	stw	r2,112(sp)
  808f0c:	d9801b15 	stw	r6,108(sp)
  808f10:	00c001c4 	movi	r3,7
  808f14:	19827616 	blt	r3,r6,8098f0 <___vfiprintf_internal_r+0xfbc>
  808f18:	4cf9c83a 	sub	fp,r9,r19
  808f1c:	42000204 	addi	r8,r8,8
  808f20:	31000044 	addi	r4,r6,1
  808f24:	300b883a 	mov	r5,r6
  808f28:	07018516 	blt	zero,fp,809540 <___vfiprintf_internal_r+0xc0c>
  808f2c:	9885883a 	add	r2,r19,r2
  808f30:	45400015 	stw	r21,0(r8)
  808f34:	44c00115 	stw	r19,4(r8)
  808f38:	d8801c15 	stw	r2,112(sp)
  808f3c:	d9001b15 	stw	r4,108(sp)
  808f40:	00c001c4 	movi	r3,7
  808f44:	1901dd0e 	bge	r3,r4,8096bc <___vfiprintf_internal_r+0xd88>
  808f48:	1002401e 	bne	r2,zero,80984c <___vfiprintf_internal_r+0xf18>
  808f4c:	d8001b15 	stw	zero,108(sp)
  808f50:	a2c0010c 	andi	r11,r20,4
  808f54:	58000226 	beq	r11,zero,808f60 <___vfiprintf_internal_r+0x62c>
  808f58:	8ca7c83a 	sub	r19,r17,r18
  808f5c:	04c2f216 	blt	zero,r19,809b28 <___vfiprintf_internal_r+0x11f4>
  808f60:	8c80010e 	bge	r17,r18,808f68 <___vfiprintf_internal_r+0x634>
  808f64:	9023883a 	mov	r17,r18
  808f68:	da802317 	ldw	r10,140(sp)
  808f6c:	5455883a 	add	r10,r10,r17
  808f70:	da802315 	stw	r10,140(sp)
  808f74:	d8001b15 	stw	zero,108(sp)
  808f78:	d811883a 	mov	r8,sp
  808f7c:	003ea206 	br	808a08 <__alt_mem_onchip_mem+0xff800a08>
  808f80:	a5000814 	ori	r20,r20,32
  808f84:	80c00007 	ldb	r3,0(r16)
  808f88:	003ec906 	br	808ab0 <__alt_mem_onchip_mem+0xff800ab0>
  808f8c:	80c00007 	ldb	r3,0(r16)
  808f90:	1b030926 	beq	r3,r12,809bb8 <___vfiprintf_internal_r+0x1284>
  808f94:	a5000414 	ori	r20,r20,16
  808f98:	003ec506 	br	808ab0 <__alt_mem_onchip_mem+0xff800ab0>
  808f9c:	21003fcc 	andi	r4,r4,255
  808fa0:	20035e1e 	bne	r4,zero,809d1c <___vfiprintf_internal_r+0x13e8>
  808fa4:	a080080c 	andi	r2,r20,32
  808fa8:	1002a526 	beq	r2,zero,809a40 <___vfiprintf_internal_r+0x110c>
  808fac:	da802217 	ldw	r10,136(sp)
  808fb0:	50800017 	ldw	r2,0(r10)
  808fb4:	da802317 	ldw	r10,140(sp)
  808fb8:	5007d7fa 	srai	r3,r10,31
  808fbc:	da802217 	ldw	r10,136(sp)
  808fc0:	10c00115 	stw	r3,4(r2)
  808fc4:	52800104 	addi	r10,r10,4
  808fc8:	da802215 	stw	r10,136(sp)
  808fcc:	da802317 	ldw	r10,140(sp)
  808fd0:	12800015 	stw	r10,0(r2)
  808fd4:	003e8c06 	br	808a08 <__alt_mem_onchip_mem+0xff800a08>
  808fd8:	21003fcc 	andi	r4,r4,255
  808fdc:	2003511e 	bne	r4,zero,809d24 <___vfiprintf_internal_r+0x13f0>
  808fe0:	a080080c 	andi	r2,r20,32
  808fe4:	1000a126 	beq	r2,zero,80926c <___vfiprintf_internal_r+0x938>
  808fe8:	da802217 	ldw	r10,136(sp)
  808fec:	d8001d85 	stb	zero,118(sp)
  808ff0:	50800204 	addi	r2,r10,8
  808ff4:	54800017 	ldw	r18,0(r10)
  808ff8:	54c00117 	ldw	r19,4(r10)
  808ffc:	4802b416 	blt	r9,zero,809ad0 <___vfiprintf_internal_r+0x119c>
  809000:	013fdfc4 	movi	r4,-129
  809004:	94c6b03a 	or	r3,r18,r19
  809008:	d8802215 	stw	r2,136(sp)
  80900c:	a128703a 	and	r20,r20,r4
  809010:	1800a226 	beq	r3,zero,80929c <___vfiprintf_internal_r+0x968>
  809014:	0039883a 	mov	fp,zero
  809018:	dd401a04 	addi	r21,sp,104
  80901c:	9006d0fa 	srli	r3,r18,3
  809020:	9808977a 	slli	r4,r19,29
  809024:	9826d0fa 	srli	r19,r19,3
  809028:	948001cc 	andi	r18,r18,7
  80902c:	90800c04 	addi	r2,r18,48
  809030:	ad7fffc4 	addi	r21,r21,-1
  809034:	20e4b03a 	or	r18,r4,r3
  809038:	a8800005 	stb	r2,0(r21)
  80903c:	94c6b03a 	or	r3,r18,r19
  809040:	183ff61e 	bne	r3,zero,80901c <__alt_mem_onchip_mem+0xff80101c>
  809044:	a0c0004c 	andi	r3,r20,1
  809048:	18005926 	beq	r3,zero,8091b0 <___vfiprintf_internal_r+0x87c>
  80904c:	10803fcc 	andi	r2,r2,255
  809050:	1080201c 	xori	r2,r2,128
  809054:	10bfe004 	addi	r2,r2,-128
  809058:	00c00c04 	movi	r3,48
  80905c:	10c05426 	beq	r2,r3,8091b0 <___vfiprintf_internal_r+0x87c>
  809060:	da801e17 	ldw	r10,120(sp)
  809064:	a8bfffc4 	addi	r2,r21,-1
  809068:	a8ffffc5 	stb	r3,-1(r21)
  80906c:	50a7c83a 	sub	r19,r10,r2
  809070:	102b883a 	mov	r21,r2
  809074:	003f2f06 	br	808d34 <__alt_mem_onchip_mem+0xff800d34>
  809078:	21003fcc 	andi	r4,r4,255
  80907c:	2003421e 	bne	r4,zero,809d88 <___vfiprintf_internal_r+0x1454>
  809080:	00802074 	movhi	r2,129
  809084:	1086b304 	addi	r2,r2,6860
  809088:	d8802615 	stw	r2,152(sp)
  80908c:	a080080c 	andi	r2,r20,32
  809090:	1000aa26 	beq	r2,zero,80933c <___vfiprintf_internal_r+0xa08>
  809094:	da802217 	ldw	r10,136(sp)
  809098:	54800017 	ldw	r18,0(r10)
  80909c:	54c00117 	ldw	r19,4(r10)
  8090a0:	52800204 	addi	r10,r10,8
  8090a4:	da802215 	stw	r10,136(sp)
  8090a8:	a080004c 	andi	r2,r20,1
  8090ac:	1001d226 	beq	r2,zero,8097f8 <___vfiprintf_internal_r+0xec4>
  8090b0:	94c4b03a 	or	r2,r18,r19
  8090b4:	1002351e 	bne	r2,zero,80998c <___vfiprintf_internal_r+0x1058>
  8090b8:	d8001d85 	stb	zero,118(sp)
  8090bc:	48022216 	blt	r9,zero,809948 <___vfiprintf_internal_r+0x1014>
  8090c0:	00bfdfc4 	movi	r2,-129
  8090c4:	a0a8703a 	and	r20,r20,r2
  8090c8:	003f1506 	br	808d20 <__alt_mem_onchip_mem+0xff800d20>
  8090cc:	da802217 	ldw	r10,136(sp)
  8090d0:	04800044 	movi	r18,1
  8090d4:	d8001d85 	stb	zero,118(sp)
  8090d8:	50800017 	ldw	r2,0(r10)
  8090dc:	52800104 	addi	r10,r10,4
  8090e0:	da802215 	stw	r10,136(sp)
  8090e4:	d8801005 	stb	r2,64(sp)
  8090e8:	9027883a 	mov	r19,r18
  8090ec:	dd401004 	addi	r21,sp,64
  8090f0:	0013883a 	mov	r9,zero
  8090f4:	003f1706 	br	808d54 <__alt_mem_onchip_mem+0xff800d54>
  8090f8:	21003fcc 	andi	r4,r4,255
  8090fc:	2003201e 	bne	r4,zero,809d80 <___vfiprintf_internal_r+0x144c>
  809100:	a080080c 	andi	r2,r20,32
  809104:	10004b26 	beq	r2,zero,809234 <___vfiprintf_internal_r+0x900>
  809108:	da802217 	ldw	r10,136(sp)
  80910c:	50800117 	ldw	r2,4(r10)
  809110:	54800017 	ldw	r18,0(r10)
  809114:	52800204 	addi	r10,r10,8
  809118:	da802215 	stw	r10,136(sp)
  80911c:	1027883a 	mov	r19,r2
  809120:	10022c16 	blt	r2,zero,8099d4 <___vfiprintf_internal_r+0x10a0>
  809124:	df001d83 	ldbu	fp,118(sp)
  809128:	48007216 	blt	r9,zero,8092f4 <___vfiprintf_internal_r+0x9c0>
  80912c:	00ffdfc4 	movi	r3,-129
  809130:	94c4b03a 	or	r2,r18,r19
  809134:	a0e8703a 	and	r20,r20,r3
  809138:	1000cc26 	beq	r2,zero,80946c <___vfiprintf_internal_r+0xb38>
  80913c:	98021026 	beq	r19,zero,809980 <___vfiprintf_internal_r+0x104c>
  809140:	dc402415 	stw	r17,144(sp)
  809144:	dc002515 	stw	r16,148(sp)
  809148:	9823883a 	mov	r17,r19
  80914c:	9021883a 	mov	r16,r18
  809150:	dd401a04 	addi	r21,sp,104
  809154:	4825883a 	mov	r18,r9
  809158:	4027883a 	mov	r19,r8
  80915c:	8009883a 	mov	r4,r16
  809160:	880b883a 	mov	r5,r17
  809164:	01800284 	movi	r6,10
  809168:	000f883a 	mov	r7,zero
  80916c:	080aaf00 	call	80aaf0 <__umoddi3>
  809170:	10800c04 	addi	r2,r2,48
  809174:	ad7fffc4 	addi	r21,r21,-1
  809178:	8009883a 	mov	r4,r16
  80917c:	880b883a 	mov	r5,r17
  809180:	a8800005 	stb	r2,0(r21)
  809184:	01800284 	movi	r6,10
  809188:	000f883a 	mov	r7,zero
  80918c:	080a5780 	call	80a578 <__udivdi3>
  809190:	1021883a 	mov	r16,r2
  809194:	10c4b03a 	or	r2,r2,r3
  809198:	1823883a 	mov	r17,r3
  80919c:	103fef1e 	bne	r2,zero,80915c <__alt_mem_onchip_mem+0xff80115c>
  8091a0:	dc402417 	ldw	r17,144(sp)
  8091a4:	dc002517 	ldw	r16,148(sp)
  8091a8:	9013883a 	mov	r9,r18
  8091ac:	9811883a 	mov	r8,r19
  8091b0:	da801e17 	ldw	r10,120(sp)
  8091b4:	5567c83a 	sub	r19,r10,r21
  8091b8:	003ede06 	br	808d34 <__alt_mem_onchip_mem+0xff800d34>
  8091bc:	38803fcc 	andi	r2,r7,255
  8091c0:	1080201c 	xori	r2,r2,128
  8091c4:	10bfe004 	addi	r2,r2,-128
  8091c8:	1002371e 	bne	r2,zero,809aa8 <___vfiprintf_internal_r+0x1174>
  8091cc:	01000044 	movi	r4,1
  8091d0:	01c00804 	movi	r7,32
  8091d4:	80c00007 	ldb	r3,0(r16)
  8091d8:	003e3506 	br	808ab0 <__alt_mem_onchip_mem+0xff800ab0>
  8091dc:	a5000054 	ori	r20,r20,1
  8091e0:	80c00007 	ldb	r3,0(r16)
  8091e4:	003e3206 	br	808ab0 <__alt_mem_onchip_mem+0xff800ab0>
  8091e8:	a5002014 	ori	r20,r20,128
  8091ec:	80c00007 	ldb	r3,0(r16)
  8091f0:	003e2f06 	br	808ab0 <__alt_mem_onchip_mem+0xff800ab0>
  8091f4:	8015883a 	mov	r10,r16
  8091f8:	0023883a 	mov	r17,zero
  8091fc:	18bff404 	addi	r2,r3,-48
  809200:	50c00007 	ldb	r3,0(r10)
  809204:	8c4002a4 	muli	r17,r17,10
  809208:	84000044 	addi	r16,r16,1
  80920c:	8015883a 	mov	r10,r16
  809210:	1463883a 	add	r17,r2,r17
  809214:	18bff404 	addi	r2,r3,-48
  809218:	30bff92e 	bgeu	r6,r2,809200 <__alt_mem_onchip_mem+0xff801200>
  80921c:	003e2506 	br	808ab4 <__alt_mem_onchip_mem+0xff800ab4>
  809220:	21003fcc 	andi	r4,r4,255
  809224:	2002d41e 	bne	r4,zero,809d78 <___vfiprintf_internal_r+0x1444>
  809228:	a5000414 	ori	r20,r20,16
  80922c:	a080080c 	andi	r2,r20,32
  809230:	103fb51e 	bne	r2,zero,809108 <__alt_mem_onchip_mem+0xff801108>
  809234:	a080040c 	andi	r2,r20,16
  809238:	1001f826 	beq	r2,zero,809a1c <___vfiprintf_internal_r+0x10e8>
  80923c:	da802217 	ldw	r10,136(sp)
  809240:	54800017 	ldw	r18,0(r10)
  809244:	52800104 	addi	r10,r10,4
  809248:	da802215 	stw	r10,136(sp)
  80924c:	9027d7fa 	srai	r19,r18,31
  809250:	9805883a 	mov	r2,r19
  809254:	003fb206 	br	809120 <__alt_mem_onchip_mem+0xff801120>
  809258:	21003fcc 	andi	r4,r4,255
  80925c:	2002c41e 	bne	r4,zero,809d70 <___vfiprintf_internal_r+0x143c>
  809260:	a5000414 	ori	r20,r20,16
  809264:	a080080c 	andi	r2,r20,32
  809268:	103f5f1e 	bne	r2,zero,808fe8 <__alt_mem_onchip_mem+0xff800fe8>
  80926c:	a080040c 	andi	r2,r20,16
  809270:	10020f26 	beq	r2,zero,809ab0 <___vfiprintf_internal_r+0x117c>
  809274:	da802217 	ldw	r10,136(sp)
  809278:	d8001d85 	stb	zero,118(sp)
  80927c:	0027883a 	mov	r19,zero
  809280:	50800104 	addi	r2,r10,4
  809284:	54800017 	ldw	r18,0(r10)
  809288:	48021116 	blt	r9,zero,809ad0 <___vfiprintf_internal_r+0x119c>
  80928c:	00ffdfc4 	movi	r3,-129
  809290:	d8802215 	stw	r2,136(sp)
  809294:	a0e8703a 	and	r20,r20,r3
  809298:	903f5e1e 	bne	r18,zero,809014 <__alt_mem_onchip_mem+0xff801014>
  80929c:	0039883a 	mov	fp,zero
  8092a0:	4802a626 	beq	r9,zero,809d3c <___vfiprintf_internal_r+0x1408>
  8092a4:	0025883a 	mov	r18,zero
  8092a8:	0027883a 	mov	r19,zero
  8092ac:	003f5a06 	br	809018 <__alt_mem_onchip_mem+0xff801018>
  8092b0:	21003fcc 	andi	r4,r4,255
  8092b4:	20029f1e 	bne	r4,zero,809d34 <___vfiprintf_internal_r+0x1400>
  8092b8:	a5000414 	ori	r20,r20,16
  8092bc:	a080080c 	andi	r2,r20,32
  8092c0:	10005e1e 	bne	r2,zero,80943c <___vfiprintf_internal_r+0xb08>
  8092c4:	a080040c 	andi	r2,r20,16
  8092c8:	1001a21e 	bne	r2,zero,809954 <___vfiprintf_internal_r+0x1020>
  8092cc:	a080100c 	andi	r2,r20,64
  8092d0:	d8001d85 	stb	zero,118(sp)
  8092d4:	da802217 	ldw	r10,136(sp)
  8092d8:	1002231e 	bne	r2,zero,809b68 <___vfiprintf_internal_r+0x1234>
  8092dc:	50800104 	addi	r2,r10,4
  8092e0:	54800017 	ldw	r18,0(r10)
  8092e4:	0027883a 	mov	r19,zero
  8092e8:	4801a00e 	bge	r9,zero,80996c <___vfiprintf_internal_r+0x1038>
  8092ec:	d8802215 	stw	r2,136(sp)
  8092f0:	0039883a 	mov	fp,zero
  8092f4:	94c4b03a 	or	r2,r18,r19
  8092f8:	103f901e 	bne	r2,zero,80913c <__alt_mem_onchip_mem+0xff80113c>
  8092fc:	00800044 	movi	r2,1
  809300:	10803fcc 	andi	r2,r2,255
  809304:	00c00044 	movi	r3,1
  809308:	10c05926 	beq	r2,r3,809470 <___vfiprintf_internal_r+0xb3c>
  80930c:	00c00084 	movi	r3,2
  809310:	10ffe41e 	bne	r2,r3,8092a4 <__alt_mem_onchip_mem+0xff8012a4>
  809314:	0025883a 	mov	r18,zero
  809318:	0027883a 	mov	r19,zero
  80931c:	00013d06 	br	809814 <___vfiprintf_internal_r+0xee0>
  809320:	21003fcc 	andi	r4,r4,255
  809324:	2002811e 	bne	r4,zero,809d2c <___vfiprintf_internal_r+0x13f8>
  809328:	00802074 	movhi	r2,129
  80932c:	1086ae04 	addi	r2,r2,6840
  809330:	d8802615 	stw	r2,152(sp)
  809334:	a080080c 	andi	r2,r20,32
  809338:	103f561e 	bne	r2,zero,809094 <__alt_mem_onchip_mem+0xff801094>
  80933c:	a080040c 	andi	r2,r20,16
  809340:	1001d126 	beq	r2,zero,809a88 <___vfiprintf_internal_r+0x1154>
  809344:	da802217 	ldw	r10,136(sp)
  809348:	0027883a 	mov	r19,zero
  80934c:	54800017 	ldw	r18,0(r10)
  809350:	52800104 	addi	r10,r10,4
  809354:	da802215 	stw	r10,136(sp)
  809358:	003f5306 	br	8090a8 <__alt_mem_onchip_mem+0xff8010a8>
  80935c:	da802217 	ldw	r10,136(sp)
  809360:	d8001d85 	stb	zero,118(sp)
  809364:	55400017 	ldw	r21,0(r10)
  809368:	50c00104 	addi	r3,r10,4
  80936c:	a8024226 	beq	r21,zero,809c78 <___vfiprintf_internal_r+0x1344>
  809370:	48021816 	blt	r9,zero,809bd4 <___vfiprintf_internal_r+0x12a0>
  809374:	480d883a 	mov	r6,r9
  809378:	000b883a 	mov	r5,zero
  80937c:	a809883a 	mov	r4,r21
  809380:	d8c02a15 	stw	r3,168(sp)
  809384:	da002b15 	stw	r8,172(sp)
  809388:	da402c15 	stw	r9,176(sp)
  80938c:	0806d880 	call	806d88 <memchr>
  809390:	d8c02a17 	ldw	r3,168(sp)
  809394:	da002b17 	ldw	r8,172(sp)
  809398:	da402c17 	ldw	r9,176(sp)
  80939c:	10024826 	beq	r2,zero,809cc0 <___vfiprintf_internal_r+0x138c>
  8093a0:	1567c83a 	sub	r19,r2,r21
  8093a4:	df001d83 	ldbu	fp,118(sp)
  8093a8:	d8c02215 	stw	r3,136(sp)
  8093ac:	0013883a 	mov	r9,zero
  8093b0:	003e6006 	br	808d34 <__alt_mem_onchip_mem+0xff800d34>
  8093b4:	21003fcc 	andi	r4,r4,255
  8093b8:	203fc026 	beq	r4,zero,8092bc <__alt_mem_onchip_mem+0xff8012bc>
  8093bc:	d9c01d85 	stb	r7,118(sp)
  8093c0:	003fbe06 	br	8092bc <__alt_mem_onchip_mem+0xff8012bc>
  8093c4:	da802217 	ldw	r10,136(sp)
  8093c8:	54400017 	ldw	r17,0(r10)
  8093cc:	50800104 	addi	r2,r10,4
  8093d0:	883e3b16 	blt	r17,zero,808cc0 <__alt_mem_onchip_mem+0xff800cc0>
  8093d4:	d8802215 	stw	r2,136(sp)
  8093d8:	80c00007 	ldb	r3,0(r16)
  8093dc:	003db406 	br	808ab0 <__alt_mem_onchip_mem+0xff800ab0>
  8093e0:	01000044 	movi	r4,1
  8093e4:	01c00ac4 	movi	r7,43
  8093e8:	80c00007 	ldb	r3,0(r16)
  8093ec:	003db006 	br	808ab0 <__alt_mem_onchip_mem+0xff800ab0>
  8093f0:	80c00007 	ldb	r3,0(r16)
  8093f4:	82800044 	addi	r10,r16,1
  8093f8:	1b423c26 	beq	r3,r13,809cec <___vfiprintf_internal_r+0x13b8>
  8093fc:	18bff404 	addi	r2,r3,-48
  809400:	0013883a 	mov	r9,zero
  809404:	30822b36 	bltu	r6,r2,809cb4 <___vfiprintf_internal_r+0x1380>
  809408:	50c00007 	ldb	r3,0(r10)
  80940c:	4a4002a4 	muli	r9,r9,10
  809410:	54000044 	addi	r16,r10,1
  809414:	8015883a 	mov	r10,r16
  809418:	4893883a 	add	r9,r9,r2
  80941c:	18bff404 	addi	r2,r3,-48
  809420:	30bff92e 	bgeu	r6,r2,809408 <__alt_mem_onchip_mem+0xff801408>
  809424:	483da30e 	bge	r9,zero,808ab4 <__alt_mem_onchip_mem+0xff800ab4>
  809428:	027fffc4 	movi	r9,-1
  80942c:	003da106 	br	808ab4 <__alt_mem_onchip_mem+0xff800ab4>
  809430:	a5001014 	ori	r20,r20,64
  809434:	80c00007 	ldb	r3,0(r16)
  809438:	003d9d06 	br	808ab0 <__alt_mem_onchip_mem+0xff800ab0>
  80943c:	da802217 	ldw	r10,136(sp)
  809440:	d8001d85 	stb	zero,118(sp)
  809444:	50c00204 	addi	r3,r10,8
  809448:	54800017 	ldw	r18,0(r10)
  80944c:	54c00117 	ldw	r19,4(r10)
  809450:	4801ca16 	blt	r9,zero,809b7c <___vfiprintf_internal_r+0x1248>
  809454:	013fdfc4 	movi	r4,-129
  809458:	94c4b03a 	or	r2,r18,r19
  80945c:	d8c02215 	stw	r3,136(sp)
  809460:	a128703a 	and	r20,r20,r4
  809464:	0039883a 	mov	fp,zero
  809468:	103f341e 	bne	r2,zero,80913c <__alt_mem_onchip_mem+0xff80113c>
  80946c:	483e2e26 	beq	r9,zero,808d28 <__alt_mem_onchip_mem+0xff800d28>
  809470:	0025883a 	mov	r18,zero
  809474:	94800c04 	addi	r18,r18,48
  809478:	dc8019c5 	stb	r18,103(sp)
  80947c:	dcc02717 	ldw	r19,156(sp)
  809480:	dd4019c4 	addi	r21,sp,103
  809484:	003e2b06 	br	808d34 <__alt_mem_onchip_mem+0xff800d34>
  809488:	21003fcc 	andi	r4,r4,255
  80948c:	2002361e 	bne	r4,zero,809d68 <___vfiprintf_internal_r+0x1434>
  809490:	1801c126 	beq	r3,zero,809b98 <___vfiprintf_internal_r+0x1264>
  809494:	04800044 	movi	r18,1
  809498:	d8c01005 	stb	r3,64(sp)
  80949c:	d8001d85 	stb	zero,118(sp)
  8094a0:	9027883a 	mov	r19,r18
  8094a4:	dd401004 	addi	r21,sp,64
  8094a8:	003f1106 	br	8090f0 <__alt_mem_onchip_mem+0xff8010f0>
  8094ac:	d9402117 	ldw	r5,132(sp)
  8094b0:	d9002017 	ldw	r4,128(sp)
  8094b4:	d9801a04 	addi	r6,sp,104
  8094b8:	d9c02b15 	stw	r7,172(sp)
  8094bc:	dbc02a15 	stw	r15,168(sp)
  8094c0:	08088200 	call	808820 <__sprint_r.part.0>
  8094c4:	d9c02b17 	ldw	r7,172(sp)
  8094c8:	dbc02a17 	ldw	r15,168(sp)
  8094cc:	10006d1e 	bne	r2,zero,809684 <___vfiprintf_internal_r+0xd50>
  8094d0:	d9801b17 	ldw	r6,108(sp)
  8094d4:	d8801c17 	ldw	r2,112(sp)
  8094d8:	d811883a 	mov	r8,sp
  8094dc:	31400044 	addi	r5,r6,1
  8094e0:	003e3306 	br	808db0 <__alt_mem_onchip_mem+0xff800db0>
  8094e4:	d9401b17 	ldw	r5,108(sp)
  8094e8:	d8801c17 	ldw	r2,112(sp)
  8094ec:	29000044 	addi	r4,r5,1
  8094f0:	d8c01d87 	ldb	r3,118(sp)
  8094f4:	183e4d26 	beq	r3,zero,808e2c <__alt_mem_onchip_mem+0xff800e2c>
  8094f8:	00c00044 	movi	r3,1
  8094fc:	d9401d84 	addi	r5,sp,118
  809500:	10c5883a 	add	r2,r2,r3
  809504:	41400015 	stw	r5,0(r8)
  809508:	40c00115 	stw	r3,4(r8)
  80950c:	d8801c15 	stw	r2,112(sp)
  809510:	d9001b15 	stw	r4,108(sp)
  809514:	014001c4 	movi	r5,7
  809518:	2900a90e 	bge	r5,r4,8097c0 <___vfiprintf_internal_r+0xe8c>
  80951c:	1000da1e 	bne	r2,zero,809888 <___vfiprintf_internal_r+0xf54>
  809520:	7000ab1e 	bne	r14,zero,8097d0 <___vfiprintf_internal_r+0xe9c>
  809524:	000b883a 	mov	r5,zero
  809528:	1809883a 	mov	r4,r3
  80952c:	d811883a 	mov	r8,sp
  809530:	00c02004 	movi	r3,128
  809534:	e0fe4d26 	beq	fp,r3,808e6c <__alt_mem_onchip_mem+0xff800e6c>
  809538:	4cf9c83a 	sub	fp,r9,r19
  80953c:	073e7b0e 	bge	zero,fp,808f2c <__alt_mem_onchip_mem+0xff800f2c>
  809540:	01c00404 	movi	r7,16
  809544:	3f01900e 	bge	r7,fp,809b88 <___vfiprintf_internal_r+0x1254>
  809548:	00c02074 	movhi	r3,129
  80954c:	18c71304 	addi	r3,r3,7244
  809550:	d8c02415 	stw	r3,144(sp)
  809554:	034001c4 	movi	r13,7
  809558:	00000506 	br	809570 <___vfiprintf_internal_r+0xc3c>
  80955c:	29000084 	addi	r4,r5,2
  809560:	42000204 	addi	r8,r8,8
  809564:	180b883a 	mov	r5,r3
  809568:	e73ffc04 	addi	fp,fp,-16
  80956c:	3f000d0e 	bge	r7,fp,8095a4 <___vfiprintf_internal_r+0xc70>
  809570:	10800404 	addi	r2,r2,16
  809574:	28c00044 	addi	r3,r5,1
  809578:	45c00015 	stw	r23,0(r8)
  80957c:	41c00115 	stw	r7,4(r8)
  809580:	d8801c15 	stw	r2,112(sp)
  809584:	d8c01b15 	stw	r3,108(sp)
  809588:	68fff40e 	bge	r13,r3,80955c <__alt_mem_onchip_mem+0xff80155c>
  80958c:	1000101e 	bne	r2,zero,8095d0 <___vfiprintf_internal_r+0xc9c>
  809590:	e73ffc04 	addi	fp,fp,-16
  809594:	01000044 	movi	r4,1
  809598:	000b883a 	mov	r5,zero
  80959c:	d811883a 	mov	r8,sp
  8095a0:	3f3ff316 	blt	r7,fp,809570 <__alt_mem_onchip_mem+0xff801570>
  8095a4:	da802417 	ldw	r10,144(sp)
  8095a8:	1705883a 	add	r2,r2,fp
  8095ac:	47000115 	stw	fp,4(r8)
  8095b0:	42800015 	stw	r10,0(r8)
  8095b4:	d8801c15 	stw	r2,112(sp)
  8095b8:	d9001b15 	stw	r4,108(sp)
  8095bc:	00c001c4 	movi	r3,7
  8095c0:	19003616 	blt	r3,r4,80969c <___vfiprintf_internal_r+0xd68>
  8095c4:	42000204 	addi	r8,r8,8
  8095c8:	21000044 	addi	r4,r4,1
  8095cc:	003e5706 	br	808f2c <__alt_mem_onchip_mem+0xff800f2c>
  8095d0:	d9402117 	ldw	r5,132(sp)
  8095d4:	d9002017 	ldw	r4,128(sp)
  8095d8:	d9801a04 	addi	r6,sp,104
  8095dc:	d9c02b15 	stw	r7,172(sp)
  8095e0:	db402a15 	stw	r13,168(sp)
  8095e4:	08088200 	call	808820 <__sprint_r.part.0>
  8095e8:	d9c02b17 	ldw	r7,172(sp)
  8095ec:	db402a17 	ldw	r13,168(sp)
  8095f0:	1000241e 	bne	r2,zero,809684 <___vfiprintf_internal_r+0xd50>
  8095f4:	d9401b17 	ldw	r5,108(sp)
  8095f8:	d8801c17 	ldw	r2,112(sp)
  8095fc:	d811883a 	mov	r8,sp
  809600:	29000044 	addi	r4,r5,1
  809604:	003fd806 	br	809568 <__alt_mem_onchip_mem+0xff801568>
  809608:	d9401b17 	ldw	r5,108(sp)
  80960c:	00c02074 	movhi	r3,129
  809610:	18c71704 	addi	r3,r3,7260
  809614:	d8c02415 	stw	r3,144(sp)
  809618:	29400044 	addi	r5,r5,1
  80961c:	d8c02417 	ldw	r3,144(sp)
  809620:	14c5883a 	add	r2,r2,r19
  809624:	44c00115 	stw	r19,4(r8)
  809628:	40c00015 	stw	r3,0(r8)
  80962c:	d8801c15 	stw	r2,112(sp)
  809630:	d9401b15 	stw	r5,108(sp)
  809634:	00c001c4 	movi	r3,7
  809638:	1940070e 	bge	r3,r5,809658 <___vfiprintf_internal_r+0xd24>
  80963c:	103e4826 	beq	r2,zero,808f60 <__alt_mem_onchip_mem+0xff800f60>
  809640:	d9402117 	ldw	r5,132(sp)
  809644:	d9002017 	ldw	r4,128(sp)
  809648:	d9801a04 	addi	r6,sp,104
  80964c:	08088200 	call	808820 <__sprint_r.part.0>
  809650:	10000c1e 	bne	r2,zero,809684 <___vfiprintf_internal_r+0xd50>
  809654:	d8801c17 	ldw	r2,112(sp)
  809658:	8c80010e 	bge	r17,r18,809660 <___vfiprintf_internal_r+0xd2c>
  80965c:	9023883a 	mov	r17,r18
  809660:	da802317 	ldw	r10,140(sp)
  809664:	5455883a 	add	r10,r10,r17
  809668:	da802315 	stw	r10,140(sp)
  80966c:	103e4126 	beq	r2,zero,808f74 <__alt_mem_onchip_mem+0xff800f74>
  809670:	d9402117 	ldw	r5,132(sp)
  809674:	d9002017 	ldw	r4,128(sp)
  809678:	d9801a04 	addi	r6,sp,104
  80967c:	08088200 	call	808820 <__sprint_r.part.0>
  809680:	103e3c26 	beq	r2,zero,808f74 <__alt_mem_onchip_mem+0xff800f74>
  809684:	dd002117 	ldw	r20,132(sp)
  809688:	a080030b 	ldhu	r2,12(r20)
  80968c:	1080100c 	andi	r2,r2,64
  809690:	1001231e 	bne	r2,zero,809b20 <___vfiprintf_internal_r+0x11ec>
  809694:	d8802317 	ldw	r2,140(sp)
  809698:	003d7b06 	br	808c88 <__alt_mem_onchip_mem+0xff800c88>
  80969c:	1000991e 	bne	r2,zero,809904 <___vfiprintf_internal_r+0xfd0>
  8096a0:	00c00044 	movi	r3,1
  8096a4:	9805883a 	mov	r2,r19
  8096a8:	dd400015 	stw	r21,0(sp)
  8096ac:	dcc00115 	stw	r19,4(sp)
  8096b0:	dcc01c15 	stw	r19,112(sp)
  8096b4:	d8c01b15 	stw	r3,108(sp)
  8096b8:	d811883a 	mov	r8,sp
  8096bc:	42000204 	addi	r8,r8,8
  8096c0:	a2c0010c 	andi	r11,r20,4
  8096c4:	583fe426 	beq	r11,zero,809658 <__alt_mem_onchip_mem+0xff801658>
  8096c8:	8ca7c83a 	sub	r19,r17,r18
  8096cc:	04ffe20e 	bge	zero,r19,809658 <__alt_mem_onchip_mem+0xff801658>
  8096d0:	01c00404 	movi	r7,16
  8096d4:	3cffcc0e 	bge	r7,r19,809608 <__alt_mem_onchip_mem+0xff801608>
  8096d8:	02802074 	movhi	r10,129
  8096dc:	52871704 	addi	r10,r10,7260
  8096e0:	d9001b17 	ldw	r4,108(sp)
  8096e4:	da802415 	stw	r10,144(sp)
  8096e8:	382b883a 	mov	r21,r7
  8096ec:	050001c4 	movi	r20,7
  8096f0:	df002017 	ldw	fp,128(sp)
  8096f4:	00000506 	br	80970c <___vfiprintf_internal_r+0xdd8>
  8096f8:	21400084 	addi	r5,r4,2
  8096fc:	42000204 	addi	r8,r8,8
  809700:	1809883a 	mov	r4,r3
  809704:	9cfffc04 	addi	r19,r19,-16
  809708:	acffc40e 	bge	r21,r19,80961c <__alt_mem_onchip_mem+0xff80161c>
  80970c:	10800404 	addi	r2,r2,16
  809710:	20c00044 	addi	r3,r4,1
  809714:	45800015 	stw	r22,0(r8)
  809718:	45400115 	stw	r21,4(r8)
  80971c:	d8801c15 	stw	r2,112(sp)
  809720:	d8c01b15 	stw	r3,108(sp)
  809724:	a0fff40e 	bge	r20,r3,8096f8 <__alt_mem_onchip_mem+0xff8016f8>
  809728:	1000041e 	bne	r2,zero,80973c <___vfiprintf_internal_r+0xe08>
  80972c:	01400044 	movi	r5,1
  809730:	0009883a 	mov	r4,zero
  809734:	d811883a 	mov	r8,sp
  809738:	003ff206 	br	809704 <__alt_mem_onchip_mem+0xff801704>
  80973c:	d9402117 	ldw	r5,132(sp)
  809740:	d9801a04 	addi	r6,sp,104
  809744:	e009883a 	mov	r4,fp
  809748:	08088200 	call	808820 <__sprint_r.part.0>
  80974c:	103fcd1e 	bne	r2,zero,809684 <__alt_mem_onchip_mem+0xff801684>
  809750:	d9001b17 	ldw	r4,108(sp)
  809754:	d8801c17 	ldw	r2,112(sp)
  809758:	d811883a 	mov	r8,sp
  80975c:	21400044 	addi	r5,r4,1
  809760:	003fe806 	br	809704 <__alt_mem_onchip_mem+0xff801704>
  809764:	d9402117 	ldw	r5,132(sp)
  809768:	d9002017 	ldw	r4,128(sp)
  80976c:	d9801a04 	addi	r6,sp,104
  809770:	d9c02b15 	stw	r7,172(sp)
  809774:	db402a15 	stw	r13,168(sp)
  809778:	08088200 	call	808820 <__sprint_r.part.0>
  80977c:	d9c02b17 	ldw	r7,172(sp)
  809780:	db402a17 	ldw	r13,168(sp)
  809784:	103fbf1e 	bne	r2,zero,809684 <__alt_mem_onchip_mem+0xff801684>
  809788:	d9401b17 	ldw	r5,108(sp)
  80978c:	d8801c17 	ldw	r2,112(sp)
  809790:	d811883a 	mov	r8,sp
  809794:	29800044 	addi	r6,r5,1
  809798:	003dc406 	br	808eac <__alt_mem_onchip_mem+0xff800eac>
  80979c:	1000d21e 	bne	r2,zero,809ae8 <___vfiprintf_internal_r+0x11b4>
  8097a0:	d8c01d87 	ldb	r3,118(sp)
  8097a4:	18009526 	beq	r3,zero,8099fc <___vfiprintf_internal_r+0x10c8>
  8097a8:	00800044 	movi	r2,1
  8097ac:	d8c01d84 	addi	r3,sp,118
  8097b0:	1009883a 	mov	r4,r2
  8097b4:	d8c00015 	stw	r3,0(sp)
  8097b8:	d8800115 	stw	r2,4(sp)
  8097bc:	d811883a 	mov	r8,sp
  8097c0:	200b883a 	mov	r5,r4
  8097c4:	42000204 	addi	r8,r8,8
  8097c8:	21000044 	addi	r4,r4,1
  8097cc:	003d9706 	br	808e2c <__alt_mem_onchip_mem+0xff800e2c>
  8097d0:	d9001d04 	addi	r4,sp,116
  8097d4:	00800084 	movi	r2,2
  8097d8:	d9000015 	stw	r4,0(sp)
  8097dc:	d8800115 	stw	r2,4(sp)
  8097e0:	1809883a 	mov	r4,r3
  8097e4:	d811883a 	mov	r8,sp
  8097e8:	200b883a 	mov	r5,r4
  8097ec:	42000204 	addi	r8,r8,8
  8097f0:	21000044 	addi	r4,r4,1
  8097f4:	003f4e06 	br	809530 <__alt_mem_onchip_mem+0xff801530>
  8097f8:	d8001d85 	stb	zero,118(sp)
  8097fc:	48005016 	blt	r9,zero,809940 <___vfiprintf_internal_r+0x100c>
  809800:	00ffdfc4 	movi	r3,-129
  809804:	94c4b03a 	or	r2,r18,r19
  809808:	a0e8703a 	and	r20,r20,r3
  80980c:	103d4426 	beq	r2,zero,808d20 <__alt_mem_onchip_mem+0xff800d20>
  809810:	0039883a 	mov	fp,zero
  809814:	d9002617 	ldw	r4,152(sp)
  809818:	dd401a04 	addi	r21,sp,104
  80981c:	908003cc 	andi	r2,r18,15
  809820:	9806973a 	slli	r3,r19,28
  809824:	2085883a 	add	r2,r4,r2
  809828:	9024d13a 	srli	r18,r18,4
  80982c:	10800003 	ldbu	r2,0(r2)
  809830:	9826d13a 	srli	r19,r19,4
  809834:	ad7fffc4 	addi	r21,r21,-1
  809838:	1ca4b03a 	or	r18,r3,r18
  80983c:	a8800005 	stb	r2,0(r21)
  809840:	94c4b03a 	or	r2,r18,r19
  809844:	103ff51e 	bne	r2,zero,80981c <__alt_mem_onchip_mem+0xff80181c>
  809848:	003e5906 	br	8091b0 <__alt_mem_onchip_mem+0xff8011b0>
  80984c:	d9402117 	ldw	r5,132(sp)
  809850:	d9002017 	ldw	r4,128(sp)
  809854:	d9801a04 	addi	r6,sp,104
  809858:	08088200 	call	808820 <__sprint_r.part.0>
  80985c:	103f891e 	bne	r2,zero,809684 <__alt_mem_onchip_mem+0xff801684>
  809860:	d8801c17 	ldw	r2,112(sp)
  809864:	d811883a 	mov	r8,sp
  809868:	003f9506 	br	8096c0 <__alt_mem_onchip_mem+0xff8016c0>
  80986c:	d9402117 	ldw	r5,132(sp)
  809870:	d9002017 	ldw	r4,128(sp)
  809874:	d9801a04 	addi	r6,sp,104
  809878:	08088200 	call	808820 <__sprint_r.part.0>
  80987c:	103f811e 	bne	r2,zero,809684 <__alt_mem_onchip_mem+0xff801684>
  809880:	d811883a 	mov	r8,sp
  809884:	003ced06 	br	808c3c <__alt_mem_onchip_mem+0xff800c3c>
  809888:	d9402117 	ldw	r5,132(sp)
  80988c:	d9002017 	ldw	r4,128(sp)
  809890:	d9801a04 	addi	r6,sp,104
  809894:	da402c15 	stw	r9,176(sp)
  809898:	db802a15 	stw	r14,168(sp)
  80989c:	08088200 	call	808820 <__sprint_r.part.0>
  8098a0:	da402c17 	ldw	r9,176(sp)
  8098a4:	db802a17 	ldw	r14,168(sp)
  8098a8:	103f761e 	bne	r2,zero,809684 <__alt_mem_onchip_mem+0xff801684>
  8098ac:	d9401b17 	ldw	r5,108(sp)
  8098b0:	d8801c17 	ldw	r2,112(sp)
  8098b4:	d811883a 	mov	r8,sp
  8098b8:	29000044 	addi	r4,r5,1
  8098bc:	003d5b06 	br	808e2c <__alt_mem_onchip_mem+0xff800e2c>
  8098c0:	d9402117 	ldw	r5,132(sp)
  8098c4:	d9002017 	ldw	r4,128(sp)
  8098c8:	d9801a04 	addi	r6,sp,104
  8098cc:	da402c15 	stw	r9,176(sp)
  8098d0:	08088200 	call	808820 <__sprint_r.part.0>
  8098d4:	da402c17 	ldw	r9,176(sp)
  8098d8:	103f6a1e 	bne	r2,zero,809684 <__alt_mem_onchip_mem+0xff801684>
  8098dc:	d9401b17 	ldw	r5,108(sp)
  8098e0:	d8801c17 	ldw	r2,112(sp)
  8098e4:	d811883a 	mov	r8,sp
  8098e8:	29000044 	addi	r4,r5,1
  8098ec:	003f1006 	br	809530 <__alt_mem_onchip_mem+0xff801530>
  8098f0:	1000c31e 	bne	r2,zero,809c00 <___vfiprintf_internal_r+0x12cc>
  8098f4:	01000044 	movi	r4,1
  8098f8:	000b883a 	mov	r5,zero
  8098fc:	d811883a 	mov	r8,sp
  809900:	003f0d06 	br	809538 <__alt_mem_onchip_mem+0xff801538>
  809904:	d9402117 	ldw	r5,132(sp)
  809908:	d9002017 	ldw	r4,128(sp)
  80990c:	d9801a04 	addi	r6,sp,104
  809910:	08088200 	call	808820 <__sprint_r.part.0>
  809914:	103f5b1e 	bne	r2,zero,809684 <__alt_mem_onchip_mem+0xff801684>
  809918:	d9001b17 	ldw	r4,108(sp)
  80991c:	d8801c17 	ldw	r2,112(sp)
  809920:	d811883a 	mov	r8,sp
  809924:	21000044 	addi	r4,r4,1
  809928:	003d8006 	br	808f2c <__alt_mem_onchip_mem+0xff800f2c>
  80992c:	01002074 	movhi	r4,129
  809930:	2106b304 	addi	r4,r4,6860
  809934:	d9002615 	stw	r4,152(sp)
  809938:	d8c02215 	stw	r3,136(sp)
  80993c:	1029883a 	mov	r20,r2
  809940:	94c4b03a 	or	r2,r18,r19
  809944:	103fb21e 	bne	r2,zero,809810 <__alt_mem_onchip_mem+0xff801810>
  809948:	0039883a 	mov	fp,zero
  80994c:	00800084 	movi	r2,2
  809950:	003e6b06 	br	809300 <__alt_mem_onchip_mem+0xff801300>
  809954:	da802217 	ldw	r10,136(sp)
  809958:	d8001d85 	stb	zero,118(sp)
  80995c:	0027883a 	mov	r19,zero
  809960:	50800104 	addi	r2,r10,4
  809964:	54800017 	ldw	r18,0(r10)
  809968:	483e6016 	blt	r9,zero,8092ec <__alt_mem_onchip_mem+0xff8012ec>
  80996c:	00ffdfc4 	movi	r3,-129
  809970:	d8802215 	stw	r2,136(sp)
  809974:	a0e8703a 	and	r20,r20,r3
  809978:	0039883a 	mov	fp,zero
  80997c:	903ebb26 	beq	r18,zero,80946c <__alt_mem_onchip_mem+0xff80146c>
  809980:	00800244 	movi	r2,9
  809984:	14bdee36 	bltu	r2,r18,809140 <__alt_mem_onchip_mem+0xff801140>
  809988:	003eba06 	br	809474 <__alt_mem_onchip_mem+0xff801474>
  80998c:	00800c04 	movi	r2,48
  809990:	d8c01d45 	stb	r3,117(sp)
  809994:	d8801d05 	stb	r2,116(sp)
  809998:	d8001d85 	stb	zero,118(sp)
  80999c:	a0c00094 	ori	r3,r20,2
  8099a0:	4800a916 	blt	r9,zero,809c48 <___vfiprintf_internal_r+0x1314>
  8099a4:	00bfdfc4 	movi	r2,-129
  8099a8:	a096703a 	and	r11,r20,r2
  8099ac:	5d000094 	ori	r20,r11,2
  8099b0:	0039883a 	mov	fp,zero
  8099b4:	003f9706 	br	809814 <__alt_mem_onchip_mem+0xff801814>
  8099b8:	8025883a 	mov	r18,r16
  8099bc:	003c2e06 	br	808a78 <__alt_mem_onchip_mem+0xff800a78>
  8099c0:	00802074 	movhi	r2,129
  8099c4:	1086b304 	addi	r2,r2,6860
  8099c8:	0039883a 	mov	fp,zero
  8099cc:	d8802615 	stw	r2,152(sp)
  8099d0:	003f9006 	br	809814 <__alt_mem_onchip_mem+0xff801814>
  8099d4:	04a5c83a 	sub	r18,zero,r18
  8099d8:	07000b44 	movi	fp,45
  8099dc:	9004c03a 	cmpne	r2,r18,zero
  8099e0:	04e7c83a 	sub	r19,zero,r19
  8099e4:	df001d85 	stb	fp,118(sp)
  8099e8:	98a7c83a 	sub	r19,r19,r2
  8099ec:	48009f16 	blt	r9,zero,809c6c <___vfiprintf_internal_r+0x1338>
  8099f0:	00bfdfc4 	movi	r2,-129
  8099f4:	a0a8703a 	and	r20,r20,r2
  8099f8:	003dd006 	br	80913c <__alt_mem_onchip_mem+0xff80113c>
  8099fc:	70004c26 	beq	r14,zero,809b30 <___vfiprintf_internal_r+0x11fc>
  809a00:	00800084 	movi	r2,2
  809a04:	d8c01d04 	addi	r3,sp,116
  809a08:	d8c00015 	stw	r3,0(sp)
  809a0c:	d8800115 	stw	r2,4(sp)
  809a10:	01000044 	movi	r4,1
  809a14:	d811883a 	mov	r8,sp
  809a18:	003f7306 	br	8097e8 <__alt_mem_onchip_mem+0xff8017e8>
  809a1c:	a080100c 	andi	r2,r20,64
  809a20:	da802217 	ldw	r10,136(sp)
  809a24:	103e0626 	beq	r2,zero,809240 <__alt_mem_onchip_mem+0xff801240>
  809a28:	5480000f 	ldh	r18,0(r10)
  809a2c:	52800104 	addi	r10,r10,4
  809a30:	da802215 	stw	r10,136(sp)
  809a34:	9027d7fa 	srai	r19,r18,31
  809a38:	9805883a 	mov	r2,r19
  809a3c:	003db806 	br	809120 <__alt_mem_onchip_mem+0xff801120>
  809a40:	a080040c 	andi	r2,r20,16
  809a44:	1000091e 	bne	r2,zero,809a6c <___vfiprintf_internal_r+0x1138>
  809a48:	a2c0100c 	andi	r11,r20,64
  809a4c:	58000726 	beq	r11,zero,809a6c <___vfiprintf_internal_r+0x1138>
  809a50:	da802217 	ldw	r10,136(sp)
  809a54:	50800017 	ldw	r2,0(r10)
  809a58:	52800104 	addi	r10,r10,4
  809a5c:	da802215 	stw	r10,136(sp)
  809a60:	da802317 	ldw	r10,140(sp)
  809a64:	1280000d 	sth	r10,0(r2)
  809a68:	003be706 	br	808a08 <__alt_mem_onchip_mem+0xff800a08>
  809a6c:	da802217 	ldw	r10,136(sp)
  809a70:	50800017 	ldw	r2,0(r10)
  809a74:	52800104 	addi	r10,r10,4
  809a78:	da802215 	stw	r10,136(sp)
  809a7c:	da802317 	ldw	r10,140(sp)
  809a80:	12800015 	stw	r10,0(r2)
  809a84:	003be006 	br	808a08 <__alt_mem_onchip_mem+0xff800a08>
  809a88:	a080100c 	andi	r2,r20,64
  809a8c:	da802217 	ldw	r10,136(sp)
  809a90:	10003026 	beq	r2,zero,809b54 <___vfiprintf_internal_r+0x1220>
  809a94:	5480000b 	ldhu	r18,0(r10)
  809a98:	52800104 	addi	r10,r10,4
  809a9c:	0027883a 	mov	r19,zero
  809aa0:	da802215 	stw	r10,136(sp)
  809aa4:	003d8006 	br	8090a8 <__alt_mem_onchip_mem+0xff8010a8>
  809aa8:	80c00007 	ldb	r3,0(r16)
  809aac:	003c0006 	br	808ab0 <__alt_mem_onchip_mem+0xff800ab0>
  809ab0:	a080100c 	andi	r2,r20,64
  809ab4:	d8001d85 	stb	zero,118(sp)
  809ab8:	da802217 	ldw	r10,136(sp)
  809abc:	1000201e 	bne	r2,zero,809b40 <___vfiprintf_internal_r+0x120c>
  809ac0:	50800104 	addi	r2,r10,4
  809ac4:	54800017 	ldw	r18,0(r10)
  809ac8:	0027883a 	mov	r19,zero
  809acc:	483def0e 	bge	r9,zero,80928c <__alt_mem_onchip_mem+0xff80128c>
  809ad0:	94c6b03a 	or	r3,r18,r19
  809ad4:	d8802215 	stw	r2,136(sp)
  809ad8:	183d4e1e 	bne	r3,zero,809014 <__alt_mem_onchip_mem+0xff801014>
  809adc:	0039883a 	mov	fp,zero
  809ae0:	0005883a 	mov	r2,zero
  809ae4:	003e0606 	br	809300 <__alt_mem_onchip_mem+0xff801300>
  809ae8:	d9402117 	ldw	r5,132(sp)
  809aec:	d9002017 	ldw	r4,128(sp)
  809af0:	d9801a04 	addi	r6,sp,104
  809af4:	da402c15 	stw	r9,176(sp)
  809af8:	db802a15 	stw	r14,168(sp)
  809afc:	08088200 	call	808820 <__sprint_r.part.0>
  809b00:	da402c17 	ldw	r9,176(sp)
  809b04:	db802a17 	ldw	r14,168(sp)
  809b08:	103ede1e 	bne	r2,zero,809684 <__alt_mem_onchip_mem+0xff801684>
  809b0c:	d9401b17 	ldw	r5,108(sp)
  809b10:	d8801c17 	ldw	r2,112(sp)
  809b14:	d811883a 	mov	r8,sp
  809b18:	29000044 	addi	r4,r5,1
  809b1c:	003e7406 	br	8094f0 <__alt_mem_onchip_mem+0xff8014f0>
  809b20:	00bfffc4 	movi	r2,-1
  809b24:	003c5806 	br	808c88 <__alt_mem_onchip_mem+0xff800c88>
  809b28:	d811883a 	mov	r8,sp
  809b2c:	003ee806 	br	8096d0 <__alt_mem_onchip_mem+0xff8016d0>
  809b30:	000b883a 	mov	r5,zero
  809b34:	01000044 	movi	r4,1
  809b38:	d811883a 	mov	r8,sp
  809b3c:	003e7c06 	br	809530 <__alt_mem_onchip_mem+0xff801530>
  809b40:	50800104 	addi	r2,r10,4
  809b44:	5480000b 	ldhu	r18,0(r10)
  809b48:	0027883a 	mov	r19,zero
  809b4c:	483dcf0e 	bge	r9,zero,80928c <__alt_mem_onchip_mem+0xff80128c>
  809b50:	003fdf06 	br	809ad0 <__alt_mem_onchip_mem+0xff801ad0>
  809b54:	54800017 	ldw	r18,0(r10)
  809b58:	52800104 	addi	r10,r10,4
  809b5c:	0027883a 	mov	r19,zero
  809b60:	da802215 	stw	r10,136(sp)
  809b64:	003d5006 	br	8090a8 <__alt_mem_onchip_mem+0xff8010a8>
  809b68:	50800104 	addi	r2,r10,4
  809b6c:	5480000b 	ldhu	r18,0(r10)
  809b70:	0027883a 	mov	r19,zero
  809b74:	483f7d0e 	bge	r9,zero,80996c <__alt_mem_onchip_mem+0xff80196c>
  809b78:	003ddc06 	br	8092ec <__alt_mem_onchip_mem+0xff8012ec>
  809b7c:	d8c02215 	stw	r3,136(sp)
  809b80:	0039883a 	mov	fp,zero
  809b84:	003ddb06 	br	8092f4 <__alt_mem_onchip_mem+0xff8012f4>
  809b88:	02802074 	movhi	r10,129
  809b8c:	52871304 	addi	r10,r10,7244
  809b90:	da802415 	stw	r10,144(sp)
  809b94:	003e8306 	br	8095a4 <__alt_mem_onchip_mem+0xff8015a4>
  809b98:	d8801c17 	ldw	r2,112(sp)
  809b9c:	dd002117 	ldw	r20,132(sp)
  809ba0:	103eb926 	beq	r2,zero,809688 <__alt_mem_onchip_mem+0xff801688>
  809ba4:	d9002017 	ldw	r4,128(sp)
  809ba8:	d9801a04 	addi	r6,sp,104
  809bac:	a00b883a 	mov	r5,r20
  809bb0:	08088200 	call	808820 <__sprint_r.part.0>
  809bb4:	003eb406 	br	809688 <__alt_mem_onchip_mem+0xff801688>
  809bb8:	80c00043 	ldbu	r3,1(r16)
  809bbc:	a5000814 	ori	r20,r20,32
  809bc0:	84000044 	addi	r16,r16,1
  809bc4:	18c03fcc 	andi	r3,r3,255
  809bc8:	18c0201c 	xori	r3,r3,128
  809bcc:	18ffe004 	addi	r3,r3,-128
  809bd0:	003bb706 	br	808ab0 <__alt_mem_onchip_mem+0xff800ab0>
  809bd4:	a809883a 	mov	r4,r21
  809bd8:	d8c02a15 	stw	r3,168(sp)
  809bdc:	da002b15 	stw	r8,172(sp)
  809be0:	0801c940 	call	801c94 <strlen>
  809be4:	d8c02a17 	ldw	r3,168(sp)
  809be8:	1027883a 	mov	r19,r2
  809bec:	df001d83 	ldbu	fp,118(sp)
  809bf0:	d8c02215 	stw	r3,136(sp)
  809bf4:	0013883a 	mov	r9,zero
  809bf8:	da002b17 	ldw	r8,172(sp)
  809bfc:	003c4d06 	br	808d34 <__alt_mem_onchip_mem+0xff800d34>
  809c00:	d9402117 	ldw	r5,132(sp)
  809c04:	d9002017 	ldw	r4,128(sp)
  809c08:	d9801a04 	addi	r6,sp,104
  809c0c:	da402c15 	stw	r9,176(sp)
  809c10:	08088200 	call	808820 <__sprint_r.part.0>
  809c14:	da402c17 	ldw	r9,176(sp)
  809c18:	103e9a1e 	bne	r2,zero,809684 <__alt_mem_onchip_mem+0xff801684>
  809c1c:	d9401b17 	ldw	r5,108(sp)
  809c20:	d8801c17 	ldw	r2,112(sp)
  809c24:	d811883a 	mov	r8,sp
  809c28:	29000044 	addi	r4,r5,1
  809c2c:	003e4206 	br	809538 <__alt_mem_onchip_mem+0xff801538>
  809c30:	d9401b17 	ldw	r5,108(sp)
  809c34:	01002074 	movhi	r4,129
  809c38:	21071704 	addi	r4,r4,7260
  809c3c:	d9002415 	stw	r4,144(sp)
  809c40:	29400044 	addi	r5,r5,1
  809c44:	003c6d06 	br	808dfc <__alt_mem_onchip_mem+0xff800dfc>
  809c48:	0039883a 	mov	fp,zero
  809c4c:	00800084 	movi	r2,2
  809c50:	10803fcc 	andi	r2,r2,255
  809c54:	01000044 	movi	r4,1
  809c58:	11001e26 	beq	r2,r4,809cd4 <___vfiprintf_internal_r+0x13a0>
  809c5c:	01000084 	movi	r4,2
  809c60:	11001e1e 	bne	r2,r4,809cdc <___vfiprintf_internal_r+0x13a8>
  809c64:	1829883a 	mov	r20,r3
  809c68:	003eea06 	br	809814 <__alt_mem_onchip_mem+0xff801814>
  809c6c:	a007883a 	mov	r3,r20
  809c70:	00800044 	movi	r2,1
  809c74:	003ff606 	br	809c50 <__alt_mem_onchip_mem+0xff801c50>
  809c78:	00800184 	movi	r2,6
  809c7c:	1240012e 	bgeu	r2,r9,809c84 <___vfiprintf_internal_r+0x1350>
  809c80:	1013883a 	mov	r9,r2
  809c84:	4827883a 	mov	r19,r9
  809c88:	4825883a 	mov	r18,r9
  809c8c:	48001516 	blt	r9,zero,809ce4 <___vfiprintf_internal_r+0x13b0>
  809c90:	05402074 	movhi	r21,129
  809c94:	d8c02215 	stw	r3,136(sp)
  809c98:	ad46b804 	addi	r21,r21,6880
  809c9c:	003d1406 	br	8090f0 <__alt_mem_onchip_mem+0xff8010f0>
  809ca0:	02802074 	movhi	r10,129
  809ca4:	52871304 	addi	r10,r10,7244
  809ca8:	da802415 	stw	r10,144(sp)
  809cac:	200d883a 	mov	r6,r4
  809cb0:	003c9106 	br	808ef8 <__alt_mem_onchip_mem+0xff800ef8>
  809cb4:	5021883a 	mov	r16,r10
  809cb8:	0013883a 	mov	r9,zero
  809cbc:	003b7d06 	br	808ab4 <__alt_mem_onchip_mem+0xff800ab4>
  809cc0:	4827883a 	mov	r19,r9
  809cc4:	df001d83 	ldbu	fp,118(sp)
  809cc8:	d8c02215 	stw	r3,136(sp)
  809ccc:	0013883a 	mov	r9,zero
  809cd0:	003c1806 	br	808d34 <__alt_mem_onchip_mem+0xff800d34>
  809cd4:	1829883a 	mov	r20,r3
  809cd8:	003d1806 	br	80913c <__alt_mem_onchip_mem+0xff80113c>
  809cdc:	1829883a 	mov	r20,r3
  809ce0:	003ccd06 	br	809018 <__alt_mem_onchip_mem+0xff801018>
  809ce4:	0025883a 	mov	r18,zero
  809ce8:	003fe906 	br	809c90 <__alt_mem_onchip_mem+0xff801c90>
  809cec:	d8802217 	ldw	r2,136(sp)
  809cf0:	80c00043 	ldbu	r3,1(r16)
  809cf4:	5021883a 	mov	r16,r10
  809cf8:	12400017 	ldw	r9,0(r2)
  809cfc:	10800104 	addi	r2,r2,4
  809d00:	d8802215 	stw	r2,136(sp)
  809d04:	483faf0e 	bge	r9,zero,809bc4 <__alt_mem_onchip_mem+0xff801bc4>
  809d08:	18c03fcc 	andi	r3,r3,255
  809d0c:	18c0201c 	xori	r3,r3,128
  809d10:	027fffc4 	movi	r9,-1
  809d14:	18ffe004 	addi	r3,r3,-128
  809d18:	003b6506 	br	808ab0 <__alt_mem_onchip_mem+0xff800ab0>
  809d1c:	d9c01d85 	stb	r7,118(sp)
  809d20:	003ca006 	br	808fa4 <__alt_mem_onchip_mem+0xff800fa4>
  809d24:	d9c01d85 	stb	r7,118(sp)
  809d28:	003cad06 	br	808fe0 <__alt_mem_onchip_mem+0xff800fe0>
  809d2c:	d9c01d85 	stb	r7,118(sp)
  809d30:	003d7d06 	br	809328 <__alt_mem_onchip_mem+0xff801328>
  809d34:	d9c01d85 	stb	r7,118(sp)
  809d38:	003d5f06 	br	8092b8 <__alt_mem_onchip_mem+0xff8012b8>
  809d3c:	a080004c 	andi	r2,r20,1
  809d40:	0039883a 	mov	fp,zero
  809d44:	10000526 	beq	r2,zero,809d5c <___vfiprintf_internal_r+0x1428>
  809d48:	00800c04 	movi	r2,48
  809d4c:	d88019c5 	stb	r2,103(sp)
  809d50:	dcc02717 	ldw	r19,156(sp)
  809d54:	dd4019c4 	addi	r21,sp,103
  809d58:	003bf606 	br	808d34 <__alt_mem_onchip_mem+0xff800d34>
  809d5c:	0027883a 	mov	r19,zero
  809d60:	dd401a04 	addi	r21,sp,104
  809d64:	003bf306 	br	808d34 <__alt_mem_onchip_mem+0xff800d34>
  809d68:	d9c01d85 	stb	r7,118(sp)
  809d6c:	003dc806 	br	809490 <__alt_mem_onchip_mem+0xff801490>
  809d70:	d9c01d85 	stb	r7,118(sp)
  809d74:	003d3a06 	br	809260 <__alt_mem_onchip_mem+0xff801260>
  809d78:	d9c01d85 	stb	r7,118(sp)
  809d7c:	003d2a06 	br	809228 <__alt_mem_onchip_mem+0xff801228>
  809d80:	d9c01d85 	stb	r7,118(sp)
  809d84:	003cde06 	br	809100 <__alt_mem_onchip_mem+0xff801100>
  809d88:	d9c01d85 	stb	r7,118(sp)
  809d8c:	003cbc06 	br	809080 <__alt_mem_onchip_mem+0xff801080>

00809d90 <__vfiprintf_internal>:
  809d90:	00802074 	movhi	r2,129
  809d94:	108f4904 	addi	r2,r2,15652
  809d98:	300f883a 	mov	r7,r6
  809d9c:	280d883a 	mov	r6,r5
  809da0:	200b883a 	mov	r5,r4
  809da4:	11000017 	ldw	r4,0(r2)
  809da8:	08089341 	jmpi	808934 <___vfiprintf_internal_r>

00809dac <__sbprintf>:
  809dac:	2880030b 	ldhu	r2,12(r5)
  809db0:	2ac01917 	ldw	r11,100(r5)
  809db4:	2a80038b 	ldhu	r10,14(r5)
  809db8:	2a400717 	ldw	r9,28(r5)
  809dbc:	2a000917 	ldw	r8,36(r5)
  809dc0:	defee204 	addi	sp,sp,-1144
  809dc4:	00c10004 	movi	r3,1024
  809dc8:	dc011a15 	stw	r16,1128(sp)
  809dcc:	10bfff4c 	andi	r2,r2,65533
  809dd0:	2821883a 	mov	r16,r5
  809dd4:	d8cb883a 	add	r5,sp,r3
  809dd8:	dc811c15 	stw	r18,1136(sp)
  809ddc:	dc411b15 	stw	r17,1132(sp)
  809de0:	dfc11d15 	stw	ra,1140(sp)
  809de4:	2025883a 	mov	r18,r4
  809de8:	d881030d 	sth	r2,1036(sp)
  809dec:	dac11915 	stw	r11,1124(sp)
  809df0:	da81038d 	sth	r10,1038(sp)
  809df4:	da410715 	stw	r9,1052(sp)
  809df8:	da010915 	stw	r8,1060(sp)
  809dfc:	dec10015 	stw	sp,1024(sp)
  809e00:	dec10415 	stw	sp,1040(sp)
  809e04:	d8c10215 	stw	r3,1032(sp)
  809e08:	d8c10515 	stw	r3,1044(sp)
  809e0c:	d8010615 	stw	zero,1048(sp)
  809e10:	08089340 	call	808934 <___vfiprintf_internal_r>
  809e14:	1023883a 	mov	r17,r2
  809e18:	10000416 	blt	r2,zero,809e2c <__sbprintf+0x80>
  809e1c:	d9410004 	addi	r5,sp,1024
  809e20:	9009883a 	mov	r4,r18
  809e24:	0805ca80 	call	805ca8 <_fflush_r>
  809e28:	10000d1e 	bne	r2,zero,809e60 <__sbprintf+0xb4>
  809e2c:	d881030b 	ldhu	r2,1036(sp)
  809e30:	1080100c 	andi	r2,r2,64
  809e34:	10000326 	beq	r2,zero,809e44 <__sbprintf+0x98>
  809e38:	8080030b 	ldhu	r2,12(r16)
  809e3c:	10801014 	ori	r2,r2,64
  809e40:	8080030d 	sth	r2,12(r16)
  809e44:	8805883a 	mov	r2,r17
  809e48:	dfc11d17 	ldw	ra,1140(sp)
  809e4c:	dc811c17 	ldw	r18,1136(sp)
  809e50:	dc411b17 	ldw	r17,1132(sp)
  809e54:	dc011a17 	ldw	r16,1128(sp)
  809e58:	dec11e04 	addi	sp,sp,1144
  809e5c:	f800283a 	ret
  809e60:	047fffc4 	movi	r17,-1
  809e64:	003ff106 	br	809e2c <__alt_mem_onchip_mem+0xff801e2c>

00809e68 <_calloc_r>:
  809e68:	298b383a 	mul	r5,r5,r6
  809e6c:	defffe04 	addi	sp,sp,-8
  809e70:	dfc00115 	stw	ra,4(sp)
  809e74:	dc000015 	stw	r16,0(sp)
  809e78:	0800eac0 	call	800eac <_malloc_r>
  809e7c:	10002926 	beq	r2,zero,809f24 <_calloc_r+0xbc>
  809e80:	11bfff17 	ldw	r6,-4(r2)
  809e84:	1021883a 	mov	r16,r2
  809e88:	00bfff04 	movi	r2,-4
  809e8c:	308c703a 	and	r6,r6,r2
  809e90:	00c00904 	movi	r3,36
  809e94:	308d883a 	add	r6,r6,r2
  809e98:	19801636 	bltu	r3,r6,809ef4 <_calloc_r+0x8c>
  809e9c:	008004c4 	movi	r2,19
  809ea0:	11800b2e 	bgeu	r2,r6,809ed0 <_calloc_r+0x68>
  809ea4:	80000015 	stw	zero,0(r16)
  809ea8:	80000115 	stw	zero,4(r16)
  809eac:	008006c4 	movi	r2,27
  809eb0:	11801a2e 	bgeu	r2,r6,809f1c <_calloc_r+0xb4>
  809eb4:	80000215 	stw	zero,8(r16)
  809eb8:	80000315 	stw	zero,12(r16)
  809ebc:	30c0151e 	bne	r6,r3,809f14 <_calloc_r+0xac>
  809ec0:	80000415 	stw	zero,16(r16)
  809ec4:	80800604 	addi	r2,r16,24
  809ec8:	80000515 	stw	zero,20(r16)
  809ecc:	00000106 	br	809ed4 <_calloc_r+0x6c>
  809ed0:	8005883a 	mov	r2,r16
  809ed4:	10000015 	stw	zero,0(r2)
  809ed8:	10000115 	stw	zero,4(r2)
  809edc:	10000215 	stw	zero,8(r2)
  809ee0:	8005883a 	mov	r2,r16
  809ee4:	dfc00117 	ldw	ra,4(sp)
  809ee8:	dc000017 	ldw	r16,0(sp)
  809eec:	dec00204 	addi	sp,sp,8
  809ef0:	f800283a 	ret
  809ef4:	000b883a 	mov	r5,zero
  809ef8:	8009883a 	mov	r4,r16
  809efc:	08016b80 	call	8016b8 <memset>
  809f00:	8005883a 	mov	r2,r16
  809f04:	dfc00117 	ldw	ra,4(sp)
  809f08:	dc000017 	ldw	r16,0(sp)
  809f0c:	dec00204 	addi	sp,sp,8
  809f10:	f800283a 	ret
  809f14:	80800404 	addi	r2,r16,16
  809f18:	003fee06 	br	809ed4 <__alt_mem_onchip_mem+0xff801ed4>
  809f1c:	80800204 	addi	r2,r16,8
  809f20:	003fec06 	br	809ed4 <__alt_mem_onchip_mem+0xff801ed4>
  809f24:	0005883a 	mov	r2,zero
  809f28:	003fee06 	br	809ee4 <__alt_mem_onchip_mem+0xff801ee4>

00809f2c <_fclose_r>:
  809f2c:	28003926 	beq	r5,zero,80a014 <_fclose_r+0xe8>
  809f30:	defffc04 	addi	sp,sp,-16
  809f34:	dc400115 	stw	r17,4(sp)
  809f38:	dc000015 	stw	r16,0(sp)
  809f3c:	dfc00315 	stw	ra,12(sp)
  809f40:	dc800215 	stw	r18,8(sp)
  809f44:	2023883a 	mov	r17,r4
  809f48:	2821883a 	mov	r16,r5
  809f4c:	20000226 	beq	r4,zero,809f58 <_fclose_r+0x2c>
  809f50:	20800e17 	ldw	r2,56(r4)
  809f54:	10002726 	beq	r2,zero,809ff4 <_fclose_r+0xc8>
  809f58:	8080030f 	ldh	r2,12(r16)
  809f5c:	1000071e 	bne	r2,zero,809f7c <_fclose_r+0x50>
  809f60:	0005883a 	mov	r2,zero
  809f64:	dfc00317 	ldw	ra,12(sp)
  809f68:	dc800217 	ldw	r18,8(sp)
  809f6c:	dc400117 	ldw	r17,4(sp)
  809f70:	dc000017 	ldw	r16,0(sp)
  809f74:	dec00404 	addi	sp,sp,16
  809f78:	f800283a 	ret
  809f7c:	800b883a 	mov	r5,r16
  809f80:	8809883a 	mov	r4,r17
  809f84:	0805a8c0 	call	805a8c <__sflush_r>
  809f88:	1025883a 	mov	r18,r2
  809f8c:	80800b17 	ldw	r2,44(r16)
  809f90:	10000426 	beq	r2,zero,809fa4 <_fclose_r+0x78>
  809f94:	81400717 	ldw	r5,28(r16)
  809f98:	8809883a 	mov	r4,r17
  809f9c:	103ee83a 	callr	r2
  809fa0:	10001616 	blt	r2,zero,809ffc <_fclose_r+0xd0>
  809fa4:	8080030b 	ldhu	r2,12(r16)
  809fa8:	1080200c 	andi	r2,r2,128
  809fac:	1000151e 	bne	r2,zero,80a004 <_fclose_r+0xd8>
  809fb0:	81400c17 	ldw	r5,48(r16)
  809fb4:	28000526 	beq	r5,zero,809fcc <_fclose_r+0xa0>
  809fb8:	80801004 	addi	r2,r16,64
  809fbc:	28800226 	beq	r5,r2,809fc8 <_fclose_r+0x9c>
  809fc0:	8809883a 	mov	r4,r17
  809fc4:	08062a40 	call	8062a4 <_free_r>
  809fc8:	80000c15 	stw	zero,48(r16)
  809fcc:	81401117 	ldw	r5,68(r16)
  809fd0:	28000326 	beq	r5,zero,809fe0 <_fclose_r+0xb4>
  809fd4:	8809883a 	mov	r4,r17
  809fd8:	08062a40 	call	8062a4 <_free_r>
  809fdc:	80001115 	stw	zero,68(r16)
  809fe0:	08060940 	call	806094 <__sfp_lock_acquire>
  809fe4:	8000030d 	sth	zero,12(r16)
  809fe8:	08060980 	call	806098 <__sfp_lock_release>
  809fec:	9005883a 	mov	r2,r18
  809ff0:	003fdc06 	br	809f64 <__alt_mem_onchip_mem+0xff801f64>
  809ff4:	08060840 	call	806084 <__sinit>
  809ff8:	003fd706 	br	809f58 <__alt_mem_onchip_mem+0xff801f58>
  809ffc:	04bfffc4 	movi	r18,-1
  80a000:	003fe806 	br	809fa4 <__alt_mem_onchip_mem+0xff801fa4>
  80a004:	81400417 	ldw	r5,16(r16)
  80a008:	8809883a 	mov	r4,r17
  80a00c:	08062a40 	call	8062a4 <_free_r>
  80a010:	003fe706 	br	809fb0 <__alt_mem_onchip_mem+0xff801fb0>
  80a014:	0005883a 	mov	r2,zero
  80a018:	f800283a 	ret

0080a01c <fclose>:
  80a01c:	00802074 	movhi	r2,129
  80a020:	108f4904 	addi	r2,r2,15652
  80a024:	200b883a 	mov	r5,r4
  80a028:	11000017 	ldw	r4,0(r2)
  80a02c:	0809f2c1 	jmpi	809f2c <_fclose_r>

0080a030 <__fputwc>:
  80a030:	defff804 	addi	sp,sp,-32
  80a034:	dcc00415 	stw	r19,16(sp)
  80a038:	dc800315 	stw	r18,12(sp)
  80a03c:	dc000115 	stw	r16,4(sp)
  80a040:	dfc00715 	stw	ra,28(sp)
  80a044:	dd400615 	stw	r21,24(sp)
  80a048:	dd000515 	stw	r20,20(sp)
  80a04c:	dc400215 	stw	r17,8(sp)
  80a050:	2027883a 	mov	r19,r4
  80a054:	2825883a 	mov	r18,r5
  80a058:	3021883a 	mov	r16,r6
  80a05c:	0806cd40 	call	806cd4 <__locale_mb_cur_max>
  80a060:	00c00044 	movi	r3,1
  80a064:	10c03e26 	beq	r2,r3,80a160 <__fputwc+0x130>
  80a068:	81c01704 	addi	r7,r16,92
  80a06c:	900d883a 	mov	r6,r18
  80a070:	d80b883a 	mov	r5,sp
  80a074:	9809883a 	mov	r4,r19
  80a078:	080a3900 	call	80a390 <_wcrtomb_r>
  80a07c:	1029883a 	mov	r20,r2
  80a080:	00bfffc4 	movi	r2,-1
  80a084:	a0802026 	beq	r20,r2,80a108 <__fputwc+0xd8>
  80a088:	d9400003 	ldbu	r5,0(sp)
  80a08c:	a0001c26 	beq	r20,zero,80a100 <__fputwc+0xd0>
  80a090:	0023883a 	mov	r17,zero
  80a094:	05400284 	movi	r21,10
  80a098:	00000906 	br	80a0c0 <__fputwc+0x90>
  80a09c:	80800017 	ldw	r2,0(r16)
  80a0a0:	11400005 	stb	r5,0(r2)
  80a0a4:	80c00017 	ldw	r3,0(r16)
  80a0a8:	18c00044 	addi	r3,r3,1
  80a0ac:	80c00015 	stw	r3,0(r16)
  80a0b0:	8c400044 	addi	r17,r17,1
  80a0b4:	dc45883a 	add	r2,sp,r17
  80a0b8:	8d00112e 	bgeu	r17,r20,80a100 <__fputwc+0xd0>
  80a0bc:	11400003 	ldbu	r5,0(r2)
  80a0c0:	80c00217 	ldw	r3,8(r16)
  80a0c4:	18ffffc4 	addi	r3,r3,-1
  80a0c8:	80c00215 	stw	r3,8(r16)
  80a0cc:	183ff30e 	bge	r3,zero,80a09c <__alt_mem_onchip_mem+0xff80209c>
  80a0d0:	80800617 	ldw	r2,24(r16)
  80a0d4:	18801916 	blt	r3,r2,80a13c <__fputwc+0x10c>
  80a0d8:	80800017 	ldw	r2,0(r16)
  80a0dc:	11400005 	stb	r5,0(r2)
  80a0e0:	80800017 	ldw	r2,0(r16)
  80a0e4:	10c00003 	ldbu	r3,0(r2)
  80a0e8:	10800044 	addi	r2,r2,1
  80a0ec:	1d402326 	beq	r3,r21,80a17c <__fputwc+0x14c>
  80a0f0:	80800015 	stw	r2,0(r16)
  80a0f4:	8c400044 	addi	r17,r17,1
  80a0f8:	dc45883a 	add	r2,sp,r17
  80a0fc:	8d3fef36 	bltu	r17,r20,80a0bc <__alt_mem_onchip_mem+0xff8020bc>
  80a100:	9005883a 	mov	r2,r18
  80a104:	00000406 	br	80a118 <__fputwc+0xe8>
  80a108:	80c0030b 	ldhu	r3,12(r16)
  80a10c:	a005883a 	mov	r2,r20
  80a110:	18c01014 	ori	r3,r3,64
  80a114:	80c0030d 	sth	r3,12(r16)
  80a118:	dfc00717 	ldw	ra,28(sp)
  80a11c:	dd400617 	ldw	r21,24(sp)
  80a120:	dd000517 	ldw	r20,20(sp)
  80a124:	dcc00417 	ldw	r19,16(sp)
  80a128:	dc800317 	ldw	r18,12(sp)
  80a12c:	dc400217 	ldw	r17,8(sp)
  80a130:	dc000117 	ldw	r16,4(sp)
  80a134:	dec00804 	addi	sp,sp,32
  80a138:	f800283a 	ret
  80a13c:	800d883a 	mov	r6,r16
  80a140:	29403fcc 	andi	r5,r5,255
  80a144:	9809883a 	mov	r4,r19
  80a148:	080a2380 	call	80a238 <__swbuf_r>
  80a14c:	10bfffe0 	cmpeqi	r2,r2,-1
  80a150:	10803fcc 	andi	r2,r2,255
  80a154:	103fd626 	beq	r2,zero,80a0b0 <__alt_mem_onchip_mem+0xff8020b0>
  80a158:	00bfffc4 	movi	r2,-1
  80a15c:	003fee06 	br	80a118 <__alt_mem_onchip_mem+0xff802118>
  80a160:	90ffffc4 	addi	r3,r18,-1
  80a164:	01003f84 	movi	r4,254
  80a168:	20ffbf36 	bltu	r4,r3,80a068 <__alt_mem_onchip_mem+0xff802068>
  80a16c:	900b883a 	mov	r5,r18
  80a170:	dc800005 	stb	r18,0(sp)
  80a174:	1029883a 	mov	r20,r2
  80a178:	003fc506 	br	80a090 <__alt_mem_onchip_mem+0xff802090>
  80a17c:	800d883a 	mov	r6,r16
  80a180:	a80b883a 	mov	r5,r21
  80a184:	9809883a 	mov	r4,r19
  80a188:	080a2380 	call	80a238 <__swbuf_r>
  80a18c:	10bfffe0 	cmpeqi	r2,r2,-1
  80a190:	003fef06 	br	80a150 <__alt_mem_onchip_mem+0xff802150>

0080a194 <_fputwc_r>:
  80a194:	3080030b 	ldhu	r2,12(r6)
  80a198:	10c8000c 	andi	r3,r2,8192
  80a19c:	1800051e 	bne	r3,zero,80a1b4 <_fputwc_r+0x20>
  80a1a0:	30c01917 	ldw	r3,100(r6)
  80a1a4:	10880014 	ori	r2,r2,8192
  80a1a8:	3080030d 	sth	r2,12(r6)
  80a1ac:	18880014 	ori	r2,r3,8192
  80a1b0:	30801915 	stw	r2,100(r6)
  80a1b4:	080a0301 	jmpi	80a030 <__fputwc>

0080a1b8 <fputwc>:
  80a1b8:	00802074 	movhi	r2,129
  80a1bc:	defffc04 	addi	sp,sp,-16
  80a1c0:	108f4904 	addi	r2,r2,15652
  80a1c4:	dc000115 	stw	r16,4(sp)
  80a1c8:	14000017 	ldw	r16,0(r2)
  80a1cc:	dc400215 	stw	r17,8(sp)
  80a1d0:	dfc00315 	stw	ra,12(sp)
  80a1d4:	2023883a 	mov	r17,r4
  80a1d8:	80000226 	beq	r16,zero,80a1e4 <fputwc+0x2c>
  80a1dc:	80800e17 	ldw	r2,56(r16)
  80a1e0:	10001026 	beq	r2,zero,80a224 <fputwc+0x6c>
  80a1e4:	2880030b 	ldhu	r2,12(r5)
  80a1e8:	10c8000c 	andi	r3,r2,8192
  80a1ec:	1800051e 	bne	r3,zero,80a204 <fputwc+0x4c>
  80a1f0:	28c01917 	ldw	r3,100(r5)
  80a1f4:	10880014 	ori	r2,r2,8192
  80a1f8:	2880030d 	sth	r2,12(r5)
  80a1fc:	18880014 	ori	r2,r3,8192
  80a200:	28801915 	stw	r2,100(r5)
  80a204:	280d883a 	mov	r6,r5
  80a208:	8009883a 	mov	r4,r16
  80a20c:	880b883a 	mov	r5,r17
  80a210:	dfc00317 	ldw	ra,12(sp)
  80a214:	dc400217 	ldw	r17,8(sp)
  80a218:	dc000117 	ldw	r16,4(sp)
  80a21c:	dec00404 	addi	sp,sp,16
  80a220:	080a0301 	jmpi	80a030 <__fputwc>
  80a224:	8009883a 	mov	r4,r16
  80a228:	d9400015 	stw	r5,0(sp)
  80a22c:	08060840 	call	806084 <__sinit>
  80a230:	d9400017 	ldw	r5,0(sp)
  80a234:	003feb06 	br	80a1e4 <__alt_mem_onchip_mem+0xff8021e4>

0080a238 <__swbuf_r>:
  80a238:	defffb04 	addi	sp,sp,-20
  80a23c:	dcc00315 	stw	r19,12(sp)
  80a240:	dc800215 	stw	r18,8(sp)
  80a244:	dc000015 	stw	r16,0(sp)
  80a248:	dfc00415 	stw	ra,16(sp)
  80a24c:	dc400115 	stw	r17,4(sp)
  80a250:	2025883a 	mov	r18,r4
  80a254:	2827883a 	mov	r19,r5
  80a258:	3021883a 	mov	r16,r6
  80a25c:	20000226 	beq	r4,zero,80a268 <__swbuf_r+0x30>
  80a260:	20800e17 	ldw	r2,56(r4)
  80a264:	10004226 	beq	r2,zero,80a370 <__swbuf_r+0x138>
  80a268:	80800617 	ldw	r2,24(r16)
  80a26c:	8100030b 	ldhu	r4,12(r16)
  80a270:	80800215 	stw	r2,8(r16)
  80a274:	2080020c 	andi	r2,r4,8
  80a278:	10003626 	beq	r2,zero,80a354 <__swbuf_r+0x11c>
  80a27c:	80c00417 	ldw	r3,16(r16)
  80a280:	18003426 	beq	r3,zero,80a354 <__swbuf_r+0x11c>
  80a284:	2088000c 	andi	r2,r4,8192
  80a288:	9c403fcc 	andi	r17,r19,255
  80a28c:	10001a26 	beq	r2,zero,80a2f8 <__swbuf_r+0xc0>
  80a290:	80800017 	ldw	r2,0(r16)
  80a294:	81000517 	ldw	r4,20(r16)
  80a298:	10c7c83a 	sub	r3,r2,r3
  80a29c:	1900200e 	bge	r3,r4,80a320 <__swbuf_r+0xe8>
  80a2a0:	18c00044 	addi	r3,r3,1
  80a2a4:	81000217 	ldw	r4,8(r16)
  80a2a8:	11400044 	addi	r5,r2,1
  80a2ac:	81400015 	stw	r5,0(r16)
  80a2b0:	213fffc4 	addi	r4,r4,-1
  80a2b4:	81000215 	stw	r4,8(r16)
  80a2b8:	14c00005 	stb	r19,0(r2)
  80a2bc:	80800517 	ldw	r2,20(r16)
  80a2c0:	10c01e26 	beq	r2,r3,80a33c <__swbuf_r+0x104>
  80a2c4:	8080030b 	ldhu	r2,12(r16)
  80a2c8:	1080004c 	andi	r2,r2,1
  80a2cc:	10000226 	beq	r2,zero,80a2d8 <__swbuf_r+0xa0>
  80a2d0:	00800284 	movi	r2,10
  80a2d4:	88801926 	beq	r17,r2,80a33c <__swbuf_r+0x104>
  80a2d8:	8805883a 	mov	r2,r17
  80a2dc:	dfc00417 	ldw	ra,16(sp)
  80a2e0:	dcc00317 	ldw	r19,12(sp)
  80a2e4:	dc800217 	ldw	r18,8(sp)
  80a2e8:	dc400117 	ldw	r17,4(sp)
  80a2ec:	dc000017 	ldw	r16,0(sp)
  80a2f0:	dec00504 	addi	sp,sp,20
  80a2f4:	f800283a 	ret
  80a2f8:	81401917 	ldw	r5,100(r16)
  80a2fc:	00b7ffc4 	movi	r2,-8193
  80a300:	21080014 	ori	r4,r4,8192
  80a304:	2884703a 	and	r2,r5,r2
  80a308:	80801915 	stw	r2,100(r16)
  80a30c:	80800017 	ldw	r2,0(r16)
  80a310:	8100030d 	sth	r4,12(r16)
  80a314:	81000517 	ldw	r4,20(r16)
  80a318:	10c7c83a 	sub	r3,r2,r3
  80a31c:	193fe016 	blt	r3,r4,80a2a0 <__alt_mem_onchip_mem+0xff8022a0>
  80a320:	800b883a 	mov	r5,r16
  80a324:	9009883a 	mov	r4,r18
  80a328:	0805ca80 	call	805ca8 <_fflush_r>
  80a32c:	1000071e 	bne	r2,zero,80a34c <__swbuf_r+0x114>
  80a330:	80800017 	ldw	r2,0(r16)
  80a334:	00c00044 	movi	r3,1
  80a338:	003fda06 	br	80a2a4 <__alt_mem_onchip_mem+0xff8022a4>
  80a33c:	800b883a 	mov	r5,r16
  80a340:	9009883a 	mov	r4,r18
  80a344:	0805ca80 	call	805ca8 <_fflush_r>
  80a348:	103fe326 	beq	r2,zero,80a2d8 <__alt_mem_onchip_mem+0xff8022d8>
  80a34c:	00bfffc4 	movi	r2,-1
  80a350:	003fe206 	br	80a2dc <__alt_mem_onchip_mem+0xff8022dc>
  80a354:	800b883a 	mov	r5,r16
  80a358:	9009883a 	mov	r4,r18
  80a35c:	080405c0 	call	80405c <__swsetup_r>
  80a360:	103ffa1e 	bne	r2,zero,80a34c <__alt_mem_onchip_mem+0xff80234c>
  80a364:	8100030b 	ldhu	r4,12(r16)
  80a368:	80c00417 	ldw	r3,16(r16)
  80a36c:	003fc506 	br	80a284 <__alt_mem_onchip_mem+0xff802284>
  80a370:	08060840 	call	806084 <__sinit>
  80a374:	003fbc06 	br	80a268 <__alt_mem_onchip_mem+0xff802268>

0080a378 <__swbuf>:
  80a378:	00802074 	movhi	r2,129
  80a37c:	108f4904 	addi	r2,r2,15652
  80a380:	280d883a 	mov	r6,r5
  80a384:	200b883a 	mov	r5,r4
  80a388:	11000017 	ldw	r4,0(r2)
  80a38c:	080a2381 	jmpi	80a238 <__swbuf_r>

0080a390 <_wcrtomb_r>:
  80a390:	defff604 	addi	sp,sp,-40
  80a394:	00802074 	movhi	r2,129
  80a398:	dc800815 	stw	r18,32(sp)
  80a39c:	dc400715 	stw	r17,28(sp)
  80a3a0:	dc000615 	stw	r16,24(sp)
  80a3a4:	108f4d04 	addi	r2,r2,15668
  80a3a8:	dfc00915 	stw	ra,36(sp)
  80a3ac:	2021883a 	mov	r16,r4
  80a3b0:	3823883a 	mov	r17,r7
  80a3b4:	14800017 	ldw	r18,0(r2)
  80a3b8:	28001426 	beq	r5,zero,80a40c <_wcrtomb_r+0x7c>
  80a3bc:	d9400415 	stw	r5,16(sp)
  80a3c0:	d9800515 	stw	r6,20(sp)
  80a3c4:	0806cc80 	call	806cc8 <__locale_charset>
  80a3c8:	d9800517 	ldw	r6,20(sp)
  80a3cc:	d9400417 	ldw	r5,16(sp)
  80a3d0:	100f883a 	mov	r7,r2
  80a3d4:	dc400015 	stw	r17,0(sp)
  80a3d8:	8009883a 	mov	r4,r16
  80a3dc:	903ee83a 	callr	r18
  80a3e0:	00ffffc4 	movi	r3,-1
  80a3e4:	10c0031e 	bne	r2,r3,80a3f4 <_wcrtomb_r+0x64>
  80a3e8:	88000015 	stw	zero,0(r17)
  80a3ec:	00c02284 	movi	r3,138
  80a3f0:	80c00015 	stw	r3,0(r16)
  80a3f4:	dfc00917 	ldw	ra,36(sp)
  80a3f8:	dc800817 	ldw	r18,32(sp)
  80a3fc:	dc400717 	ldw	r17,28(sp)
  80a400:	dc000617 	ldw	r16,24(sp)
  80a404:	dec00a04 	addi	sp,sp,40
  80a408:	f800283a 	ret
  80a40c:	0806cc80 	call	806cc8 <__locale_charset>
  80a410:	100f883a 	mov	r7,r2
  80a414:	dc400015 	stw	r17,0(sp)
  80a418:	000d883a 	mov	r6,zero
  80a41c:	d9400104 	addi	r5,sp,4
  80a420:	8009883a 	mov	r4,r16
  80a424:	903ee83a 	callr	r18
  80a428:	003fed06 	br	80a3e0 <__alt_mem_onchip_mem+0xff8023e0>

0080a42c <wcrtomb>:
  80a42c:	defff604 	addi	sp,sp,-40
  80a430:	00802074 	movhi	r2,129
  80a434:	dc800615 	stw	r18,24(sp)
  80a438:	dc400515 	stw	r17,20(sp)
  80a43c:	108f4904 	addi	r2,r2,15652
  80a440:	dfc00915 	stw	ra,36(sp)
  80a444:	dd000815 	stw	r20,32(sp)
  80a448:	dcc00715 	stw	r19,28(sp)
  80a44c:	dc000415 	stw	r16,16(sp)
  80a450:	3025883a 	mov	r18,r6
  80a454:	14400017 	ldw	r17,0(r2)
  80a458:	20001926 	beq	r4,zero,80a4c0 <wcrtomb+0x94>
  80a45c:	00802074 	movhi	r2,129
  80a460:	108f4d04 	addi	r2,r2,15668
  80a464:	15000017 	ldw	r20,0(r2)
  80a468:	2021883a 	mov	r16,r4
  80a46c:	2827883a 	mov	r19,r5
  80a470:	0806cc80 	call	806cc8 <__locale_charset>
  80a474:	100f883a 	mov	r7,r2
  80a478:	dc800015 	stw	r18,0(sp)
  80a47c:	980d883a 	mov	r6,r19
  80a480:	800b883a 	mov	r5,r16
  80a484:	8809883a 	mov	r4,r17
  80a488:	a03ee83a 	callr	r20
  80a48c:	00ffffc4 	movi	r3,-1
  80a490:	10c0031e 	bne	r2,r3,80a4a0 <wcrtomb+0x74>
  80a494:	90000015 	stw	zero,0(r18)
  80a498:	00c02284 	movi	r3,138
  80a49c:	88c00015 	stw	r3,0(r17)
  80a4a0:	dfc00917 	ldw	ra,36(sp)
  80a4a4:	dd000817 	ldw	r20,32(sp)
  80a4a8:	dcc00717 	ldw	r19,28(sp)
  80a4ac:	dc800617 	ldw	r18,24(sp)
  80a4b0:	dc400517 	ldw	r17,20(sp)
  80a4b4:	dc000417 	ldw	r16,16(sp)
  80a4b8:	dec00a04 	addi	sp,sp,40
  80a4bc:	f800283a 	ret
  80a4c0:	00802074 	movhi	r2,129
  80a4c4:	108f4d04 	addi	r2,r2,15668
  80a4c8:	14000017 	ldw	r16,0(r2)
  80a4cc:	0806cc80 	call	806cc8 <__locale_charset>
  80a4d0:	100f883a 	mov	r7,r2
  80a4d4:	dc800015 	stw	r18,0(sp)
  80a4d8:	000d883a 	mov	r6,zero
  80a4dc:	d9400104 	addi	r5,sp,4
  80a4e0:	8809883a 	mov	r4,r17
  80a4e4:	803ee83a 	callr	r16
  80a4e8:	003fe806 	br	80a48c <__alt_mem_onchip_mem+0xff80248c>

0080a4ec <__ascii_wctomb>:
  80a4ec:	28000526 	beq	r5,zero,80a504 <__ascii_wctomb+0x18>
  80a4f0:	00803fc4 	movi	r2,255
  80a4f4:	11800536 	bltu	r2,r6,80a50c <__ascii_wctomb+0x20>
  80a4f8:	29800005 	stb	r6,0(r5)
  80a4fc:	00800044 	movi	r2,1
  80a500:	f800283a 	ret
  80a504:	0005883a 	mov	r2,zero
  80a508:	f800283a 	ret
  80a50c:	00802284 	movi	r2,138
  80a510:	20800015 	stw	r2,0(r4)
  80a514:	00bfffc4 	movi	r2,-1
  80a518:	f800283a 	ret

0080a51c <_wctomb_r>:
  80a51c:	00802074 	movhi	r2,129
  80a520:	defff904 	addi	sp,sp,-28
  80a524:	108f4d04 	addi	r2,r2,15668
  80a528:	dfc00615 	stw	ra,24(sp)
  80a52c:	dc400515 	stw	r17,20(sp)
  80a530:	dc000415 	stw	r16,16(sp)
  80a534:	3823883a 	mov	r17,r7
  80a538:	14000017 	ldw	r16,0(r2)
  80a53c:	d9000115 	stw	r4,4(sp)
  80a540:	d9400215 	stw	r5,8(sp)
  80a544:	d9800315 	stw	r6,12(sp)
  80a548:	0806cc80 	call	806cc8 <__locale_charset>
  80a54c:	d9800317 	ldw	r6,12(sp)
  80a550:	d9400217 	ldw	r5,8(sp)
  80a554:	d9000117 	ldw	r4,4(sp)
  80a558:	100f883a 	mov	r7,r2
  80a55c:	dc400015 	stw	r17,0(sp)
  80a560:	803ee83a 	callr	r16
  80a564:	dfc00617 	ldw	ra,24(sp)
  80a568:	dc400517 	ldw	r17,20(sp)
  80a56c:	dc000417 	ldw	r16,16(sp)
  80a570:	dec00704 	addi	sp,sp,28
  80a574:	f800283a 	ret

0080a578 <__udivdi3>:
  80a578:	defff504 	addi	sp,sp,-44
  80a57c:	dcc00415 	stw	r19,16(sp)
  80a580:	dc000115 	stw	r16,4(sp)
  80a584:	dfc00a15 	stw	ra,40(sp)
  80a588:	df000915 	stw	fp,36(sp)
  80a58c:	ddc00815 	stw	r23,32(sp)
  80a590:	dd800715 	stw	r22,28(sp)
  80a594:	dd400615 	stw	r21,24(sp)
  80a598:	dd000515 	stw	r20,20(sp)
  80a59c:	dc800315 	stw	r18,12(sp)
  80a5a0:	dc400215 	stw	r17,8(sp)
  80a5a4:	2027883a 	mov	r19,r4
  80a5a8:	2821883a 	mov	r16,r5
  80a5ac:	3800411e 	bne	r7,zero,80a6b4 <__udivdi3+0x13c>
  80a5b0:	3023883a 	mov	r17,r6
  80a5b4:	2025883a 	mov	r18,r4
  80a5b8:	2980522e 	bgeu	r5,r6,80a704 <__udivdi3+0x18c>
  80a5bc:	00bfffd4 	movui	r2,65535
  80a5c0:	282d883a 	mov	r22,r5
  80a5c4:	1180a836 	bltu	r2,r6,80a868 <__udivdi3+0x2f0>
  80a5c8:	00803fc4 	movi	r2,255
  80a5cc:	1185803a 	cmpltu	r2,r2,r6
  80a5d0:	100490fa 	slli	r2,r2,3
  80a5d4:	3086d83a 	srl	r3,r6,r2
  80a5d8:	01002074 	movhi	r4,129
  80a5dc:	21071b04 	addi	r4,r4,7276
  80a5e0:	20c7883a 	add	r3,r4,r3
  80a5e4:	18c00003 	ldbu	r3,0(r3)
  80a5e8:	1885883a 	add	r2,r3,r2
  80a5ec:	00c00804 	movi	r3,32
  80a5f0:	1887c83a 	sub	r3,r3,r2
  80a5f4:	18000526 	beq	r3,zero,80a60c <__udivdi3+0x94>
  80a5f8:	80e0983a 	sll	r16,r16,r3
  80a5fc:	9884d83a 	srl	r2,r19,r2
  80a600:	30e2983a 	sll	r17,r6,r3
  80a604:	98e4983a 	sll	r18,r19,r3
  80a608:	142cb03a 	or	r22,r2,r16
  80a60c:	882ad43a 	srli	r21,r17,16
  80a610:	b009883a 	mov	r4,r22
  80a614:	8d3fffcc 	andi	r20,r17,65535
  80a618:	a80b883a 	mov	r5,r21
  80a61c:	080b1840 	call	80b184 <__umodsi3>
  80a620:	b009883a 	mov	r4,r22
  80a624:	a80b883a 	mov	r5,r21
  80a628:	1027883a 	mov	r19,r2
  80a62c:	080b1200 	call	80b120 <__udivsi3>
  80a630:	102d883a 	mov	r22,r2
  80a634:	9826943a 	slli	r19,r19,16
  80a638:	9004d43a 	srli	r2,r18,16
  80a63c:	a5a1383a 	mul	r16,r20,r22
  80a640:	14c4b03a 	or	r2,r2,r19
  80a644:	1400052e 	bgeu	r2,r16,80a65c <__udivdi3+0xe4>
  80a648:	1445883a 	add	r2,r2,r17
  80a64c:	b0ffffc4 	addi	r3,r22,-1
  80a650:	14400136 	bltu	r2,r17,80a658 <__udivdi3+0xe0>
  80a654:	14012336 	bltu	r2,r16,80aae4 <__udivdi3+0x56c>
  80a658:	182d883a 	mov	r22,r3
  80a65c:	1421c83a 	sub	r16,r2,r16
  80a660:	a80b883a 	mov	r5,r21
  80a664:	8009883a 	mov	r4,r16
  80a668:	080b1840 	call	80b184 <__umodsi3>
  80a66c:	1027883a 	mov	r19,r2
  80a670:	a80b883a 	mov	r5,r21
  80a674:	8009883a 	mov	r4,r16
  80a678:	080b1200 	call	80b120 <__udivsi3>
  80a67c:	9826943a 	slli	r19,r19,16
  80a680:	a0a9383a 	mul	r20,r20,r2
  80a684:	94bfffcc 	andi	r18,r18,65535
  80a688:	94e4b03a 	or	r18,r18,r19
  80a68c:	9500052e 	bgeu	r18,r20,80a6a4 <__udivdi3+0x12c>
  80a690:	8ca5883a 	add	r18,r17,r18
  80a694:	10ffffc4 	addi	r3,r2,-1
  80a698:	9440f136 	bltu	r18,r17,80aa60 <__udivdi3+0x4e8>
  80a69c:	9500f02e 	bgeu	r18,r20,80aa60 <__udivdi3+0x4e8>
  80a6a0:	10bfff84 	addi	r2,r2,-2
  80a6a4:	b00c943a 	slli	r6,r22,16
  80a6a8:	0007883a 	mov	r3,zero
  80a6ac:	3084b03a 	or	r2,r6,r2
  80a6b0:	00005906 	br	80a818 <__udivdi3+0x2a0>
  80a6b4:	29c05636 	bltu	r5,r7,80a810 <__udivdi3+0x298>
  80a6b8:	00bfffd4 	movui	r2,65535
  80a6bc:	11c0622e 	bgeu	r2,r7,80a848 <__udivdi3+0x2d0>
  80a6c0:	00804034 	movhi	r2,256
  80a6c4:	10bfffc4 	addi	r2,r2,-1
  80a6c8:	11c0ee36 	bltu	r2,r7,80aa84 <__udivdi3+0x50c>
  80a6cc:	00800404 	movi	r2,16
  80a6d0:	3886d83a 	srl	r3,r7,r2
  80a6d4:	01002074 	movhi	r4,129
  80a6d8:	21071b04 	addi	r4,r4,7276
  80a6dc:	20c7883a 	add	r3,r4,r3
  80a6e0:	18c00003 	ldbu	r3,0(r3)
  80a6e4:	05400804 	movi	r21,32
  80a6e8:	1885883a 	add	r2,r3,r2
  80a6ec:	a8abc83a 	sub	r21,r21,r2
  80a6f0:	a800621e 	bne	r21,zero,80a87c <__udivdi3+0x304>
  80a6f4:	3c00e936 	bltu	r7,r16,80aa9c <__udivdi3+0x524>
  80a6f8:	9985403a 	cmpgeu	r2,r19,r6
  80a6fc:	0007883a 	mov	r3,zero
  80a700:	00004506 	br	80a818 <__udivdi3+0x2a0>
  80a704:	3000041e 	bne	r6,zero,80a718 <__udivdi3+0x1a0>
  80a708:	000b883a 	mov	r5,zero
  80a70c:	01000044 	movi	r4,1
  80a710:	080b1200 	call	80b120 <__udivsi3>
  80a714:	1023883a 	mov	r17,r2
  80a718:	00bfffd4 	movui	r2,65535
  80a71c:	14404e2e 	bgeu	r2,r17,80a858 <__udivdi3+0x2e0>
  80a720:	00804034 	movhi	r2,256
  80a724:	10bfffc4 	addi	r2,r2,-1
  80a728:	1440d836 	bltu	r2,r17,80aa8c <__udivdi3+0x514>
  80a72c:	00800404 	movi	r2,16
  80a730:	8886d83a 	srl	r3,r17,r2
  80a734:	01002074 	movhi	r4,129
  80a738:	21071b04 	addi	r4,r4,7276
  80a73c:	20c7883a 	add	r3,r4,r3
  80a740:	18c00003 	ldbu	r3,0(r3)
  80a744:	1885883a 	add	r2,r3,r2
  80a748:	00c00804 	movi	r3,32
  80a74c:	1887c83a 	sub	r3,r3,r2
  80a750:	18008f1e 	bne	r3,zero,80a990 <__udivdi3+0x418>
  80a754:	882ad43a 	srli	r21,r17,16
  80a758:	8461c83a 	sub	r16,r16,r17
  80a75c:	8d3fffcc 	andi	r20,r17,65535
  80a760:	00c00044 	movi	r3,1
  80a764:	8009883a 	mov	r4,r16
  80a768:	a80b883a 	mov	r5,r21
  80a76c:	d8c00015 	stw	r3,0(sp)
  80a770:	080b1840 	call	80b184 <__umodsi3>
  80a774:	8009883a 	mov	r4,r16
  80a778:	a80b883a 	mov	r5,r21
  80a77c:	1027883a 	mov	r19,r2
  80a780:	080b1200 	call	80b120 <__udivsi3>
  80a784:	9826943a 	slli	r19,r19,16
  80a788:	9008d43a 	srli	r4,r18,16
  80a78c:	1521383a 	mul	r16,r2,r20
  80a790:	102d883a 	mov	r22,r2
  80a794:	24c8b03a 	or	r4,r4,r19
  80a798:	d8c00017 	ldw	r3,0(sp)
  80a79c:	2400052e 	bgeu	r4,r16,80a7b4 <__udivdi3+0x23c>
  80a7a0:	2449883a 	add	r4,r4,r17
  80a7a4:	b0bfffc4 	addi	r2,r22,-1
  80a7a8:	24400136 	bltu	r4,r17,80a7b0 <__udivdi3+0x238>
  80a7ac:	2400ca36 	bltu	r4,r16,80aad8 <__udivdi3+0x560>
  80a7b0:	102d883a 	mov	r22,r2
  80a7b4:	2421c83a 	sub	r16,r4,r16
  80a7b8:	a80b883a 	mov	r5,r21
  80a7bc:	8009883a 	mov	r4,r16
  80a7c0:	d8c00015 	stw	r3,0(sp)
  80a7c4:	080b1840 	call	80b184 <__umodsi3>
  80a7c8:	1027883a 	mov	r19,r2
  80a7cc:	a80b883a 	mov	r5,r21
  80a7d0:	8009883a 	mov	r4,r16
  80a7d4:	080b1200 	call	80b120 <__udivsi3>
  80a7d8:	9826943a 	slli	r19,r19,16
  80a7dc:	1529383a 	mul	r20,r2,r20
  80a7e0:	94bfffcc 	andi	r18,r18,65535
  80a7e4:	94e4b03a 	or	r18,r18,r19
  80a7e8:	d8c00017 	ldw	r3,0(sp)
  80a7ec:	9500052e 	bgeu	r18,r20,80a804 <__udivdi3+0x28c>
  80a7f0:	8ca5883a 	add	r18,r17,r18
  80a7f4:	113fffc4 	addi	r4,r2,-1
  80a7f8:	94409736 	bltu	r18,r17,80aa58 <__udivdi3+0x4e0>
  80a7fc:	9500962e 	bgeu	r18,r20,80aa58 <__udivdi3+0x4e0>
  80a800:	10bfff84 	addi	r2,r2,-2
  80a804:	b00c943a 	slli	r6,r22,16
  80a808:	3084b03a 	or	r2,r6,r2
  80a80c:	00000206 	br	80a818 <__udivdi3+0x2a0>
  80a810:	0007883a 	mov	r3,zero
  80a814:	0005883a 	mov	r2,zero
  80a818:	dfc00a17 	ldw	ra,40(sp)
  80a81c:	df000917 	ldw	fp,36(sp)
  80a820:	ddc00817 	ldw	r23,32(sp)
  80a824:	dd800717 	ldw	r22,28(sp)
  80a828:	dd400617 	ldw	r21,24(sp)
  80a82c:	dd000517 	ldw	r20,20(sp)
  80a830:	dcc00417 	ldw	r19,16(sp)
  80a834:	dc800317 	ldw	r18,12(sp)
  80a838:	dc400217 	ldw	r17,8(sp)
  80a83c:	dc000117 	ldw	r16,4(sp)
  80a840:	dec00b04 	addi	sp,sp,44
  80a844:	f800283a 	ret
  80a848:	00803fc4 	movi	r2,255
  80a84c:	11c5803a 	cmpltu	r2,r2,r7
  80a850:	100490fa 	slli	r2,r2,3
  80a854:	003f9e06 	br	80a6d0 <__alt_mem_onchip_mem+0xff8026d0>
  80a858:	00803fc4 	movi	r2,255
  80a85c:	1445803a 	cmpltu	r2,r2,r17
  80a860:	100490fa 	slli	r2,r2,3
  80a864:	003fb206 	br	80a730 <__alt_mem_onchip_mem+0xff802730>
  80a868:	00804034 	movhi	r2,256
  80a86c:	10bfffc4 	addi	r2,r2,-1
  80a870:	11808836 	bltu	r2,r6,80aa94 <__udivdi3+0x51c>
  80a874:	00800404 	movi	r2,16
  80a878:	003f5606 	br	80a5d4 <__alt_mem_onchip_mem+0xff8025d4>
  80a87c:	30aed83a 	srl	r23,r6,r2
  80a880:	3d4e983a 	sll	r7,r7,r21
  80a884:	80acd83a 	srl	r22,r16,r2
  80a888:	9884d83a 	srl	r2,r19,r2
  80a88c:	3deeb03a 	or	r23,r7,r23
  80a890:	b824d43a 	srli	r18,r23,16
  80a894:	8560983a 	sll	r16,r16,r21
  80a898:	b009883a 	mov	r4,r22
  80a89c:	900b883a 	mov	r5,r18
  80a8a0:	3568983a 	sll	r20,r6,r21
  80a8a4:	1420b03a 	or	r16,r2,r16
  80a8a8:	080b1840 	call	80b184 <__umodsi3>
  80a8ac:	b009883a 	mov	r4,r22
  80a8b0:	900b883a 	mov	r5,r18
  80a8b4:	1023883a 	mov	r17,r2
  80a8b8:	080b1200 	call	80b120 <__udivsi3>
  80a8bc:	8808943a 	slli	r4,r17,16
  80a8c0:	bf3fffcc 	andi	fp,r23,65535
  80a8c4:	8006d43a 	srli	r3,r16,16
  80a8c8:	e0a3383a 	mul	r17,fp,r2
  80a8cc:	100d883a 	mov	r6,r2
  80a8d0:	1906b03a 	or	r3,r3,r4
  80a8d4:	1c40042e 	bgeu	r3,r17,80a8e8 <__udivdi3+0x370>
  80a8d8:	1dc7883a 	add	r3,r3,r23
  80a8dc:	10bfffc4 	addi	r2,r2,-1
  80a8e0:	1dc0752e 	bgeu	r3,r23,80aab8 <__udivdi3+0x540>
  80a8e4:	100d883a 	mov	r6,r2
  80a8e8:	1c63c83a 	sub	r17,r3,r17
  80a8ec:	900b883a 	mov	r5,r18
  80a8f0:	8809883a 	mov	r4,r17
  80a8f4:	d9800015 	stw	r6,0(sp)
  80a8f8:	080b1840 	call	80b184 <__umodsi3>
  80a8fc:	102d883a 	mov	r22,r2
  80a900:	8809883a 	mov	r4,r17
  80a904:	900b883a 	mov	r5,r18
  80a908:	080b1200 	call	80b120 <__udivsi3>
  80a90c:	b02c943a 	slli	r22,r22,16
  80a910:	e089383a 	mul	r4,fp,r2
  80a914:	843fffcc 	andi	r16,r16,65535
  80a918:	85a0b03a 	or	r16,r16,r22
  80a91c:	d9800017 	ldw	r6,0(sp)
  80a920:	8100042e 	bgeu	r16,r4,80a934 <__udivdi3+0x3bc>
  80a924:	85e1883a 	add	r16,r16,r23
  80a928:	10ffffc4 	addi	r3,r2,-1
  80a92c:	85c05e2e 	bgeu	r16,r23,80aaa8 <__udivdi3+0x530>
  80a930:	1805883a 	mov	r2,r3
  80a934:	300c943a 	slli	r6,r6,16
  80a938:	a17fffcc 	andi	r5,r20,65535
  80a93c:	a028d43a 	srli	r20,r20,16
  80a940:	3084b03a 	or	r2,r6,r2
  80a944:	10ffffcc 	andi	r3,r2,65535
  80a948:	100cd43a 	srli	r6,r2,16
  80a94c:	194f383a 	mul	r7,r3,r5
  80a950:	1d07383a 	mul	r3,r3,r20
  80a954:	314b383a 	mul	r5,r6,r5
  80a958:	3810d43a 	srli	r8,r7,16
  80a95c:	8121c83a 	sub	r16,r16,r4
  80a960:	1947883a 	add	r3,r3,r5
  80a964:	40c7883a 	add	r3,r8,r3
  80a968:	350d383a 	mul	r6,r6,r20
  80a96c:	1940022e 	bgeu	r3,r5,80a978 <__udivdi3+0x400>
  80a970:	01000074 	movhi	r4,1
  80a974:	310d883a 	add	r6,r6,r4
  80a978:	1828d43a 	srli	r20,r3,16
  80a97c:	a18d883a 	add	r6,r20,r6
  80a980:	81803e36 	bltu	r16,r6,80aa7c <__udivdi3+0x504>
  80a984:	81803826 	beq	r16,r6,80aa68 <__udivdi3+0x4f0>
  80a988:	0007883a 	mov	r3,zero
  80a98c:	003fa206 	br	80a818 <__alt_mem_onchip_mem+0xff802818>
  80a990:	88e2983a 	sll	r17,r17,r3
  80a994:	80a8d83a 	srl	r20,r16,r2
  80a998:	80e0983a 	sll	r16,r16,r3
  80a99c:	882ad43a 	srli	r21,r17,16
  80a9a0:	9884d83a 	srl	r2,r19,r2
  80a9a4:	a009883a 	mov	r4,r20
  80a9a8:	a80b883a 	mov	r5,r21
  80a9ac:	142eb03a 	or	r23,r2,r16
  80a9b0:	98e4983a 	sll	r18,r19,r3
  80a9b4:	080b1840 	call	80b184 <__umodsi3>
  80a9b8:	a009883a 	mov	r4,r20
  80a9bc:	a80b883a 	mov	r5,r21
  80a9c0:	1021883a 	mov	r16,r2
  80a9c4:	080b1200 	call	80b120 <__udivsi3>
  80a9c8:	1039883a 	mov	fp,r2
  80a9cc:	8d3fffcc 	andi	r20,r17,65535
  80a9d0:	8020943a 	slli	r16,r16,16
  80a9d4:	b804d43a 	srli	r2,r23,16
  80a9d8:	a72d383a 	mul	r22,r20,fp
  80a9dc:	1404b03a 	or	r2,r2,r16
  80a9e0:	1580062e 	bgeu	r2,r22,80a9fc <__udivdi3+0x484>
  80a9e4:	1445883a 	add	r2,r2,r17
  80a9e8:	e0ffffc4 	addi	r3,fp,-1
  80a9ec:	14403836 	bltu	r2,r17,80aad0 <__udivdi3+0x558>
  80a9f0:	1580372e 	bgeu	r2,r22,80aad0 <__udivdi3+0x558>
  80a9f4:	e73fff84 	addi	fp,fp,-2
  80a9f8:	1445883a 	add	r2,r2,r17
  80a9fc:	15adc83a 	sub	r22,r2,r22
  80aa00:	a80b883a 	mov	r5,r21
  80aa04:	b009883a 	mov	r4,r22
  80aa08:	080b1840 	call	80b184 <__umodsi3>
  80aa0c:	1027883a 	mov	r19,r2
  80aa10:	b009883a 	mov	r4,r22
  80aa14:	a80b883a 	mov	r5,r21
  80aa18:	080b1200 	call	80b120 <__udivsi3>
  80aa1c:	9826943a 	slli	r19,r19,16
  80aa20:	a0a1383a 	mul	r16,r20,r2
  80aa24:	b93fffcc 	andi	r4,r23,65535
  80aa28:	24c8b03a 	or	r4,r4,r19
  80aa2c:	2400062e 	bgeu	r4,r16,80aa48 <__udivdi3+0x4d0>
  80aa30:	2449883a 	add	r4,r4,r17
  80aa34:	10ffffc4 	addi	r3,r2,-1
  80aa38:	24402336 	bltu	r4,r17,80aac8 <__udivdi3+0x550>
  80aa3c:	2400222e 	bgeu	r4,r16,80aac8 <__udivdi3+0x550>
  80aa40:	10bfff84 	addi	r2,r2,-2
  80aa44:	2449883a 	add	r4,r4,r17
  80aa48:	e038943a 	slli	fp,fp,16
  80aa4c:	2421c83a 	sub	r16,r4,r16
  80aa50:	e086b03a 	or	r3,fp,r2
  80aa54:	003f4306 	br	80a764 <__alt_mem_onchip_mem+0xff802764>
  80aa58:	2005883a 	mov	r2,r4
  80aa5c:	003f6906 	br	80a804 <__alt_mem_onchip_mem+0xff802804>
  80aa60:	1805883a 	mov	r2,r3
  80aa64:	003f0f06 	br	80a6a4 <__alt_mem_onchip_mem+0xff8026a4>
  80aa68:	1806943a 	slli	r3,r3,16
  80aa6c:	9d66983a 	sll	r19,r19,r21
  80aa70:	39ffffcc 	andi	r7,r7,65535
  80aa74:	19c7883a 	add	r3,r3,r7
  80aa78:	98ffc32e 	bgeu	r19,r3,80a988 <__alt_mem_onchip_mem+0xff802988>
  80aa7c:	10bfffc4 	addi	r2,r2,-1
  80aa80:	003fc106 	br	80a988 <__alt_mem_onchip_mem+0xff802988>
  80aa84:	00800604 	movi	r2,24
  80aa88:	003f1106 	br	80a6d0 <__alt_mem_onchip_mem+0xff8026d0>
  80aa8c:	00800604 	movi	r2,24
  80aa90:	003f2706 	br	80a730 <__alt_mem_onchip_mem+0xff802730>
  80aa94:	00800604 	movi	r2,24
  80aa98:	003ece06 	br	80a5d4 <__alt_mem_onchip_mem+0xff8025d4>
  80aa9c:	0007883a 	mov	r3,zero
  80aaa0:	00800044 	movi	r2,1
  80aaa4:	003f5c06 	br	80a818 <__alt_mem_onchip_mem+0xff802818>
  80aaa8:	813fa12e 	bgeu	r16,r4,80a930 <__alt_mem_onchip_mem+0xff802930>
  80aaac:	10bfff84 	addi	r2,r2,-2
  80aab0:	85e1883a 	add	r16,r16,r23
  80aab4:	003f9f06 	br	80a934 <__alt_mem_onchip_mem+0xff802934>
  80aab8:	1c7f8a2e 	bgeu	r3,r17,80a8e4 <__alt_mem_onchip_mem+0xff8028e4>
  80aabc:	31bfff84 	addi	r6,r6,-2
  80aac0:	1dc7883a 	add	r3,r3,r23
  80aac4:	003f8806 	br	80a8e8 <__alt_mem_onchip_mem+0xff8028e8>
  80aac8:	1805883a 	mov	r2,r3
  80aacc:	003fde06 	br	80aa48 <__alt_mem_onchip_mem+0xff802a48>
  80aad0:	1839883a 	mov	fp,r3
  80aad4:	003fc906 	br	80a9fc <__alt_mem_onchip_mem+0xff8029fc>
  80aad8:	b5bfff84 	addi	r22,r22,-2
  80aadc:	2449883a 	add	r4,r4,r17
  80aae0:	003f3406 	br	80a7b4 <__alt_mem_onchip_mem+0xff8027b4>
  80aae4:	b5bfff84 	addi	r22,r22,-2
  80aae8:	1445883a 	add	r2,r2,r17
  80aaec:	003edb06 	br	80a65c <__alt_mem_onchip_mem+0xff80265c>

0080aaf0 <__umoddi3>:
  80aaf0:	defff404 	addi	sp,sp,-48
  80aaf4:	df000a15 	stw	fp,40(sp)
  80aaf8:	dc400315 	stw	r17,12(sp)
  80aafc:	dc000215 	stw	r16,8(sp)
  80ab00:	dfc00b15 	stw	ra,44(sp)
  80ab04:	ddc00915 	stw	r23,36(sp)
  80ab08:	dd800815 	stw	r22,32(sp)
  80ab0c:	dd400715 	stw	r21,28(sp)
  80ab10:	dd000615 	stw	r20,24(sp)
  80ab14:	dcc00515 	stw	r19,20(sp)
  80ab18:	dc800415 	stw	r18,16(sp)
  80ab1c:	2021883a 	mov	r16,r4
  80ab20:	2823883a 	mov	r17,r5
  80ab24:	2839883a 	mov	fp,r5
  80ab28:	38003c1e 	bne	r7,zero,80ac1c <__umoddi3+0x12c>
  80ab2c:	3027883a 	mov	r19,r6
  80ab30:	2029883a 	mov	r20,r4
  80ab34:	2980512e 	bgeu	r5,r6,80ac7c <__umoddi3+0x18c>
  80ab38:	00bfffd4 	movui	r2,65535
  80ab3c:	11809a36 	bltu	r2,r6,80ada8 <__umoddi3+0x2b8>
  80ab40:	01003fc4 	movi	r4,255
  80ab44:	2189803a 	cmpltu	r4,r4,r6
  80ab48:	200890fa 	slli	r4,r4,3
  80ab4c:	3104d83a 	srl	r2,r6,r4
  80ab50:	00c02074 	movhi	r3,129
  80ab54:	18c71b04 	addi	r3,r3,7276
  80ab58:	1885883a 	add	r2,r3,r2
  80ab5c:	10c00003 	ldbu	r3,0(r2)
  80ab60:	00800804 	movi	r2,32
  80ab64:	1909883a 	add	r4,r3,r4
  80ab68:	1125c83a 	sub	r18,r2,r4
  80ab6c:	90000526 	beq	r18,zero,80ab84 <__umoddi3+0x94>
  80ab70:	8ca2983a 	sll	r17,r17,r18
  80ab74:	8108d83a 	srl	r4,r16,r4
  80ab78:	34a6983a 	sll	r19,r6,r18
  80ab7c:	84a8983a 	sll	r20,r16,r18
  80ab80:	2478b03a 	or	fp,r4,r17
  80ab84:	982ed43a 	srli	r23,r19,16
  80ab88:	e009883a 	mov	r4,fp
  80ab8c:	9dbfffcc 	andi	r22,r19,65535
  80ab90:	b80b883a 	mov	r5,r23
  80ab94:	080b1840 	call	80b184 <__umodsi3>
  80ab98:	e009883a 	mov	r4,fp
  80ab9c:	b80b883a 	mov	r5,r23
  80aba0:	102b883a 	mov	r21,r2
  80aba4:	080b1200 	call	80b120 <__udivsi3>
  80aba8:	a806943a 	slli	r3,r21,16
  80abac:	a008d43a 	srli	r4,r20,16
  80abb0:	b085383a 	mul	r2,r22,r2
  80abb4:	20c8b03a 	or	r4,r4,r3
  80abb8:	2080032e 	bgeu	r4,r2,80abc8 <__umoddi3+0xd8>
  80abbc:	24c9883a 	add	r4,r4,r19
  80abc0:	24c00136 	bltu	r4,r19,80abc8 <__umoddi3+0xd8>
  80abc4:	20811036 	bltu	r4,r2,80b008 <__umoddi3+0x518>
  80abc8:	20abc83a 	sub	r21,r4,r2
  80abcc:	b80b883a 	mov	r5,r23
  80abd0:	a809883a 	mov	r4,r21
  80abd4:	080b1840 	call	80b184 <__umodsi3>
  80abd8:	1023883a 	mov	r17,r2
  80abdc:	b80b883a 	mov	r5,r23
  80abe0:	a809883a 	mov	r4,r21
  80abe4:	080b1200 	call	80b120 <__udivsi3>
  80abe8:	8822943a 	slli	r17,r17,16
  80abec:	b085383a 	mul	r2,r22,r2
  80abf0:	a0ffffcc 	andi	r3,r20,65535
  80abf4:	1c46b03a 	or	r3,r3,r17
  80abf8:	1880042e 	bgeu	r3,r2,80ac0c <__umoddi3+0x11c>
  80abfc:	1cc7883a 	add	r3,r3,r19
  80ac00:	1cc00236 	bltu	r3,r19,80ac0c <__umoddi3+0x11c>
  80ac04:	1880012e 	bgeu	r3,r2,80ac0c <__umoddi3+0x11c>
  80ac08:	1cc7883a 	add	r3,r3,r19
  80ac0c:	1885c83a 	sub	r2,r3,r2
  80ac10:	1484d83a 	srl	r2,r2,r18
  80ac14:	0007883a 	mov	r3,zero
  80ac18:	00004f06 	br	80ad58 <__umoddi3+0x268>
  80ac1c:	29c04c36 	bltu	r5,r7,80ad50 <__umoddi3+0x260>
  80ac20:	00bfffd4 	movui	r2,65535
  80ac24:	11c0582e 	bgeu	r2,r7,80ad88 <__umoddi3+0x298>
  80ac28:	00804034 	movhi	r2,256
  80ac2c:	10bfffc4 	addi	r2,r2,-1
  80ac30:	11c0e736 	bltu	r2,r7,80afd0 <__umoddi3+0x4e0>
  80ac34:	01000404 	movi	r4,16
  80ac38:	3904d83a 	srl	r2,r7,r4
  80ac3c:	00c02074 	movhi	r3,129
  80ac40:	18c71b04 	addi	r3,r3,7276
  80ac44:	1885883a 	add	r2,r3,r2
  80ac48:	14c00003 	ldbu	r19,0(r2)
  80ac4c:	00c00804 	movi	r3,32
  80ac50:	9927883a 	add	r19,r19,r4
  80ac54:	1ce9c83a 	sub	r20,r3,r19
  80ac58:	a000581e 	bne	r20,zero,80adbc <__umoddi3+0x2cc>
  80ac5c:	3c400136 	bltu	r7,r17,80ac64 <__umoddi3+0x174>
  80ac60:	8180eb36 	bltu	r16,r6,80b010 <__umoddi3+0x520>
  80ac64:	8185c83a 	sub	r2,r16,r6
  80ac68:	89e3c83a 	sub	r17,r17,r7
  80ac6c:	8089803a 	cmpltu	r4,r16,r2
  80ac70:	8939c83a 	sub	fp,r17,r4
  80ac74:	e007883a 	mov	r3,fp
  80ac78:	00003706 	br	80ad58 <__umoddi3+0x268>
  80ac7c:	3000041e 	bne	r6,zero,80ac90 <__umoddi3+0x1a0>
  80ac80:	000b883a 	mov	r5,zero
  80ac84:	01000044 	movi	r4,1
  80ac88:	080b1200 	call	80b120 <__udivsi3>
  80ac8c:	1027883a 	mov	r19,r2
  80ac90:	00bfffd4 	movui	r2,65535
  80ac94:	14c0402e 	bgeu	r2,r19,80ad98 <__umoddi3+0x2a8>
  80ac98:	00804034 	movhi	r2,256
  80ac9c:	10bfffc4 	addi	r2,r2,-1
  80aca0:	14c0cd36 	bltu	r2,r19,80afd8 <__umoddi3+0x4e8>
  80aca4:	00800404 	movi	r2,16
  80aca8:	9886d83a 	srl	r3,r19,r2
  80acac:	01002074 	movhi	r4,129
  80acb0:	21071b04 	addi	r4,r4,7276
  80acb4:	20c7883a 	add	r3,r4,r3
  80acb8:	18c00003 	ldbu	r3,0(r3)
  80acbc:	1887883a 	add	r3,r3,r2
  80acc0:	00800804 	movi	r2,32
  80acc4:	10e5c83a 	sub	r18,r2,r3
  80acc8:	9000901e 	bne	r18,zero,80af0c <__umoddi3+0x41c>
  80accc:	982cd43a 	srli	r22,r19,16
  80acd0:	8ce3c83a 	sub	r17,r17,r19
  80acd4:	9d7fffcc 	andi	r21,r19,65535
  80acd8:	b00b883a 	mov	r5,r22
  80acdc:	8809883a 	mov	r4,r17
  80ace0:	080b1840 	call	80b184 <__umodsi3>
  80ace4:	8809883a 	mov	r4,r17
  80ace8:	b00b883a 	mov	r5,r22
  80acec:	1021883a 	mov	r16,r2
  80acf0:	080b1200 	call	80b120 <__udivsi3>
  80acf4:	8006943a 	slli	r3,r16,16
  80acf8:	a008d43a 	srli	r4,r20,16
  80acfc:	1545383a 	mul	r2,r2,r21
  80ad00:	20c8b03a 	or	r4,r4,r3
  80ad04:	2080042e 	bgeu	r4,r2,80ad18 <__umoddi3+0x228>
  80ad08:	24c9883a 	add	r4,r4,r19
  80ad0c:	24c00236 	bltu	r4,r19,80ad18 <__umoddi3+0x228>
  80ad10:	2080012e 	bgeu	r4,r2,80ad18 <__umoddi3+0x228>
  80ad14:	24c9883a 	add	r4,r4,r19
  80ad18:	20a1c83a 	sub	r16,r4,r2
  80ad1c:	b00b883a 	mov	r5,r22
  80ad20:	8009883a 	mov	r4,r16
  80ad24:	080b1840 	call	80b184 <__umodsi3>
  80ad28:	1023883a 	mov	r17,r2
  80ad2c:	b00b883a 	mov	r5,r22
  80ad30:	8009883a 	mov	r4,r16
  80ad34:	080b1200 	call	80b120 <__udivsi3>
  80ad38:	8822943a 	slli	r17,r17,16
  80ad3c:	1545383a 	mul	r2,r2,r21
  80ad40:	a53fffcc 	andi	r20,r20,65535
  80ad44:	a446b03a 	or	r3,r20,r17
  80ad48:	18bfb02e 	bgeu	r3,r2,80ac0c <__alt_mem_onchip_mem+0xff802c0c>
  80ad4c:	003fab06 	br	80abfc <__alt_mem_onchip_mem+0xff802bfc>
  80ad50:	2005883a 	mov	r2,r4
  80ad54:	2807883a 	mov	r3,r5
  80ad58:	dfc00b17 	ldw	ra,44(sp)
  80ad5c:	df000a17 	ldw	fp,40(sp)
  80ad60:	ddc00917 	ldw	r23,36(sp)
  80ad64:	dd800817 	ldw	r22,32(sp)
  80ad68:	dd400717 	ldw	r21,28(sp)
  80ad6c:	dd000617 	ldw	r20,24(sp)
  80ad70:	dcc00517 	ldw	r19,20(sp)
  80ad74:	dc800417 	ldw	r18,16(sp)
  80ad78:	dc400317 	ldw	r17,12(sp)
  80ad7c:	dc000217 	ldw	r16,8(sp)
  80ad80:	dec00c04 	addi	sp,sp,48
  80ad84:	f800283a 	ret
  80ad88:	04c03fc4 	movi	r19,255
  80ad8c:	99c9803a 	cmpltu	r4,r19,r7
  80ad90:	200890fa 	slli	r4,r4,3
  80ad94:	003fa806 	br	80ac38 <__alt_mem_onchip_mem+0xff802c38>
  80ad98:	00803fc4 	movi	r2,255
  80ad9c:	14c5803a 	cmpltu	r2,r2,r19
  80ada0:	100490fa 	slli	r2,r2,3
  80ada4:	003fc006 	br	80aca8 <__alt_mem_onchip_mem+0xff802ca8>
  80ada8:	00804034 	movhi	r2,256
  80adac:	10bfffc4 	addi	r2,r2,-1
  80adb0:	11808b36 	bltu	r2,r6,80afe0 <__umoddi3+0x4f0>
  80adb4:	01000404 	movi	r4,16
  80adb8:	003f6406 	br	80ab4c <__alt_mem_onchip_mem+0xff802b4c>
  80adbc:	34c4d83a 	srl	r2,r6,r19
  80adc0:	3d0e983a 	sll	r7,r7,r20
  80adc4:	8cf8d83a 	srl	fp,r17,r19
  80adc8:	8d10983a 	sll	r8,r17,r20
  80adcc:	38aab03a 	or	r21,r7,r2
  80add0:	a82cd43a 	srli	r22,r21,16
  80add4:	84e2d83a 	srl	r17,r16,r19
  80add8:	e009883a 	mov	r4,fp
  80addc:	b00b883a 	mov	r5,r22
  80ade0:	8a22b03a 	or	r17,r17,r8
  80ade4:	3524983a 	sll	r18,r6,r20
  80ade8:	080b1840 	call	80b184 <__umodsi3>
  80adec:	e009883a 	mov	r4,fp
  80adf0:	b00b883a 	mov	r5,r22
  80adf4:	102f883a 	mov	r23,r2
  80adf8:	080b1200 	call	80b120 <__udivsi3>
  80adfc:	100d883a 	mov	r6,r2
  80ae00:	b808943a 	slli	r4,r23,16
  80ae04:	aa3fffcc 	andi	r8,r21,65535
  80ae08:	8804d43a 	srli	r2,r17,16
  80ae0c:	41af383a 	mul	r23,r8,r6
  80ae10:	8520983a 	sll	r16,r16,r20
  80ae14:	1104b03a 	or	r2,r2,r4
  80ae18:	15c0042e 	bgeu	r2,r23,80ae2c <__umoddi3+0x33c>
  80ae1c:	1545883a 	add	r2,r2,r21
  80ae20:	30ffffc4 	addi	r3,r6,-1
  80ae24:	1540742e 	bgeu	r2,r21,80aff8 <__umoddi3+0x508>
  80ae28:	180d883a 	mov	r6,r3
  80ae2c:	15efc83a 	sub	r23,r2,r23
  80ae30:	b00b883a 	mov	r5,r22
  80ae34:	b809883a 	mov	r4,r23
  80ae38:	d9800115 	stw	r6,4(sp)
  80ae3c:	da000015 	stw	r8,0(sp)
  80ae40:	080b1840 	call	80b184 <__umodsi3>
  80ae44:	b00b883a 	mov	r5,r22
  80ae48:	b809883a 	mov	r4,r23
  80ae4c:	1039883a 	mov	fp,r2
  80ae50:	080b1200 	call	80b120 <__udivsi3>
  80ae54:	da000017 	ldw	r8,0(sp)
  80ae58:	e038943a 	slli	fp,fp,16
  80ae5c:	100b883a 	mov	r5,r2
  80ae60:	4089383a 	mul	r4,r8,r2
  80ae64:	8a3fffcc 	andi	r8,r17,65535
  80ae68:	4710b03a 	or	r8,r8,fp
  80ae6c:	d9800117 	ldw	r6,4(sp)
  80ae70:	4100042e 	bgeu	r8,r4,80ae84 <__umoddi3+0x394>
  80ae74:	4551883a 	add	r8,r8,r21
  80ae78:	10bfffc4 	addi	r2,r2,-1
  80ae7c:	45405a2e 	bgeu	r8,r21,80afe8 <__umoddi3+0x4f8>
  80ae80:	100b883a 	mov	r5,r2
  80ae84:	300c943a 	slli	r6,r6,16
  80ae88:	91ffffcc 	andi	r7,r18,65535
  80ae8c:	9004d43a 	srli	r2,r18,16
  80ae90:	314cb03a 	or	r6,r6,r5
  80ae94:	317fffcc 	andi	r5,r6,65535
  80ae98:	300cd43a 	srli	r6,r6,16
  80ae9c:	29d3383a 	mul	r9,r5,r7
  80aea0:	288b383a 	mul	r5,r5,r2
  80aea4:	31cf383a 	mul	r7,r6,r7
  80aea8:	4806d43a 	srli	r3,r9,16
  80aeac:	4111c83a 	sub	r8,r8,r4
  80aeb0:	29cb883a 	add	r5,r5,r7
  80aeb4:	194b883a 	add	r5,r3,r5
  80aeb8:	3085383a 	mul	r2,r6,r2
  80aebc:	29c0022e 	bgeu	r5,r7,80aec8 <__umoddi3+0x3d8>
  80aec0:	00c00074 	movhi	r3,1
  80aec4:	10c5883a 	add	r2,r2,r3
  80aec8:	2808d43a 	srli	r4,r5,16
  80aecc:	280a943a 	slli	r5,r5,16
  80aed0:	4a7fffcc 	andi	r9,r9,65535
  80aed4:	2085883a 	add	r2,r4,r2
  80aed8:	2a4b883a 	add	r5,r5,r9
  80aedc:	40803636 	bltu	r8,r2,80afb8 <__umoddi3+0x4c8>
  80aee0:	40804d26 	beq	r8,r2,80b018 <__umoddi3+0x528>
  80aee4:	4089c83a 	sub	r4,r8,r2
  80aee8:	280f883a 	mov	r7,r5
  80aeec:	81cfc83a 	sub	r7,r16,r7
  80aef0:	81c7803a 	cmpltu	r3,r16,r7
  80aef4:	20c7c83a 	sub	r3,r4,r3
  80aef8:	1cc4983a 	sll	r2,r3,r19
  80aefc:	3d0ed83a 	srl	r7,r7,r20
  80af00:	1d06d83a 	srl	r3,r3,r20
  80af04:	11c4b03a 	or	r2,r2,r7
  80af08:	003f9306 	br	80ad58 <__alt_mem_onchip_mem+0xff802d58>
  80af0c:	9ca6983a 	sll	r19,r19,r18
  80af10:	88e8d83a 	srl	r20,r17,r3
  80af14:	80c4d83a 	srl	r2,r16,r3
  80af18:	982cd43a 	srli	r22,r19,16
  80af1c:	8ca2983a 	sll	r17,r17,r18
  80af20:	a009883a 	mov	r4,r20
  80af24:	b00b883a 	mov	r5,r22
  80af28:	1478b03a 	or	fp,r2,r17
  80af2c:	080b1840 	call	80b184 <__umodsi3>
  80af30:	a009883a 	mov	r4,r20
  80af34:	b00b883a 	mov	r5,r22
  80af38:	1023883a 	mov	r17,r2
  80af3c:	080b1200 	call	80b120 <__udivsi3>
  80af40:	9d7fffcc 	andi	r21,r19,65535
  80af44:	880a943a 	slli	r5,r17,16
  80af48:	e008d43a 	srli	r4,fp,16
  80af4c:	a885383a 	mul	r2,r21,r2
  80af50:	84a8983a 	sll	r20,r16,r18
  80af54:	2148b03a 	or	r4,r4,r5
  80af58:	2080042e 	bgeu	r4,r2,80af6c <__umoddi3+0x47c>
  80af5c:	24c9883a 	add	r4,r4,r19
  80af60:	24c00236 	bltu	r4,r19,80af6c <__umoddi3+0x47c>
  80af64:	2080012e 	bgeu	r4,r2,80af6c <__umoddi3+0x47c>
  80af68:	24c9883a 	add	r4,r4,r19
  80af6c:	20a3c83a 	sub	r17,r4,r2
  80af70:	b00b883a 	mov	r5,r22
  80af74:	8809883a 	mov	r4,r17
  80af78:	080b1840 	call	80b184 <__umodsi3>
  80af7c:	102f883a 	mov	r23,r2
  80af80:	8809883a 	mov	r4,r17
  80af84:	b00b883a 	mov	r5,r22
  80af88:	080b1200 	call	80b120 <__udivsi3>
  80af8c:	b82e943a 	slli	r23,r23,16
  80af90:	a885383a 	mul	r2,r21,r2
  80af94:	e13fffcc 	andi	r4,fp,65535
  80af98:	25c8b03a 	or	r4,r4,r23
  80af9c:	2080042e 	bgeu	r4,r2,80afb0 <__umoddi3+0x4c0>
  80afa0:	24c9883a 	add	r4,r4,r19
  80afa4:	24c00236 	bltu	r4,r19,80afb0 <__umoddi3+0x4c0>
  80afa8:	2080012e 	bgeu	r4,r2,80afb0 <__umoddi3+0x4c0>
  80afac:	24c9883a 	add	r4,r4,r19
  80afb0:	20a3c83a 	sub	r17,r4,r2
  80afb4:	003f4806 	br	80acd8 <__alt_mem_onchip_mem+0xff802cd8>
  80afb8:	2c8fc83a 	sub	r7,r5,r18
  80afbc:	1545c83a 	sub	r2,r2,r21
  80afc0:	29cb803a 	cmpltu	r5,r5,r7
  80afc4:	1145c83a 	sub	r2,r2,r5
  80afc8:	4089c83a 	sub	r4,r8,r2
  80afcc:	003fc706 	br	80aeec <__alt_mem_onchip_mem+0xff802eec>
  80afd0:	01000604 	movi	r4,24
  80afd4:	003f1806 	br	80ac38 <__alt_mem_onchip_mem+0xff802c38>
  80afd8:	00800604 	movi	r2,24
  80afdc:	003f3206 	br	80aca8 <__alt_mem_onchip_mem+0xff802ca8>
  80afe0:	01000604 	movi	r4,24
  80afe4:	003ed906 	br	80ab4c <__alt_mem_onchip_mem+0xff802b4c>
  80afe8:	413fa52e 	bgeu	r8,r4,80ae80 <__alt_mem_onchip_mem+0xff802e80>
  80afec:	297fff84 	addi	r5,r5,-2
  80aff0:	4551883a 	add	r8,r8,r21
  80aff4:	003fa306 	br	80ae84 <__alt_mem_onchip_mem+0xff802e84>
  80aff8:	15ff8b2e 	bgeu	r2,r23,80ae28 <__alt_mem_onchip_mem+0xff802e28>
  80affc:	31bfff84 	addi	r6,r6,-2
  80b000:	1545883a 	add	r2,r2,r21
  80b004:	003f8906 	br	80ae2c <__alt_mem_onchip_mem+0xff802e2c>
  80b008:	24c9883a 	add	r4,r4,r19
  80b00c:	003eee06 	br	80abc8 <__alt_mem_onchip_mem+0xff802bc8>
  80b010:	8005883a 	mov	r2,r16
  80b014:	003f1706 	br	80ac74 <__alt_mem_onchip_mem+0xff802c74>
  80b018:	817fe736 	bltu	r16,r5,80afb8 <__alt_mem_onchip_mem+0xff802fb8>
  80b01c:	280f883a 	mov	r7,r5
  80b020:	0009883a 	mov	r4,zero
  80b024:	003fb106 	br	80aeec <__alt_mem_onchip_mem+0xff802eec>

0080b028 <__divsi3>:
  80b028:	20001b16 	blt	r4,zero,80b098 <__divsi3+0x70>
  80b02c:	000f883a 	mov	r7,zero
  80b030:	28001616 	blt	r5,zero,80b08c <__divsi3+0x64>
  80b034:	200d883a 	mov	r6,r4
  80b038:	29001a2e 	bgeu	r5,r4,80b0a4 <__divsi3+0x7c>
  80b03c:	00800804 	movi	r2,32
  80b040:	00c00044 	movi	r3,1
  80b044:	00000106 	br	80b04c <__divsi3+0x24>
  80b048:	10000d26 	beq	r2,zero,80b080 <__divsi3+0x58>
  80b04c:	294b883a 	add	r5,r5,r5
  80b050:	10bfffc4 	addi	r2,r2,-1
  80b054:	18c7883a 	add	r3,r3,r3
  80b058:	293ffb36 	bltu	r5,r4,80b048 <__alt_mem_onchip_mem+0xff803048>
  80b05c:	0005883a 	mov	r2,zero
  80b060:	18000726 	beq	r3,zero,80b080 <__divsi3+0x58>
  80b064:	0005883a 	mov	r2,zero
  80b068:	31400236 	bltu	r6,r5,80b074 <__divsi3+0x4c>
  80b06c:	314dc83a 	sub	r6,r6,r5
  80b070:	10c4b03a 	or	r2,r2,r3
  80b074:	1806d07a 	srli	r3,r3,1
  80b078:	280ad07a 	srli	r5,r5,1
  80b07c:	183ffa1e 	bne	r3,zero,80b068 <__alt_mem_onchip_mem+0xff803068>
  80b080:	38000126 	beq	r7,zero,80b088 <__divsi3+0x60>
  80b084:	0085c83a 	sub	r2,zero,r2
  80b088:	f800283a 	ret
  80b08c:	014bc83a 	sub	r5,zero,r5
  80b090:	39c0005c 	xori	r7,r7,1
  80b094:	003fe706 	br	80b034 <__alt_mem_onchip_mem+0xff803034>
  80b098:	0109c83a 	sub	r4,zero,r4
  80b09c:	01c00044 	movi	r7,1
  80b0a0:	003fe306 	br	80b030 <__alt_mem_onchip_mem+0xff803030>
  80b0a4:	00c00044 	movi	r3,1
  80b0a8:	003fee06 	br	80b064 <__alt_mem_onchip_mem+0xff803064>

0080b0ac <__modsi3>:
  80b0ac:	20001716 	blt	r4,zero,80b10c <__modsi3+0x60>
  80b0b0:	000f883a 	mov	r7,zero
  80b0b4:	2005883a 	mov	r2,r4
  80b0b8:	28001216 	blt	r5,zero,80b104 <__modsi3+0x58>
  80b0bc:	2900162e 	bgeu	r5,r4,80b118 <__modsi3+0x6c>
  80b0c0:	01800804 	movi	r6,32
  80b0c4:	00c00044 	movi	r3,1
  80b0c8:	00000106 	br	80b0d0 <__modsi3+0x24>
  80b0cc:	30000a26 	beq	r6,zero,80b0f8 <__modsi3+0x4c>
  80b0d0:	294b883a 	add	r5,r5,r5
  80b0d4:	31bfffc4 	addi	r6,r6,-1
  80b0d8:	18c7883a 	add	r3,r3,r3
  80b0dc:	293ffb36 	bltu	r5,r4,80b0cc <__alt_mem_onchip_mem+0xff8030cc>
  80b0e0:	18000526 	beq	r3,zero,80b0f8 <__modsi3+0x4c>
  80b0e4:	1806d07a 	srli	r3,r3,1
  80b0e8:	11400136 	bltu	r2,r5,80b0f0 <__modsi3+0x44>
  80b0ec:	1145c83a 	sub	r2,r2,r5
  80b0f0:	280ad07a 	srli	r5,r5,1
  80b0f4:	183ffb1e 	bne	r3,zero,80b0e4 <__alt_mem_onchip_mem+0xff8030e4>
  80b0f8:	38000126 	beq	r7,zero,80b100 <__modsi3+0x54>
  80b0fc:	0085c83a 	sub	r2,zero,r2
  80b100:	f800283a 	ret
  80b104:	014bc83a 	sub	r5,zero,r5
  80b108:	003fec06 	br	80b0bc <__alt_mem_onchip_mem+0xff8030bc>
  80b10c:	0109c83a 	sub	r4,zero,r4
  80b110:	01c00044 	movi	r7,1
  80b114:	003fe706 	br	80b0b4 <__alt_mem_onchip_mem+0xff8030b4>
  80b118:	00c00044 	movi	r3,1
  80b11c:	003ff106 	br	80b0e4 <__alt_mem_onchip_mem+0xff8030e4>

0080b120 <__udivsi3>:
  80b120:	200d883a 	mov	r6,r4
  80b124:	2900152e 	bgeu	r5,r4,80b17c <__udivsi3+0x5c>
  80b128:	28001416 	blt	r5,zero,80b17c <__udivsi3+0x5c>
  80b12c:	00800804 	movi	r2,32
  80b130:	00c00044 	movi	r3,1
  80b134:	00000206 	br	80b140 <__udivsi3+0x20>
  80b138:	10000e26 	beq	r2,zero,80b174 <__udivsi3+0x54>
  80b13c:	28000516 	blt	r5,zero,80b154 <__udivsi3+0x34>
  80b140:	294b883a 	add	r5,r5,r5
  80b144:	10bfffc4 	addi	r2,r2,-1
  80b148:	18c7883a 	add	r3,r3,r3
  80b14c:	293ffa36 	bltu	r5,r4,80b138 <__alt_mem_onchip_mem+0xff803138>
  80b150:	18000826 	beq	r3,zero,80b174 <__udivsi3+0x54>
  80b154:	0005883a 	mov	r2,zero
  80b158:	31400236 	bltu	r6,r5,80b164 <__udivsi3+0x44>
  80b15c:	314dc83a 	sub	r6,r6,r5
  80b160:	10c4b03a 	or	r2,r2,r3
  80b164:	1806d07a 	srli	r3,r3,1
  80b168:	280ad07a 	srli	r5,r5,1
  80b16c:	183ffa1e 	bne	r3,zero,80b158 <__alt_mem_onchip_mem+0xff803158>
  80b170:	f800283a 	ret
  80b174:	0005883a 	mov	r2,zero
  80b178:	f800283a 	ret
  80b17c:	00c00044 	movi	r3,1
  80b180:	003ff406 	br	80b154 <__alt_mem_onchip_mem+0xff803154>

0080b184 <__umodsi3>:
  80b184:	2005883a 	mov	r2,r4
  80b188:	2900122e 	bgeu	r5,r4,80b1d4 <__umodsi3+0x50>
  80b18c:	28001116 	blt	r5,zero,80b1d4 <__umodsi3+0x50>
  80b190:	01800804 	movi	r6,32
  80b194:	00c00044 	movi	r3,1
  80b198:	00000206 	br	80b1a4 <__umodsi3+0x20>
  80b19c:	30000c26 	beq	r6,zero,80b1d0 <__umodsi3+0x4c>
  80b1a0:	28000516 	blt	r5,zero,80b1b8 <__umodsi3+0x34>
  80b1a4:	294b883a 	add	r5,r5,r5
  80b1a8:	31bfffc4 	addi	r6,r6,-1
  80b1ac:	18c7883a 	add	r3,r3,r3
  80b1b0:	293ffa36 	bltu	r5,r4,80b19c <__alt_mem_onchip_mem+0xff80319c>
  80b1b4:	18000626 	beq	r3,zero,80b1d0 <__umodsi3+0x4c>
  80b1b8:	1806d07a 	srli	r3,r3,1
  80b1bc:	11400136 	bltu	r2,r5,80b1c4 <__umodsi3+0x40>
  80b1c0:	1145c83a 	sub	r2,r2,r5
  80b1c4:	280ad07a 	srli	r5,r5,1
  80b1c8:	183ffb1e 	bne	r3,zero,80b1b8 <__alt_mem_onchip_mem+0xff8031b8>
  80b1cc:	f800283a 	ret
  80b1d0:	f800283a 	ret
  80b1d4:	00c00044 	movi	r3,1
  80b1d8:	003ff706 	br	80b1b8 <__alt_mem_onchip_mem+0xff8031b8>

0080b1dc <__adddf3>:
  80b1dc:	02c00434 	movhi	r11,16
  80b1e0:	5affffc4 	addi	r11,r11,-1
  80b1e4:	2806d7fa 	srli	r3,r5,31
  80b1e8:	2ad4703a 	and	r10,r5,r11
  80b1ec:	3ad2703a 	and	r9,r7,r11
  80b1f0:	3804d53a 	srli	r2,r7,20
  80b1f4:	3018d77a 	srli	r12,r6,29
  80b1f8:	280ad53a 	srli	r5,r5,20
  80b1fc:	501490fa 	slli	r10,r10,3
  80b200:	2010d77a 	srli	r8,r4,29
  80b204:	481290fa 	slli	r9,r9,3
  80b208:	380ed7fa 	srli	r7,r7,31
  80b20c:	defffb04 	addi	sp,sp,-20
  80b210:	dc800215 	stw	r18,8(sp)
  80b214:	dc400115 	stw	r17,4(sp)
  80b218:	dc000015 	stw	r16,0(sp)
  80b21c:	dfc00415 	stw	ra,16(sp)
  80b220:	dcc00315 	stw	r19,12(sp)
  80b224:	1c803fcc 	andi	r18,r3,255
  80b228:	2c01ffcc 	andi	r16,r5,2047
  80b22c:	5210b03a 	or	r8,r10,r8
  80b230:	202290fa 	slli	r17,r4,3
  80b234:	1081ffcc 	andi	r2,r2,2047
  80b238:	4b12b03a 	or	r9,r9,r12
  80b23c:	300c90fa 	slli	r6,r6,3
  80b240:	91c07526 	beq	r18,r7,80b418 <__adddf3+0x23c>
  80b244:	8087c83a 	sub	r3,r16,r2
  80b248:	00c0ab0e 	bge	zero,r3,80b4f8 <__adddf3+0x31c>
  80b24c:	10002a1e 	bne	r2,zero,80b2f8 <__adddf3+0x11c>
  80b250:	4984b03a 	or	r2,r9,r6
  80b254:	1000961e 	bne	r2,zero,80b4b0 <__adddf3+0x2d4>
  80b258:	888001cc 	andi	r2,r17,7
  80b25c:	10000726 	beq	r2,zero,80b27c <__adddf3+0xa0>
  80b260:	888003cc 	andi	r2,r17,15
  80b264:	00c00104 	movi	r3,4
  80b268:	10c00426 	beq	r2,r3,80b27c <__adddf3+0xa0>
  80b26c:	88c7883a 	add	r3,r17,r3
  80b270:	1c63803a 	cmpltu	r17,r3,r17
  80b274:	4451883a 	add	r8,r8,r17
  80b278:	1823883a 	mov	r17,r3
  80b27c:	4080202c 	andhi	r2,r8,128
  80b280:	10005926 	beq	r2,zero,80b3e8 <__adddf3+0x20c>
  80b284:	84000044 	addi	r16,r16,1
  80b288:	0081ffc4 	movi	r2,2047
  80b28c:	8080ba26 	beq	r16,r2,80b578 <__adddf3+0x39c>
  80b290:	00bfe034 	movhi	r2,65408
  80b294:	10bfffc4 	addi	r2,r2,-1
  80b298:	4090703a 	and	r8,r8,r2
  80b29c:	4004977a 	slli	r2,r8,29
  80b2a0:	4010927a 	slli	r8,r8,9
  80b2a4:	8822d0fa 	srli	r17,r17,3
  80b2a8:	8401ffcc 	andi	r16,r16,2047
  80b2ac:	4010d33a 	srli	r8,r8,12
  80b2b0:	9007883a 	mov	r3,r18
  80b2b4:	1444b03a 	or	r2,r2,r17
  80b2b8:	8401ffcc 	andi	r16,r16,2047
  80b2bc:	8020953a 	slli	r16,r16,20
  80b2c0:	18c03fcc 	andi	r3,r3,255
  80b2c4:	01000434 	movhi	r4,16
  80b2c8:	213fffc4 	addi	r4,r4,-1
  80b2cc:	180697fa 	slli	r3,r3,31
  80b2d0:	4110703a 	and	r8,r8,r4
  80b2d4:	4410b03a 	or	r8,r8,r16
  80b2d8:	40c6b03a 	or	r3,r8,r3
  80b2dc:	dfc00417 	ldw	ra,16(sp)
  80b2e0:	dcc00317 	ldw	r19,12(sp)
  80b2e4:	dc800217 	ldw	r18,8(sp)
  80b2e8:	dc400117 	ldw	r17,4(sp)
  80b2ec:	dc000017 	ldw	r16,0(sp)
  80b2f0:	dec00504 	addi	sp,sp,20
  80b2f4:	f800283a 	ret
  80b2f8:	0081ffc4 	movi	r2,2047
  80b2fc:	80bfd626 	beq	r16,r2,80b258 <__alt_mem_onchip_mem+0xff803258>
  80b300:	4a402034 	orhi	r9,r9,128
  80b304:	00800e04 	movi	r2,56
  80b308:	10c09f16 	blt	r2,r3,80b588 <__adddf3+0x3ac>
  80b30c:	008007c4 	movi	r2,31
  80b310:	10c0c216 	blt	r2,r3,80b61c <__adddf3+0x440>
  80b314:	00800804 	movi	r2,32
  80b318:	10c5c83a 	sub	r2,r2,r3
  80b31c:	488a983a 	sll	r5,r9,r2
  80b320:	30c8d83a 	srl	r4,r6,r3
  80b324:	3084983a 	sll	r2,r6,r2
  80b328:	48c6d83a 	srl	r3,r9,r3
  80b32c:	290cb03a 	or	r6,r5,r4
  80b330:	1004c03a 	cmpne	r2,r2,zero
  80b334:	308cb03a 	or	r6,r6,r2
  80b338:	898dc83a 	sub	r6,r17,r6
  80b33c:	89a3803a 	cmpltu	r17,r17,r6
  80b340:	40d1c83a 	sub	r8,r8,r3
  80b344:	4451c83a 	sub	r8,r8,r17
  80b348:	3023883a 	mov	r17,r6
  80b34c:	4080202c 	andhi	r2,r8,128
  80b350:	10002326 	beq	r2,zero,80b3e0 <__adddf3+0x204>
  80b354:	04c02034 	movhi	r19,128
  80b358:	9cffffc4 	addi	r19,r19,-1
  80b35c:	44e6703a 	and	r19,r8,r19
  80b360:	98007626 	beq	r19,zero,80b53c <__adddf3+0x360>
  80b364:	9809883a 	mov	r4,r19
  80b368:	080d7e00 	call	80d7e0 <__clzsi2>
  80b36c:	10fffe04 	addi	r3,r2,-8
  80b370:	010007c4 	movi	r4,31
  80b374:	20c07716 	blt	r4,r3,80b554 <__adddf3+0x378>
  80b378:	00800804 	movi	r2,32
  80b37c:	10c5c83a 	sub	r2,r2,r3
  80b380:	8884d83a 	srl	r2,r17,r2
  80b384:	98d0983a 	sll	r8,r19,r3
  80b388:	88e2983a 	sll	r17,r17,r3
  80b38c:	1204b03a 	or	r2,r2,r8
  80b390:	1c007416 	blt	r3,r16,80b564 <__adddf3+0x388>
  80b394:	1c21c83a 	sub	r16,r3,r16
  80b398:	82000044 	addi	r8,r16,1
  80b39c:	00c007c4 	movi	r3,31
  80b3a0:	1a009116 	blt	r3,r8,80b5e8 <__adddf3+0x40c>
  80b3a4:	00c00804 	movi	r3,32
  80b3a8:	1a07c83a 	sub	r3,r3,r8
  80b3ac:	8a08d83a 	srl	r4,r17,r8
  80b3b0:	88e2983a 	sll	r17,r17,r3
  80b3b4:	10c6983a 	sll	r3,r2,r3
  80b3b8:	1210d83a 	srl	r8,r2,r8
  80b3bc:	8804c03a 	cmpne	r2,r17,zero
  80b3c0:	1906b03a 	or	r3,r3,r4
  80b3c4:	18a2b03a 	or	r17,r3,r2
  80b3c8:	0021883a 	mov	r16,zero
  80b3cc:	003fa206 	br	80b258 <__alt_mem_onchip_mem+0xff803258>
  80b3d0:	1890b03a 	or	r8,r3,r2
  80b3d4:	40017d26 	beq	r8,zero,80b9cc <__adddf3+0x7f0>
  80b3d8:	1011883a 	mov	r8,r2
  80b3dc:	1823883a 	mov	r17,r3
  80b3e0:	888001cc 	andi	r2,r17,7
  80b3e4:	103f9e1e 	bne	r2,zero,80b260 <__alt_mem_onchip_mem+0xff803260>
  80b3e8:	4004977a 	slli	r2,r8,29
  80b3ec:	8822d0fa 	srli	r17,r17,3
  80b3f0:	4010d0fa 	srli	r8,r8,3
  80b3f4:	9007883a 	mov	r3,r18
  80b3f8:	1444b03a 	or	r2,r2,r17
  80b3fc:	0101ffc4 	movi	r4,2047
  80b400:	81002426 	beq	r16,r4,80b494 <__adddf3+0x2b8>
  80b404:	8120703a 	and	r16,r16,r4
  80b408:	01000434 	movhi	r4,16
  80b40c:	213fffc4 	addi	r4,r4,-1
  80b410:	4110703a 	and	r8,r8,r4
  80b414:	003fa806 	br	80b2b8 <__alt_mem_onchip_mem+0xff8032b8>
  80b418:	8089c83a 	sub	r4,r16,r2
  80b41c:	01005e0e 	bge	zero,r4,80b598 <__adddf3+0x3bc>
  80b420:	10002b26 	beq	r2,zero,80b4d0 <__adddf3+0x2f4>
  80b424:	0081ffc4 	movi	r2,2047
  80b428:	80bf8b26 	beq	r16,r2,80b258 <__alt_mem_onchip_mem+0xff803258>
  80b42c:	4a402034 	orhi	r9,r9,128
  80b430:	00800e04 	movi	r2,56
  80b434:	1100a40e 	bge	r2,r4,80b6c8 <__adddf3+0x4ec>
  80b438:	498cb03a 	or	r6,r9,r6
  80b43c:	300ac03a 	cmpne	r5,r6,zero
  80b440:	0013883a 	mov	r9,zero
  80b444:	2c4b883a 	add	r5,r5,r17
  80b448:	2c63803a 	cmpltu	r17,r5,r17
  80b44c:	4a11883a 	add	r8,r9,r8
  80b450:	8a11883a 	add	r8,r17,r8
  80b454:	2823883a 	mov	r17,r5
  80b458:	4080202c 	andhi	r2,r8,128
  80b45c:	103fe026 	beq	r2,zero,80b3e0 <__alt_mem_onchip_mem+0xff8033e0>
  80b460:	84000044 	addi	r16,r16,1
  80b464:	0081ffc4 	movi	r2,2047
  80b468:	8080d226 	beq	r16,r2,80b7b4 <__adddf3+0x5d8>
  80b46c:	00bfe034 	movhi	r2,65408
  80b470:	10bfffc4 	addi	r2,r2,-1
  80b474:	4090703a 	and	r8,r8,r2
  80b478:	880ad07a 	srli	r5,r17,1
  80b47c:	400897fa 	slli	r4,r8,31
  80b480:	88c0004c 	andi	r3,r17,1
  80b484:	28e2b03a 	or	r17,r5,r3
  80b488:	4010d07a 	srli	r8,r8,1
  80b48c:	2462b03a 	or	r17,r4,r17
  80b490:	003f7106 	br	80b258 <__alt_mem_onchip_mem+0xff803258>
  80b494:	4088b03a 	or	r4,r8,r2
  80b498:	20014526 	beq	r4,zero,80b9b0 <__adddf3+0x7d4>
  80b49c:	01000434 	movhi	r4,16
  80b4a0:	42000234 	orhi	r8,r8,8
  80b4a4:	213fffc4 	addi	r4,r4,-1
  80b4a8:	4110703a 	and	r8,r8,r4
  80b4ac:	003f8206 	br	80b2b8 <__alt_mem_onchip_mem+0xff8032b8>
  80b4b0:	18ffffc4 	addi	r3,r3,-1
  80b4b4:	1800491e 	bne	r3,zero,80b5dc <__adddf3+0x400>
  80b4b8:	898bc83a 	sub	r5,r17,r6
  80b4bc:	8963803a 	cmpltu	r17,r17,r5
  80b4c0:	4251c83a 	sub	r8,r8,r9
  80b4c4:	4451c83a 	sub	r8,r8,r17
  80b4c8:	2823883a 	mov	r17,r5
  80b4cc:	003f9f06 	br	80b34c <__alt_mem_onchip_mem+0xff80334c>
  80b4d0:	4984b03a 	or	r2,r9,r6
  80b4d4:	103f6026 	beq	r2,zero,80b258 <__alt_mem_onchip_mem+0xff803258>
  80b4d8:	213fffc4 	addi	r4,r4,-1
  80b4dc:	2000931e 	bne	r4,zero,80b72c <__adddf3+0x550>
  80b4e0:	898d883a 	add	r6,r17,r6
  80b4e4:	3463803a 	cmpltu	r17,r6,r17
  80b4e8:	4251883a 	add	r8,r8,r9
  80b4ec:	8a11883a 	add	r8,r17,r8
  80b4f0:	3023883a 	mov	r17,r6
  80b4f4:	003fd806 	br	80b458 <__alt_mem_onchip_mem+0xff803458>
  80b4f8:	1800541e 	bne	r3,zero,80b64c <__adddf3+0x470>
  80b4fc:	80800044 	addi	r2,r16,1
  80b500:	1081ffcc 	andi	r2,r2,2047
  80b504:	00c00044 	movi	r3,1
  80b508:	1880a00e 	bge	r3,r2,80b78c <__adddf3+0x5b0>
  80b50c:	8989c83a 	sub	r4,r17,r6
  80b510:	8905803a 	cmpltu	r2,r17,r4
  80b514:	4267c83a 	sub	r19,r8,r9
  80b518:	98a7c83a 	sub	r19,r19,r2
  80b51c:	9880202c 	andhi	r2,r19,128
  80b520:	10006326 	beq	r2,zero,80b6b0 <__adddf3+0x4d4>
  80b524:	3463c83a 	sub	r17,r6,r17
  80b528:	4a07c83a 	sub	r3,r9,r8
  80b52c:	344d803a 	cmpltu	r6,r6,r17
  80b530:	19a7c83a 	sub	r19,r3,r6
  80b534:	3825883a 	mov	r18,r7
  80b538:	983f8a1e 	bne	r19,zero,80b364 <__alt_mem_onchip_mem+0xff803364>
  80b53c:	8809883a 	mov	r4,r17
  80b540:	080d7e00 	call	80d7e0 <__clzsi2>
  80b544:	10800804 	addi	r2,r2,32
  80b548:	10fffe04 	addi	r3,r2,-8
  80b54c:	010007c4 	movi	r4,31
  80b550:	20ff890e 	bge	r4,r3,80b378 <__alt_mem_onchip_mem+0xff803378>
  80b554:	10bff604 	addi	r2,r2,-40
  80b558:	8884983a 	sll	r2,r17,r2
  80b55c:	0023883a 	mov	r17,zero
  80b560:	1c3f8c0e 	bge	r3,r16,80b394 <__alt_mem_onchip_mem+0xff803394>
  80b564:	023fe034 	movhi	r8,65408
  80b568:	423fffc4 	addi	r8,r8,-1
  80b56c:	80e1c83a 	sub	r16,r16,r3
  80b570:	1210703a 	and	r8,r2,r8
  80b574:	003f3806 	br	80b258 <__alt_mem_onchip_mem+0xff803258>
  80b578:	9007883a 	mov	r3,r18
  80b57c:	0011883a 	mov	r8,zero
  80b580:	0005883a 	mov	r2,zero
  80b584:	003f4c06 	br	80b2b8 <__alt_mem_onchip_mem+0xff8032b8>
  80b588:	498cb03a 	or	r6,r9,r6
  80b58c:	300cc03a 	cmpne	r6,r6,zero
  80b590:	0007883a 	mov	r3,zero
  80b594:	003f6806 	br	80b338 <__alt_mem_onchip_mem+0xff803338>
  80b598:	20009c1e 	bne	r4,zero,80b80c <__adddf3+0x630>
  80b59c:	80800044 	addi	r2,r16,1
  80b5a0:	1141ffcc 	andi	r5,r2,2047
  80b5a4:	01000044 	movi	r4,1
  80b5a8:	2140670e 	bge	r4,r5,80b748 <__adddf3+0x56c>
  80b5ac:	0101ffc4 	movi	r4,2047
  80b5b0:	11007f26 	beq	r2,r4,80b7b0 <__adddf3+0x5d4>
  80b5b4:	898d883a 	add	r6,r17,r6
  80b5b8:	4247883a 	add	r3,r8,r9
  80b5bc:	3451803a 	cmpltu	r8,r6,r17
  80b5c0:	40d1883a 	add	r8,r8,r3
  80b5c4:	402297fa 	slli	r17,r8,31
  80b5c8:	300cd07a 	srli	r6,r6,1
  80b5cc:	4010d07a 	srli	r8,r8,1
  80b5d0:	1021883a 	mov	r16,r2
  80b5d4:	89a2b03a 	or	r17,r17,r6
  80b5d8:	003f1f06 	br	80b258 <__alt_mem_onchip_mem+0xff803258>
  80b5dc:	0081ffc4 	movi	r2,2047
  80b5e0:	80bf481e 	bne	r16,r2,80b304 <__alt_mem_onchip_mem+0xff803304>
  80b5e4:	003f1c06 	br	80b258 <__alt_mem_onchip_mem+0xff803258>
  80b5e8:	843ff844 	addi	r16,r16,-31
  80b5ec:	01000804 	movi	r4,32
  80b5f0:	1406d83a 	srl	r3,r2,r16
  80b5f4:	41005026 	beq	r8,r4,80b738 <__adddf3+0x55c>
  80b5f8:	01001004 	movi	r4,64
  80b5fc:	2211c83a 	sub	r8,r4,r8
  80b600:	1204983a 	sll	r2,r2,r8
  80b604:	88a2b03a 	or	r17,r17,r2
  80b608:	8822c03a 	cmpne	r17,r17,zero
  80b60c:	1c62b03a 	or	r17,r3,r17
  80b610:	0011883a 	mov	r8,zero
  80b614:	0021883a 	mov	r16,zero
  80b618:	003f7106 	br	80b3e0 <__alt_mem_onchip_mem+0xff8033e0>
  80b61c:	193ff804 	addi	r4,r3,-32
  80b620:	00800804 	movi	r2,32
  80b624:	4908d83a 	srl	r4,r9,r4
  80b628:	18804526 	beq	r3,r2,80b740 <__adddf3+0x564>
  80b62c:	00801004 	movi	r2,64
  80b630:	10c5c83a 	sub	r2,r2,r3
  80b634:	4886983a 	sll	r3,r9,r2
  80b638:	198cb03a 	or	r6,r3,r6
  80b63c:	300cc03a 	cmpne	r6,r6,zero
  80b640:	218cb03a 	or	r6,r4,r6
  80b644:	0007883a 	mov	r3,zero
  80b648:	003f3b06 	br	80b338 <__alt_mem_onchip_mem+0xff803338>
  80b64c:	80002a26 	beq	r16,zero,80b6f8 <__adddf3+0x51c>
  80b650:	0101ffc4 	movi	r4,2047
  80b654:	11006826 	beq	r2,r4,80b7f8 <__adddf3+0x61c>
  80b658:	00c7c83a 	sub	r3,zero,r3
  80b65c:	42002034 	orhi	r8,r8,128
  80b660:	01000e04 	movi	r4,56
  80b664:	20c07c16 	blt	r4,r3,80b858 <__adddf3+0x67c>
  80b668:	010007c4 	movi	r4,31
  80b66c:	20c0da16 	blt	r4,r3,80b9d8 <__adddf3+0x7fc>
  80b670:	01000804 	movi	r4,32
  80b674:	20c9c83a 	sub	r4,r4,r3
  80b678:	4114983a 	sll	r10,r8,r4
  80b67c:	88cad83a 	srl	r5,r17,r3
  80b680:	8908983a 	sll	r4,r17,r4
  80b684:	40c6d83a 	srl	r3,r8,r3
  80b688:	5162b03a 	or	r17,r10,r5
  80b68c:	2008c03a 	cmpne	r4,r4,zero
  80b690:	8922b03a 	or	r17,r17,r4
  80b694:	3463c83a 	sub	r17,r6,r17
  80b698:	48c7c83a 	sub	r3,r9,r3
  80b69c:	344d803a 	cmpltu	r6,r6,r17
  80b6a0:	1991c83a 	sub	r8,r3,r6
  80b6a4:	1021883a 	mov	r16,r2
  80b6a8:	3825883a 	mov	r18,r7
  80b6ac:	003f2706 	br	80b34c <__alt_mem_onchip_mem+0xff80334c>
  80b6b0:	24d0b03a 	or	r8,r4,r19
  80b6b4:	40001b1e 	bne	r8,zero,80b724 <__adddf3+0x548>
  80b6b8:	0005883a 	mov	r2,zero
  80b6bc:	0007883a 	mov	r3,zero
  80b6c0:	0021883a 	mov	r16,zero
  80b6c4:	003f4d06 	br	80b3fc <__alt_mem_onchip_mem+0xff8033fc>
  80b6c8:	008007c4 	movi	r2,31
  80b6cc:	11003c16 	blt	r2,r4,80b7c0 <__adddf3+0x5e4>
  80b6d0:	00800804 	movi	r2,32
  80b6d4:	1105c83a 	sub	r2,r2,r4
  80b6d8:	488e983a 	sll	r7,r9,r2
  80b6dc:	310ad83a 	srl	r5,r6,r4
  80b6e0:	3084983a 	sll	r2,r6,r2
  80b6e4:	4912d83a 	srl	r9,r9,r4
  80b6e8:	394ab03a 	or	r5,r7,r5
  80b6ec:	1004c03a 	cmpne	r2,r2,zero
  80b6f0:	288ab03a 	or	r5,r5,r2
  80b6f4:	003f5306 	br	80b444 <__alt_mem_onchip_mem+0xff803444>
  80b6f8:	4448b03a 	or	r4,r8,r17
  80b6fc:	20003e26 	beq	r4,zero,80b7f8 <__adddf3+0x61c>
  80b700:	00c6303a 	nor	r3,zero,r3
  80b704:	18003a1e 	bne	r3,zero,80b7f0 <__adddf3+0x614>
  80b708:	3463c83a 	sub	r17,r6,r17
  80b70c:	4a07c83a 	sub	r3,r9,r8
  80b710:	344d803a 	cmpltu	r6,r6,r17
  80b714:	1991c83a 	sub	r8,r3,r6
  80b718:	1021883a 	mov	r16,r2
  80b71c:	3825883a 	mov	r18,r7
  80b720:	003f0a06 	br	80b34c <__alt_mem_onchip_mem+0xff80334c>
  80b724:	2023883a 	mov	r17,r4
  80b728:	003f0d06 	br	80b360 <__alt_mem_onchip_mem+0xff803360>
  80b72c:	0081ffc4 	movi	r2,2047
  80b730:	80bf3f1e 	bne	r16,r2,80b430 <__alt_mem_onchip_mem+0xff803430>
  80b734:	003ec806 	br	80b258 <__alt_mem_onchip_mem+0xff803258>
  80b738:	0005883a 	mov	r2,zero
  80b73c:	003fb106 	br	80b604 <__alt_mem_onchip_mem+0xff803604>
  80b740:	0007883a 	mov	r3,zero
  80b744:	003fbc06 	br	80b638 <__alt_mem_onchip_mem+0xff803638>
  80b748:	4444b03a 	or	r2,r8,r17
  80b74c:	8000871e 	bne	r16,zero,80b96c <__adddf3+0x790>
  80b750:	1000ba26 	beq	r2,zero,80ba3c <__adddf3+0x860>
  80b754:	4984b03a 	or	r2,r9,r6
  80b758:	103ebf26 	beq	r2,zero,80b258 <__alt_mem_onchip_mem+0xff803258>
  80b75c:	8985883a 	add	r2,r17,r6
  80b760:	4247883a 	add	r3,r8,r9
  80b764:	1451803a 	cmpltu	r8,r2,r17
  80b768:	40d1883a 	add	r8,r8,r3
  80b76c:	40c0202c 	andhi	r3,r8,128
  80b770:	1023883a 	mov	r17,r2
  80b774:	183f1a26 	beq	r3,zero,80b3e0 <__alt_mem_onchip_mem+0xff8033e0>
  80b778:	00bfe034 	movhi	r2,65408
  80b77c:	10bfffc4 	addi	r2,r2,-1
  80b780:	2021883a 	mov	r16,r4
  80b784:	4090703a 	and	r8,r8,r2
  80b788:	003eb306 	br	80b258 <__alt_mem_onchip_mem+0xff803258>
  80b78c:	4444b03a 	or	r2,r8,r17
  80b790:	8000291e 	bne	r16,zero,80b838 <__adddf3+0x65c>
  80b794:	10004b1e 	bne	r2,zero,80b8c4 <__adddf3+0x6e8>
  80b798:	4990b03a 	or	r8,r9,r6
  80b79c:	40008b26 	beq	r8,zero,80b9cc <__adddf3+0x7f0>
  80b7a0:	4811883a 	mov	r8,r9
  80b7a4:	3023883a 	mov	r17,r6
  80b7a8:	3825883a 	mov	r18,r7
  80b7ac:	003eaa06 	br	80b258 <__alt_mem_onchip_mem+0xff803258>
  80b7b0:	1021883a 	mov	r16,r2
  80b7b4:	0011883a 	mov	r8,zero
  80b7b8:	0005883a 	mov	r2,zero
  80b7bc:	003f0f06 	br	80b3fc <__alt_mem_onchip_mem+0xff8033fc>
  80b7c0:	217ff804 	addi	r5,r4,-32
  80b7c4:	00800804 	movi	r2,32
  80b7c8:	494ad83a 	srl	r5,r9,r5
  80b7cc:	20807d26 	beq	r4,r2,80b9c4 <__adddf3+0x7e8>
  80b7d0:	00801004 	movi	r2,64
  80b7d4:	1109c83a 	sub	r4,r2,r4
  80b7d8:	4912983a 	sll	r9,r9,r4
  80b7dc:	498cb03a 	or	r6,r9,r6
  80b7e0:	300cc03a 	cmpne	r6,r6,zero
  80b7e4:	298ab03a 	or	r5,r5,r6
  80b7e8:	0013883a 	mov	r9,zero
  80b7ec:	003f1506 	br	80b444 <__alt_mem_onchip_mem+0xff803444>
  80b7f0:	0101ffc4 	movi	r4,2047
  80b7f4:	113f9a1e 	bne	r2,r4,80b660 <__alt_mem_onchip_mem+0xff803660>
  80b7f8:	4811883a 	mov	r8,r9
  80b7fc:	3023883a 	mov	r17,r6
  80b800:	1021883a 	mov	r16,r2
  80b804:	3825883a 	mov	r18,r7
  80b808:	003e9306 	br	80b258 <__alt_mem_onchip_mem+0xff803258>
  80b80c:	8000161e 	bne	r16,zero,80b868 <__adddf3+0x68c>
  80b810:	444ab03a 	or	r5,r8,r17
  80b814:	28005126 	beq	r5,zero,80b95c <__adddf3+0x780>
  80b818:	0108303a 	nor	r4,zero,r4
  80b81c:	20004d1e 	bne	r4,zero,80b954 <__adddf3+0x778>
  80b820:	89a3883a 	add	r17,r17,r6
  80b824:	4253883a 	add	r9,r8,r9
  80b828:	898d803a 	cmpltu	r6,r17,r6
  80b82c:	3251883a 	add	r8,r6,r9
  80b830:	1021883a 	mov	r16,r2
  80b834:	003f0806 	br	80b458 <__alt_mem_onchip_mem+0xff803458>
  80b838:	1000301e 	bne	r2,zero,80b8fc <__adddf3+0x720>
  80b83c:	4984b03a 	or	r2,r9,r6
  80b840:	10007126 	beq	r2,zero,80ba08 <__adddf3+0x82c>
  80b844:	4811883a 	mov	r8,r9
  80b848:	3023883a 	mov	r17,r6
  80b84c:	3825883a 	mov	r18,r7
  80b850:	0401ffc4 	movi	r16,2047
  80b854:	003e8006 	br	80b258 <__alt_mem_onchip_mem+0xff803258>
  80b858:	4462b03a 	or	r17,r8,r17
  80b85c:	8822c03a 	cmpne	r17,r17,zero
  80b860:	0007883a 	mov	r3,zero
  80b864:	003f8b06 	br	80b694 <__alt_mem_onchip_mem+0xff803694>
  80b868:	0141ffc4 	movi	r5,2047
  80b86c:	11403b26 	beq	r2,r5,80b95c <__adddf3+0x780>
  80b870:	0109c83a 	sub	r4,zero,r4
  80b874:	42002034 	orhi	r8,r8,128
  80b878:	01400e04 	movi	r5,56
  80b87c:	29006716 	blt	r5,r4,80ba1c <__adddf3+0x840>
  80b880:	014007c4 	movi	r5,31
  80b884:	29007016 	blt	r5,r4,80ba48 <__adddf3+0x86c>
  80b888:	01400804 	movi	r5,32
  80b88c:	290bc83a 	sub	r5,r5,r4
  80b890:	4154983a 	sll	r10,r8,r5
  80b894:	890ed83a 	srl	r7,r17,r4
  80b898:	894a983a 	sll	r5,r17,r5
  80b89c:	4108d83a 	srl	r4,r8,r4
  80b8a0:	51e2b03a 	or	r17,r10,r7
  80b8a4:	280ac03a 	cmpne	r5,r5,zero
  80b8a8:	8962b03a 	or	r17,r17,r5
  80b8ac:	89a3883a 	add	r17,r17,r6
  80b8b0:	2253883a 	add	r9,r4,r9
  80b8b4:	898d803a 	cmpltu	r6,r17,r6
  80b8b8:	3251883a 	add	r8,r6,r9
  80b8bc:	1021883a 	mov	r16,r2
  80b8c0:	003ee506 	br	80b458 <__alt_mem_onchip_mem+0xff803458>
  80b8c4:	4984b03a 	or	r2,r9,r6
  80b8c8:	103e6326 	beq	r2,zero,80b258 <__alt_mem_onchip_mem+0xff803258>
  80b8cc:	8987c83a 	sub	r3,r17,r6
  80b8d0:	88c9803a 	cmpltu	r4,r17,r3
  80b8d4:	4245c83a 	sub	r2,r8,r9
  80b8d8:	1105c83a 	sub	r2,r2,r4
  80b8dc:	1100202c 	andhi	r4,r2,128
  80b8e0:	203ebb26 	beq	r4,zero,80b3d0 <__alt_mem_onchip_mem+0xff8033d0>
  80b8e4:	3463c83a 	sub	r17,r6,r17
  80b8e8:	4a07c83a 	sub	r3,r9,r8
  80b8ec:	344d803a 	cmpltu	r6,r6,r17
  80b8f0:	1991c83a 	sub	r8,r3,r6
  80b8f4:	3825883a 	mov	r18,r7
  80b8f8:	003e5706 	br	80b258 <__alt_mem_onchip_mem+0xff803258>
  80b8fc:	4984b03a 	or	r2,r9,r6
  80b900:	10002e26 	beq	r2,zero,80b9bc <__adddf3+0x7e0>
  80b904:	4004d0fa 	srli	r2,r8,3
  80b908:	8822d0fa 	srli	r17,r17,3
  80b90c:	4010977a 	slli	r8,r8,29
  80b910:	10c0022c 	andhi	r3,r2,8
  80b914:	4462b03a 	or	r17,r8,r17
  80b918:	18000826 	beq	r3,zero,80b93c <__adddf3+0x760>
  80b91c:	4808d0fa 	srli	r4,r9,3
  80b920:	20c0022c 	andhi	r3,r4,8
  80b924:	1800051e 	bne	r3,zero,80b93c <__adddf3+0x760>
  80b928:	300cd0fa 	srli	r6,r6,3
  80b92c:	4806977a 	slli	r3,r9,29
  80b930:	2005883a 	mov	r2,r4
  80b934:	3825883a 	mov	r18,r7
  80b938:	19a2b03a 	or	r17,r3,r6
  80b93c:	8810d77a 	srli	r8,r17,29
  80b940:	100490fa 	slli	r2,r2,3
  80b944:	882290fa 	slli	r17,r17,3
  80b948:	0401ffc4 	movi	r16,2047
  80b94c:	4090b03a 	or	r8,r8,r2
  80b950:	003e4106 	br	80b258 <__alt_mem_onchip_mem+0xff803258>
  80b954:	0141ffc4 	movi	r5,2047
  80b958:	117fc71e 	bne	r2,r5,80b878 <__alt_mem_onchip_mem+0xff803878>
  80b95c:	4811883a 	mov	r8,r9
  80b960:	3023883a 	mov	r17,r6
  80b964:	1021883a 	mov	r16,r2
  80b968:	003e3b06 	br	80b258 <__alt_mem_onchip_mem+0xff803258>
  80b96c:	10002f26 	beq	r2,zero,80ba2c <__adddf3+0x850>
  80b970:	4984b03a 	or	r2,r9,r6
  80b974:	10001126 	beq	r2,zero,80b9bc <__adddf3+0x7e0>
  80b978:	4004d0fa 	srli	r2,r8,3
  80b97c:	8822d0fa 	srli	r17,r17,3
  80b980:	4010977a 	slli	r8,r8,29
  80b984:	10c0022c 	andhi	r3,r2,8
  80b988:	4462b03a 	or	r17,r8,r17
  80b98c:	183feb26 	beq	r3,zero,80b93c <__alt_mem_onchip_mem+0xff80393c>
  80b990:	4808d0fa 	srli	r4,r9,3
  80b994:	20c0022c 	andhi	r3,r4,8
  80b998:	183fe81e 	bne	r3,zero,80b93c <__alt_mem_onchip_mem+0xff80393c>
  80b99c:	300cd0fa 	srli	r6,r6,3
  80b9a0:	4806977a 	slli	r3,r9,29
  80b9a4:	2005883a 	mov	r2,r4
  80b9a8:	19a2b03a 	or	r17,r3,r6
  80b9ac:	003fe306 	br	80b93c <__alt_mem_onchip_mem+0xff80393c>
  80b9b0:	0011883a 	mov	r8,zero
  80b9b4:	0005883a 	mov	r2,zero
  80b9b8:	003e3f06 	br	80b2b8 <__alt_mem_onchip_mem+0xff8032b8>
  80b9bc:	0401ffc4 	movi	r16,2047
  80b9c0:	003e2506 	br	80b258 <__alt_mem_onchip_mem+0xff803258>
  80b9c4:	0013883a 	mov	r9,zero
  80b9c8:	003f8406 	br	80b7dc <__alt_mem_onchip_mem+0xff8037dc>
  80b9cc:	0005883a 	mov	r2,zero
  80b9d0:	0007883a 	mov	r3,zero
  80b9d4:	003e8906 	br	80b3fc <__alt_mem_onchip_mem+0xff8033fc>
  80b9d8:	197ff804 	addi	r5,r3,-32
  80b9dc:	01000804 	movi	r4,32
  80b9e0:	414ad83a 	srl	r5,r8,r5
  80b9e4:	19002426 	beq	r3,r4,80ba78 <__adddf3+0x89c>
  80b9e8:	01001004 	movi	r4,64
  80b9ec:	20c7c83a 	sub	r3,r4,r3
  80b9f0:	40c6983a 	sll	r3,r8,r3
  80b9f4:	1c46b03a 	or	r3,r3,r17
  80b9f8:	1806c03a 	cmpne	r3,r3,zero
  80b9fc:	28e2b03a 	or	r17,r5,r3
  80ba00:	0007883a 	mov	r3,zero
  80ba04:	003f2306 	br	80b694 <__alt_mem_onchip_mem+0xff803694>
  80ba08:	0007883a 	mov	r3,zero
  80ba0c:	5811883a 	mov	r8,r11
  80ba10:	00bfffc4 	movi	r2,-1
  80ba14:	0401ffc4 	movi	r16,2047
  80ba18:	003e7806 	br	80b3fc <__alt_mem_onchip_mem+0xff8033fc>
  80ba1c:	4462b03a 	or	r17,r8,r17
  80ba20:	8822c03a 	cmpne	r17,r17,zero
  80ba24:	0009883a 	mov	r4,zero
  80ba28:	003fa006 	br	80b8ac <__alt_mem_onchip_mem+0xff8038ac>
  80ba2c:	4811883a 	mov	r8,r9
  80ba30:	3023883a 	mov	r17,r6
  80ba34:	0401ffc4 	movi	r16,2047
  80ba38:	003e0706 	br	80b258 <__alt_mem_onchip_mem+0xff803258>
  80ba3c:	4811883a 	mov	r8,r9
  80ba40:	3023883a 	mov	r17,r6
  80ba44:	003e0406 	br	80b258 <__alt_mem_onchip_mem+0xff803258>
  80ba48:	21fff804 	addi	r7,r4,-32
  80ba4c:	01400804 	movi	r5,32
  80ba50:	41ced83a 	srl	r7,r8,r7
  80ba54:	21400a26 	beq	r4,r5,80ba80 <__adddf3+0x8a4>
  80ba58:	01401004 	movi	r5,64
  80ba5c:	2909c83a 	sub	r4,r5,r4
  80ba60:	4108983a 	sll	r4,r8,r4
  80ba64:	2448b03a 	or	r4,r4,r17
  80ba68:	2008c03a 	cmpne	r4,r4,zero
  80ba6c:	3922b03a 	or	r17,r7,r4
  80ba70:	0009883a 	mov	r4,zero
  80ba74:	003f8d06 	br	80b8ac <__alt_mem_onchip_mem+0xff8038ac>
  80ba78:	0007883a 	mov	r3,zero
  80ba7c:	003fdd06 	br	80b9f4 <__alt_mem_onchip_mem+0xff8039f4>
  80ba80:	0009883a 	mov	r4,zero
  80ba84:	003ff706 	br	80ba64 <__alt_mem_onchip_mem+0xff803a64>

0080ba88 <__divdf3>:
  80ba88:	defff204 	addi	sp,sp,-56
  80ba8c:	dd400915 	stw	r21,36(sp)
  80ba90:	282ad53a 	srli	r21,r5,20
  80ba94:	dd000815 	stw	r20,32(sp)
  80ba98:	2828d7fa 	srli	r20,r5,31
  80ba9c:	dc000415 	stw	r16,16(sp)
  80baa0:	04000434 	movhi	r16,16
  80baa4:	df000c15 	stw	fp,48(sp)
  80baa8:	843fffc4 	addi	r16,r16,-1
  80baac:	dfc00d15 	stw	ra,52(sp)
  80bab0:	ddc00b15 	stw	r23,44(sp)
  80bab4:	dd800a15 	stw	r22,40(sp)
  80bab8:	dcc00715 	stw	r19,28(sp)
  80babc:	dc800615 	stw	r18,24(sp)
  80bac0:	dc400515 	stw	r17,20(sp)
  80bac4:	ad41ffcc 	andi	r21,r21,2047
  80bac8:	2c20703a 	and	r16,r5,r16
  80bacc:	a7003fcc 	andi	fp,r20,255
  80bad0:	a8006126 	beq	r21,zero,80bc58 <__divdf3+0x1d0>
  80bad4:	0081ffc4 	movi	r2,2047
  80bad8:	2025883a 	mov	r18,r4
  80badc:	a8803726 	beq	r21,r2,80bbbc <__divdf3+0x134>
  80bae0:	80800434 	orhi	r2,r16,16
  80bae4:	100490fa 	slli	r2,r2,3
  80bae8:	2020d77a 	srli	r16,r4,29
  80baec:	202490fa 	slli	r18,r4,3
  80baf0:	ad7f0044 	addi	r21,r21,-1023
  80baf4:	80a0b03a 	or	r16,r16,r2
  80baf8:	0027883a 	mov	r19,zero
  80bafc:	0013883a 	mov	r9,zero
  80bb00:	3804d53a 	srli	r2,r7,20
  80bb04:	382cd7fa 	srli	r22,r7,31
  80bb08:	04400434 	movhi	r17,16
  80bb0c:	8c7fffc4 	addi	r17,r17,-1
  80bb10:	1081ffcc 	andi	r2,r2,2047
  80bb14:	3011883a 	mov	r8,r6
  80bb18:	3c62703a 	and	r17,r7,r17
  80bb1c:	b5c03fcc 	andi	r23,r22,255
  80bb20:	10006c26 	beq	r2,zero,80bcd4 <__divdf3+0x24c>
  80bb24:	00c1ffc4 	movi	r3,2047
  80bb28:	10c06426 	beq	r2,r3,80bcbc <__divdf3+0x234>
  80bb2c:	88c00434 	orhi	r3,r17,16
  80bb30:	180690fa 	slli	r3,r3,3
  80bb34:	3022d77a 	srli	r17,r6,29
  80bb38:	301090fa 	slli	r8,r6,3
  80bb3c:	10bf0044 	addi	r2,r2,-1023
  80bb40:	88e2b03a 	or	r17,r17,r3
  80bb44:	000f883a 	mov	r7,zero
  80bb48:	a58cf03a 	xor	r6,r20,r22
  80bb4c:	3cc8b03a 	or	r4,r7,r19
  80bb50:	a8abc83a 	sub	r21,r21,r2
  80bb54:	008003c4 	movi	r2,15
  80bb58:	3007883a 	mov	r3,r6
  80bb5c:	34c03fcc 	andi	r19,r6,255
  80bb60:	11009036 	bltu	r2,r4,80bda4 <__divdf3+0x31c>
  80bb64:	200890ba 	slli	r4,r4,2
  80bb68:	00802074 	movhi	r2,129
  80bb6c:	10aedf04 	addi	r2,r2,-17540
  80bb70:	2089883a 	add	r4,r4,r2
  80bb74:	20800017 	ldw	r2,0(r4)
  80bb78:	1000683a 	jmp	r2
  80bb7c:	0080bda4 	muli	r2,zero,758
  80bb80:	0080bbf4 	movhi	r2,751
  80bb84:	0080bd94 	movui	r2,758
  80bb88:	0080bbe8 	cmpgeui	r2,zero,751
  80bb8c:	0080bd94 	movui	r2,758
  80bb90:	0080bd68 	cmpgeui	r2,zero,757
  80bb94:	0080bd94 	movui	r2,758
  80bb98:	0080bbe8 	cmpgeui	r2,zero,751
  80bb9c:	0080bbf4 	movhi	r2,751
  80bba0:	0080bbf4 	movhi	r2,751
  80bba4:	0080bd68 	cmpgeui	r2,zero,757
  80bba8:	0080bbe8 	cmpgeui	r2,zero,751
  80bbac:	0080bbd8 	cmpnei	r2,zero,751
  80bbb0:	0080bbd8 	cmpnei	r2,zero,751
  80bbb4:	0080bbd8 	cmpnei	r2,zero,751
  80bbb8:	0080c088 	cmpgei	r2,zero,770
  80bbbc:	2404b03a 	or	r2,r4,r16
  80bbc0:	1000661e 	bne	r2,zero,80bd5c <__divdf3+0x2d4>
  80bbc4:	04c00204 	movi	r19,8
  80bbc8:	0021883a 	mov	r16,zero
  80bbcc:	0025883a 	mov	r18,zero
  80bbd0:	02400084 	movi	r9,2
  80bbd4:	003fca06 	br	80bb00 <__alt_mem_onchip_mem+0xff803b00>
  80bbd8:	8023883a 	mov	r17,r16
  80bbdc:	9011883a 	mov	r8,r18
  80bbe0:	e02f883a 	mov	r23,fp
  80bbe4:	480f883a 	mov	r7,r9
  80bbe8:	00800084 	movi	r2,2
  80bbec:	3881311e 	bne	r7,r2,80c0b4 <__divdf3+0x62c>
  80bbf0:	b827883a 	mov	r19,r23
  80bbf4:	98c0004c 	andi	r3,r19,1
  80bbf8:	0081ffc4 	movi	r2,2047
  80bbfc:	000b883a 	mov	r5,zero
  80bc00:	0025883a 	mov	r18,zero
  80bc04:	1004953a 	slli	r2,r2,20
  80bc08:	18c03fcc 	andi	r3,r3,255
  80bc0c:	04400434 	movhi	r17,16
  80bc10:	8c7fffc4 	addi	r17,r17,-1
  80bc14:	180697fa 	slli	r3,r3,31
  80bc18:	2c4a703a 	and	r5,r5,r17
  80bc1c:	288ab03a 	or	r5,r5,r2
  80bc20:	28c6b03a 	or	r3,r5,r3
  80bc24:	9005883a 	mov	r2,r18
  80bc28:	dfc00d17 	ldw	ra,52(sp)
  80bc2c:	df000c17 	ldw	fp,48(sp)
  80bc30:	ddc00b17 	ldw	r23,44(sp)
  80bc34:	dd800a17 	ldw	r22,40(sp)
  80bc38:	dd400917 	ldw	r21,36(sp)
  80bc3c:	dd000817 	ldw	r20,32(sp)
  80bc40:	dcc00717 	ldw	r19,28(sp)
  80bc44:	dc800617 	ldw	r18,24(sp)
  80bc48:	dc400517 	ldw	r17,20(sp)
  80bc4c:	dc000417 	ldw	r16,16(sp)
  80bc50:	dec00e04 	addi	sp,sp,56
  80bc54:	f800283a 	ret
  80bc58:	2404b03a 	or	r2,r4,r16
  80bc5c:	2027883a 	mov	r19,r4
  80bc60:	10003926 	beq	r2,zero,80bd48 <__divdf3+0x2c0>
  80bc64:	80012e26 	beq	r16,zero,80c120 <__divdf3+0x698>
  80bc68:	8009883a 	mov	r4,r16
  80bc6c:	d9800315 	stw	r6,12(sp)
  80bc70:	d9c00215 	stw	r7,8(sp)
  80bc74:	080d7e00 	call	80d7e0 <__clzsi2>
  80bc78:	d9800317 	ldw	r6,12(sp)
  80bc7c:	d9c00217 	ldw	r7,8(sp)
  80bc80:	113ffd44 	addi	r4,r2,-11
  80bc84:	00c00704 	movi	r3,28
  80bc88:	19012116 	blt	r3,r4,80c110 <__divdf3+0x688>
  80bc8c:	00c00744 	movi	r3,29
  80bc90:	147ffe04 	addi	r17,r2,-8
  80bc94:	1907c83a 	sub	r3,r3,r4
  80bc98:	8460983a 	sll	r16,r16,r17
  80bc9c:	98c6d83a 	srl	r3,r19,r3
  80bca0:	9c64983a 	sll	r18,r19,r17
  80bca4:	1c20b03a 	or	r16,r3,r16
  80bca8:	1080fcc4 	addi	r2,r2,1011
  80bcac:	00abc83a 	sub	r21,zero,r2
  80bcb0:	0027883a 	mov	r19,zero
  80bcb4:	0013883a 	mov	r9,zero
  80bcb8:	003f9106 	br	80bb00 <__alt_mem_onchip_mem+0xff803b00>
  80bcbc:	3446b03a 	or	r3,r6,r17
  80bcc0:	18001f1e 	bne	r3,zero,80bd40 <__divdf3+0x2b8>
  80bcc4:	0023883a 	mov	r17,zero
  80bcc8:	0011883a 	mov	r8,zero
  80bccc:	01c00084 	movi	r7,2
  80bcd0:	003f9d06 	br	80bb48 <__alt_mem_onchip_mem+0xff803b48>
  80bcd4:	3446b03a 	or	r3,r6,r17
  80bcd8:	18001526 	beq	r3,zero,80bd30 <__divdf3+0x2a8>
  80bcdc:	88011b26 	beq	r17,zero,80c14c <__divdf3+0x6c4>
  80bce0:	8809883a 	mov	r4,r17
  80bce4:	d9800315 	stw	r6,12(sp)
  80bce8:	da400115 	stw	r9,4(sp)
  80bcec:	080d7e00 	call	80d7e0 <__clzsi2>
  80bcf0:	d9800317 	ldw	r6,12(sp)
  80bcf4:	da400117 	ldw	r9,4(sp)
  80bcf8:	113ffd44 	addi	r4,r2,-11
  80bcfc:	00c00704 	movi	r3,28
  80bd00:	19010e16 	blt	r3,r4,80c13c <__divdf3+0x6b4>
  80bd04:	00c00744 	movi	r3,29
  80bd08:	123ffe04 	addi	r8,r2,-8
  80bd0c:	1907c83a 	sub	r3,r3,r4
  80bd10:	8a22983a 	sll	r17,r17,r8
  80bd14:	30c6d83a 	srl	r3,r6,r3
  80bd18:	3210983a 	sll	r8,r6,r8
  80bd1c:	1c62b03a 	or	r17,r3,r17
  80bd20:	1080fcc4 	addi	r2,r2,1011
  80bd24:	0085c83a 	sub	r2,zero,r2
  80bd28:	000f883a 	mov	r7,zero
  80bd2c:	003f8606 	br	80bb48 <__alt_mem_onchip_mem+0xff803b48>
  80bd30:	0023883a 	mov	r17,zero
  80bd34:	0011883a 	mov	r8,zero
  80bd38:	01c00044 	movi	r7,1
  80bd3c:	003f8206 	br	80bb48 <__alt_mem_onchip_mem+0xff803b48>
  80bd40:	01c000c4 	movi	r7,3
  80bd44:	003f8006 	br	80bb48 <__alt_mem_onchip_mem+0xff803b48>
  80bd48:	04c00104 	movi	r19,4
  80bd4c:	0021883a 	mov	r16,zero
  80bd50:	0025883a 	mov	r18,zero
  80bd54:	02400044 	movi	r9,1
  80bd58:	003f6906 	br	80bb00 <__alt_mem_onchip_mem+0xff803b00>
  80bd5c:	04c00304 	movi	r19,12
  80bd60:	024000c4 	movi	r9,3
  80bd64:	003f6606 	br	80bb00 <__alt_mem_onchip_mem+0xff803b00>
  80bd68:	01400434 	movhi	r5,16
  80bd6c:	0007883a 	mov	r3,zero
  80bd70:	297fffc4 	addi	r5,r5,-1
  80bd74:	04bfffc4 	movi	r18,-1
  80bd78:	0081ffc4 	movi	r2,2047
  80bd7c:	003fa106 	br	80bc04 <__alt_mem_onchip_mem+0xff803c04>
  80bd80:	00c00044 	movi	r3,1
  80bd84:	1887c83a 	sub	r3,r3,r2
  80bd88:	01000e04 	movi	r4,56
  80bd8c:	20c1210e 	bge	r4,r3,80c214 <__divdf3+0x78c>
  80bd90:	98c0004c 	andi	r3,r19,1
  80bd94:	0005883a 	mov	r2,zero
  80bd98:	000b883a 	mov	r5,zero
  80bd9c:	0025883a 	mov	r18,zero
  80bda0:	003f9806 	br	80bc04 <__alt_mem_onchip_mem+0xff803c04>
  80bda4:	8c00fd36 	bltu	r17,r16,80c19c <__divdf3+0x714>
  80bda8:	8440fb26 	beq	r16,r17,80c198 <__divdf3+0x710>
  80bdac:	8007883a 	mov	r3,r16
  80bdb0:	ad7fffc4 	addi	r21,r21,-1
  80bdb4:	0021883a 	mov	r16,zero
  80bdb8:	4004d63a 	srli	r2,r8,24
  80bdbc:	8822923a 	slli	r17,r17,8
  80bdc0:	1809883a 	mov	r4,r3
  80bdc4:	402c923a 	slli	r22,r8,8
  80bdc8:	88b8b03a 	or	fp,r17,r2
  80bdcc:	e028d43a 	srli	r20,fp,16
  80bdd0:	d8c00015 	stw	r3,0(sp)
  80bdd4:	e5ffffcc 	andi	r23,fp,65535
  80bdd8:	a00b883a 	mov	r5,r20
  80bddc:	080b1200 	call	80b120 <__udivsi3>
  80bde0:	d8c00017 	ldw	r3,0(sp)
  80bde4:	a00b883a 	mov	r5,r20
  80bde8:	d8800315 	stw	r2,12(sp)
  80bdec:	1809883a 	mov	r4,r3
  80bdf0:	080b1840 	call	80b184 <__umodsi3>
  80bdf4:	d9800317 	ldw	r6,12(sp)
  80bdf8:	1006943a 	slli	r3,r2,16
  80bdfc:	9004d43a 	srli	r2,r18,16
  80be00:	b9a3383a 	mul	r17,r23,r6
  80be04:	10c4b03a 	or	r2,r2,r3
  80be08:	1440062e 	bgeu	r2,r17,80be24 <__divdf3+0x39c>
  80be0c:	1705883a 	add	r2,r2,fp
  80be10:	30ffffc4 	addi	r3,r6,-1
  80be14:	1700ee36 	bltu	r2,fp,80c1d0 <__divdf3+0x748>
  80be18:	1440ed2e 	bgeu	r2,r17,80c1d0 <__divdf3+0x748>
  80be1c:	31bfff84 	addi	r6,r6,-2
  80be20:	1705883a 	add	r2,r2,fp
  80be24:	1463c83a 	sub	r17,r2,r17
  80be28:	a00b883a 	mov	r5,r20
  80be2c:	8809883a 	mov	r4,r17
  80be30:	d9800315 	stw	r6,12(sp)
  80be34:	080b1200 	call	80b120 <__udivsi3>
  80be38:	a00b883a 	mov	r5,r20
  80be3c:	8809883a 	mov	r4,r17
  80be40:	d8800215 	stw	r2,8(sp)
  80be44:	080b1840 	call	80b184 <__umodsi3>
  80be48:	d9c00217 	ldw	r7,8(sp)
  80be4c:	1004943a 	slli	r2,r2,16
  80be50:	94bfffcc 	andi	r18,r18,65535
  80be54:	b9d1383a 	mul	r8,r23,r7
  80be58:	90a4b03a 	or	r18,r18,r2
  80be5c:	d9800317 	ldw	r6,12(sp)
  80be60:	9200062e 	bgeu	r18,r8,80be7c <__divdf3+0x3f4>
  80be64:	9725883a 	add	r18,r18,fp
  80be68:	38bfffc4 	addi	r2,r7,-1
  80be6c:	9700d636 	bltu	r18,fp,80c1c8 <__divdf3+0x740>
  80be70:	9200d52e 	bgeu	r18,r8,80c1c8 <__divdf3+0x740>
  80be74:	39ffff84 	addi	r7,r7,-2
  80be78:	9725883a 	add	r18,r18,fp
  80be7c:	3004943a 	slli	r2,r6,16
  80be80:	b012d43a 	srli	r9,r22,16
  80be84:	b1bfffcc 	andi	r6,r22,65535
  80be88:	11e2b03a 	or	r17,r2,r7
  80be8c:	8806d43a 	srli	r3,r17,16
  80be90:	893fffcc 	andi	r4,r17,65535
  80be94:	218b383a 	mul	r5,r4,r6
  80be98:	30c5383a 	mul	r2,r6,r3
  80be9c:	2249383a 	mul	r4,r4,r9
  80bea0:	280ed43a 	srli	r7,r5,16
  80bea4:	9225c83a 	sub	r18,r18,r8
  80bea8:	2089883a 	add	r4,r4,r2
  80beac:	3909883a 	add	r4,r7,r4
  80beb0:	1a47383a 	mul	r3,r3,r9
  80beb4:	2080022e 	bgeu	r4,r2,80bec0 <__divdf3+0x438>
  80beb8:	00800074 	movhi	r2,1
  80bebc:	1887883a 	add	r3,r3,r2
  80bec0:	2004d43a 	srli	r2,r4,16
  80bec4:	2008943a 	slli	r4,r4,16
  80bec8:	297fffcc 	andi	r5,r5,65535
  80becc:	10c7883a 	add	r3,r2,r3
  80bed0:	2149883a 	add	r4,r4,r5
  80bed4:	90c0a536 	bltu	r18,r3,80c16c <__divdf3+0x6e4>
  80bed8:	90c0bf26 	beq	r18,r3,80c1d8 <__divdf3+0x750>
  80bedc:	90c7c83a 	sub	r3,r18,r3
  80bee0:	810fc83a 	sub	r7,r16,r4
  80bee4:	81e5803a 	cmpltu	r18,r16,r7
  80bee8:	1ca5c83a 	sub	r18,r3,r18
  80beec:	e480c126 	beq	fp,r18,80c1f4 <__divdf3+0x76c>
  80bef0:	a00b883a 	mov	r5,r20
  80bef4:	9009883a 	mov	r4,r18
  80bef8:	d9800315 	stw	r6,12(sp)
  80befc:	d9c00215 	stw	r7,8(sp)
  80bf00:	da400115 	stw	r9,4(sp)
  80bf04:	080b1200 	call	80b120 <__udivsi3>
  80bf08:	a00b883a 	mov	r5,r20
  80bf0c:	9009883a 	mov	r4,r18
  80bf10:	d8800015 	stw	r2,0(sp)
  80bf14:	080b1840 	call	80b184 <__umodsi3>
  80bf18:	d9c00217 	ldw	r7,8(sp)
  80bf1c:	da000017 	ldw	r8,0(sp)
  80bf20:	1006943a 	slli	r3,r2,16
  80bf24:	3804d43a 	srli	r2,r7,16
  80bf28:	ba21383a 	mul	r16,r23,r8
  80bf2c:	d9800317 	ldw	r6,12(sp)
  80bf30:	10c4b03a 	or	r2,r2,r3
  80bf34:	da400117 	ldw	r9,4(sp)
  80bf38:	1400062e 	bgeu	r2,r16,80bf54 <__divdf3+0x4cc>
  80bf3c:	1705883a 	add	r2,r2,fp
  80bf40:	40ffffc4 	addi	r3,r8,-1
  80bf44:	1700ad36 	bltu	r2,fp,80c1fc <__divdf3+0x774>
  80bf48:	1400ac2e 	bgeu	r2,r16,80c1fc <__divdf3+0x774>
  80bf4c:	423fff84 	addi	r8,r8,-2
  80bf50:	1705883a 	add	r2,r2,fp
  80bf54:	1421c83a 	sub	r16,r2,r16
  80bf58:	a00b883a 	mov	r5,r20
  80bf5c:	8009883a 	mov	r4,r16
  80bf60:	d9800315 	stw	r6,12(sp)
  80bf64:	d9c00215 	stw	r7,8(sp)
  80bf68:	da000015 	stw	r8,0(sp)
  80bf6c:	da400115 	stw	r9,4(sp)
  80bf70:	080b1200 	call	80b120 <__udivsi3>
  80bf74:	8009883a 	mov	r4,r16
  80bf78:	a00b883a 	mov	r5,r20
  80bf7c:	1025883a 	mov	r18,r2
  80bf80:	080b1840 	call	80b184 <__umodsi3>
  80bf84:	d9c00217 	ldw	r7,8(sp)
  80bf88:	1004943a 	slli	r2,r2,16
  80bf8c:	bcaf383a 	mul	r23,r23,r18
  80bf90:	393fffcc 	andi	r4,r7,65535
  80bf94:	2088b03a 	or	r4,r4,r2
  80bf98:	d9800317 	ldw	r6,12(sp)
  80bf9c:	da000017 	ldw	r8,0(sp)
  80bfa0:	da400117 	ldw	r9,4(sp)
  80bfa4:	25c0062e 	bgeu	r4,r23,80bfc0 <__divdf3+0x538>
  80bfa8:	2709883a 	add	r4,r4,fp
  80bfac:	90bfffc4 	addi	r2,r18,-1
  80bfb0:	27009436 	bltu	r4,fp,80c204 <__divdf3+0x77c>
  80bfb4:	25c0932e 	bgeu	r4,r23,80c204 <__divdf3+0x77c>
  80bfb8:	94bfff84 	addi	r18,r18,-2
  80bfbc:	2709883a 	add	r4,r4,fp
  80bfc0:	4004943a 	slli	r2,r8,16
  80bfc4:	25efc83a 	sub	r23,r4,r23
  80bfc8:	1490b03a 	or	r8,r2,r18
  80bfcc:	4008d43a 	srli	r4,r8,16
  80bfd0:	40ffffcc 	andi	r3,r8,65535
  80bfd4:	30c5383a 	mul	r2,r6,r3
  80bfd8:	1a47383a 	mul	r3,r3,r9
  80bfdc:	310d383a 	mul	r6,r6,r4
  80bfe0:	100ad43a 	srli	r5,r2,16
  80bfe4:	4913383a 	mul	r9,r9,r4
  80bfe8:	1987883a 	add	r3,r3,r6
  80bfec:	28c7883a 	add	r3,r5,r3
  80bff0:	1980022e 	bgeu	r3,r6,80bffc <__divdf3+0x574>
  80bff4:	01000074 	movhi	r4,1
  80bff8:	4913883a 	add	r9,r9,r4
  80bffc:	1808d43a 	srli	r4,r3,16
  80c000:	1806943a 	slli	r3,r3,16
  80c004:	10bfffcc 	andi	r2,r2,65535
  80c008:	2253883a 	add	r9,r4,r9
  80c00c:	1887883a 	add	r3,r3,r2
  80c010:	ba403836 	bltu	r23,r9,80c0f4 <__divdf3+0x66c>
  80c014:	ba403626 	beq	r23,r9,80c0f0 <__divdf3+0x668>
  80c018:	42000054 	ori	r8,r8,1
  80c01c:	a880ffc4 	addi	r2,r21,1023
  80c020:	00bf570e 	bge	zero,r2,80bd80 <__alt_mem_onchip_mem+0xff803d80>
  80c024:	40c001cc 	andi	r3,r8,7
  80c028:	18000726 	beq	r3,zero,80c048 <__divdf3+0x5c0>
  80c02c:	40c003cc 	andi	r3,r8,15
  80c030:	01000104 	movi	r4,4
  80c034:	19000426 	beq	r3,r4,80c048 <__divdf3+0x5c0>
  80c038:	4107883a 	add	r3,r8,r4
  80c03c:	1a11803a 	cmpltu	r8,r3,r8
  80c040:	8a23883a 	add	r17,r17,r8
  80c044:	1811883a 	mov	r8,r3
  80c048:	88c0402c 	andhi	r3,r17,256
  80c04c:	18000426 	beq	r3,zero,80c060 <__divdf3+0x5d8>
  80c050:	00ffc034 	movhi	r3,65280
  80c054:	18ffffc4 	addi	r3,r3,-1
  80c058:	a8810004 	addi	r2,r21,1024
  80c05c:	88e2703a 	and	r17,r17,r3
  80c060:	00c1ff84 	movi	r3,2046
  80c064:	18bee316 	blt	r3,r2,80bbf4 <__alt_mem_onchip_mem+0xff803bf4>
  80c068:	8824977a 	slli	r18,r17,29
  80c06c:	4010d0fa 	srli	r8,r8,3
  80c070:	8822927a 	slli	r17,r17,9
  80c074:	1081ffcc 	andi	r2,r2,2047
  80c078:	9224b03a 	or	r18,r18,r8
  80c07c:	880ad33a 	srli	r5,r17,12
  80c080:	98c0004c 	andi	r3,r19,1
  80c084:	003edf06 	br	80bc04 <__alt_mem_onchip_mem+0xff803c04>
  80c088:	8080022c 	andhi	r2,r16,8
  80c08c:	10001226 	beq	r2,zero,80c0d8 <__divdf3+0x650>
  80c090:	8880022c 	andhi	r2,r17,8
  80c094:	1000101e 	bne	r2,zero,80c0d8 <__divdf3+0x650>
  80c098:	00800434 	movhi	r2,16
  80c09c:	89400234 	orhi	r5,r17,8
  80c0a0:	10bfffc4 	addi	r2,r2,-1
  80c0a4:	b007883a 	mov	r3,r22
  80c0a8:	288a703a 	and	r5,r5,r2
  80c0ac:	4025883a 	mov	r18,r8
  80c0b0:	003f3106 	br	80bd78 <__alt_mem_onchip_mem+0xff803d78>
  80c0b4:	008000c4 	movi	r2,3
  80c0b8:	3880a626 	beq	r7,r2,80c354 <__divdf3+0x8cc>
  80c0bc:	00800044 	movi	r2,1
  80c0c0:	3880521e 	bne	r7,r2,80c20c <__divdf3+0x784>
  80c0c4:	b807883a 	mov	r3,r23
  80c0c8:	0005883a 	mov	r2,zero
  80c0cc:	000b883a 	mov	r5,zero
  80c0d0:	0025883a 	mov	r18,zero
  80c0d4:	003ecb06 	br	80bc04 <__alt_mem_onchip_mem+0xff803c04>
  80c0d8:	00800434 	movhi	r2,16
  80c0dc:	81400234 	orhi	r5,r16,8
  80c0e0:	10bfffc4 	addi	r2,r2,-1
  80c0e4:	a007883a 	mov	r3,r20
  80c0e8:	288a703a 	and	r5,r5,r2
  80c0ec:	003f2206 	br	80bd78 <__alt_mem_onchip_mem+0xff803d78>
  80c0f0:	183fca26 	beq	r3,zero,80c01c <__alt_mem_onchip_mem+0xff80401c>
  80c0f4:	e5ef883a 	add	r23,fp,r23
  80c0f8:	40bfffc4 	addi	r2,r8,-1
  80c0fc:	bf00392e 	bgeu	r23,fp,80c1e4 <__divdf3+0x75c>
  80c100:	1011883a 	mov	r8,r2
  80c104:	ba7fc41e 	bne	r23,r9,80c018 <__alt_mem_onchip_mem+0xff804018>
  80c108:	b0ffc31e 	bne	r22,r3,80c018 <__alt_mem_onchip_mem+0xff804018>
  80c10c:	003fc306 	br	80c01c <__alt_mem_onchip_mem+0xff80401c>
  80c110:	143ff604 	addi	r16,r2,-40
  80c114:	9c20983a 	sll	r16,r19,r16
  80c118:	0025883a 	mov	r18,zero
  80c11c:	003ee206 	br	80bca8 <__alt_mem_onchip_mem+0xff803ca8>
  80c120:	d9800315 	stw	r6,12(sp)
  80c124:	d9c00215 	stw	r7,8(sp)
  80c128:	080d7e00 	call	80d7e0 <__clzsi2>
  80c12c:	10800804 	addi	r2,r2,32
  80c130:	d9c00217 	ldw	r7,8(sp)
  80c134:	d9800317 	ldw	r6,12(sp)
  80c138:	003ed106 	br	80bc80 <__alt_mem_onchip_mem+0xff803c80>
  80c13c:	147ff604 	addi	r17,r2,-40
  80c140:	3462983a 	sll	r17,r6,r17
  80c144:	0011883a 	mov	r8,zero
  80c148:	003ef506 	br	80bd20 <__alt_mem_onchip_mem+0xff803d20>
  80c14c:	3009883a 	mov	r4,r6
  80c150:	d9800315 	stw	r6,12(sp)
  80c154:	da400115 	stw	r9,4(sp)
  80c158:	080d7e00 	call	80d7e0 <__clzsi2>
  80c15c:	10800804 	addi	r2,r2,32
  80c160:	da400117 	ldw	r9,4(sp)
  80c164:	d9800317 	ldw	r6,12(sp)
  80c168:	003ee306 	br	80bcf8 <__alt_mem_onchip_mem+0xff803cf8>
  80c16c:	85a1883a 	add	r16,r16,r22
  80c170:	8585803a 	cmpltu	r2,r16,r22
  80c174:	1705883a 	add	r2,r2,fp
  80c178:	14a5883a 	add	r18,r2,r18
  80c17c:	88bfffc4 	addi	r2,r17,-1
  80c180:	e4800c2e 	bgeu	fp,r18,80c1b4 <__divdf3+0x72c>
  80c184:	90c03e36 	bltu	r18,r3,80c280 <__divdf3+0x7f8>
  80c188:	1c806926 	beq	r3,r18,80c330 <__divdf3+0x8a8>
  80c18c:	90c7c83a 	sub	r3,r18,r3
  80c190:	1023883a 	mov	r17,r2
  80c194:	003f5206 	br	80bee0 <__alt_mem_onchip_mem+0xff803ee0>
  80c198:	923f0436 	bltu	r18,r8,80bdac <__alt_mem_onchip_mem+0xff803dac>
  80c19c:	800897fa 	slli	r4,r16,31
  80c1a0:	9004d07a 	srli	r2,r18,1
  80c1a4:	8006d07a 	srli	r3,r16,1
  80c1a8:	902097fa 	slli	r16,r18,31
  80c1ac:	20a4b03a 	or	r18,r4,r2
  80c1b0:	003f0106 	br	80bdb8 <__alt_mem_onchip_mem+0xff803db8>
  80c1b4:	e4bff51e 	bne	fp,r18,80c18c <__alt_mem_onchip_mem+0xff80418c>
  80c1b8:	85bff22e 	bgeu	r16,r22,80c184 <__alt_mem_onchip_mem+0xff804184>
  80c1bc:	e0c7c83a 	sub	r3,fp,r3
  80c1c0:	1023883a 	mov	r17,r2
  80c1c4:	003f4606 	br	80bee0 <__alt_mem_onchip_mem+0xff803ee0>
  80c1c8:	100f883a 	mov	r7,r2
  80c1cc:	003f2b06 	br	80be7c <__alt_mem_onchip_mem+0xff803e7c>
  80c1d0:	180d883a 	mov	r6,r3
  80c1d4:	003f1306 	br	80be24 <__alt_mem_onchip_mem+0xff803e24>
  80c1d8:	813fe436 	bltu	r16,r4,80c16c <__alt_mem_onchip_mem+0xff80416c>
  80c1dc:	0007883a 	mov	r3,zero
  80c1e0:	003f3f06 	br	80bee0 <__alt_mem_onchip_mem+0xff803ee0>
  80c1e4:	ba402c36 	bltu	r23,r9,80c298 <__divdf3+0x810>
  80c1e8:	4dc05426 	beq	r9,r23,80c33c <__divdf3+0x8b4>
  80c1ec:	1011883a 	mov	r8,r2
  80c1f0:	003f8906 	br	80c018 <__alt_mem_onchip_mem+0xff804018>
  80c1f4:	023fffc4 	movi	r8,-1
  80c1f8:	003f8806 	br	80c01c <__alt_mem_onchip_mem+0xff80401c>
  80c1fc:	1811883a 	mov	r8,r3
  80c200:	003f5406 	br	80bf54 <__alt_mem_onchip_mem+0xff803f54>
  80c204:	1025883a 	mov	r18,r2
  80c208:	003f6d06 	br	80bfc0 <__alt_mem_onchip_mem+0xff803fc0>
  80c20c:	b827883a 	mov	r19,r23
  80c210:	003f8206 	br	80c01c <__alt_mem_onchip_mem+0xff80401c>
  80c214:	010007c4 	movi	r4,31
  80c218:	20c02616 	blt	r4,r3,80c2b4 <__divdf3+0x82c>
  80c21c:	00800804 	movi	r2,32
  80c220:	10c5c83a 	sub	r2,r2,r3
  80c224:	888a983a 	sll	r5,r17,r2
  80c228:	40c8d83a 	srl	r4,r8,r3
  80c22c:	4084983a 	sll	r2,r8,r2
  80c230:	88e2d83a 	srl	r17,r17,r3
  80c234:	2906b03a 	or	r3,r5,r4
  80c238:	1004c03a 	cmpne	r2,r2,zero
  80c23c:	1886b03a 	or	r3,r3,r2
  80c240:	188001cc 	andi	r2,r3,7
  80c244:	10000726 	beq	r2,zero,80c264 <__divdf3+0x7dc>
  80c248:	188003cc 	andi	r2,r3,15
  80c24c:	01000104 	movi	r4,4
  80c250:	11000426 	beq	r2,r4,80c264 <__divdf3+0x7dc>
  80c254:	1805883a 	mov	r2,r3
  80c258:	10c00104 	addi	r3,r2,4
  80c25c:	1885803a 	cmpltu	r2,r3,r2
  80c260:	88a3883a 	add	r17,r17,r2
  80c264:	8880202c 	andhi	r2,r17,128
  80c268:	10002726 	beq	r2,zero,80c308 <__divdf3+0x880>
  80c26c:	98c0004c 	andi	r3,r19,1
  80c270:	00800044 	movi	r2,1
  80c274:	000b883a 	mov	r5,zero
  80c278:	0025883a 	mov	r18,zero
  80c27c:	003e6106 	br	80bc04 <__alt_mem_onchip_mem+0xff803c04>
  80c280:	85a1883a 	add	r16,r16,r22
  80c284:	8585803a 	cmpltu	r2,r16,r22
  80c288:	1705883a 	add	r2,r2,fp
  80c28c:	14a5883a 	add	r18,r2,r18
  80c290:	8c7fff84 	addi	r17,r17,-2
  80c294:	003f1106 	br	80bedc <__alt_mem_onchip_mem+0xff803edc>
  80c298:	b589883a 	add	r4,r22,r22
  80c29c:	25ad803a 	cmpltu	r22,r4,r22
  80c2a0:	b739883a 	add	fp,r22,fp
  80c2a4:	40bfff84 	addi	r2,r8,-2
  80c2a8:	bf2f883a 	add	r23,r23,fp
  80c2ac:	202d883a 	mov	r22,r4
  80c2b0:	003f9306 	br	80c100 <__alt_mem_onchip_mem+0xff804100>
  80c2b4:	013ff844 	movi	r4,-31
  80c2b8:	2085c83a 	sub	r2,r4,r2
  80c2bc:	8888d83a 	srl	r4,r17,r2
  80c2c0:	00800804 	movi	r2,32
  80c2c4:	18802126 	beq	r3,r2,80c34c <__divdf3+0x8c4>
  80c2c8:	00801004 	movi	r2,64
  80c2cc:	10c5c83a 	sub	r2,r2,r3
  80c2d0:	8884983a 	sll	r2,r17,r2
  80c2d4:	1204b03a 	or	r2,r2,r8
  80c2d8:	1004c03a 	cmpne	r2,r2,zero
  80c2dc:	2084b03a 	or	r2,r4,r2
  80c2e0:	144001cc 	andi	r17,r2,7
  80c2e4:	88000d1e 	bne	r17,zero,80c31c <__divdf3+0x894>
  80c2e8:	000b883a 	mov	r5,zero
  80c2ec:	1024d0fa 	srli	r18,r2,3
  80c2f0:	98c0004c 	andi	r3,r19,1
  80c2f4:	0005883a 	mov	r2,zero
  80c2f8:	9464b03a 	or	r18,r18,r17
  80c2fc:	003e4106 	br	80bc04 <__alt_mem_onchip_mem+0xff803c04>
  80c300:	1007883a 	mov	r3,r2
  80c304:	0023883a 	mov	r17,zero
  80c308:	880a927a 	slli	r5,r17,9
  80c30c:	1805883a 	mov	r2,r3
  80c310:	8822977a 	slli	r17,r17,29
  80c314:	280ad33a 	srli	r5,r5,12
  80c318:	003ff406 	br	80c2ec <__alt_mem_onchip_mem+0xff8042ec>
  80c31c:	10c003cc 	andi	r3,r2,15
  80c320:	01000104 	movi	r4,4
  80c324:	193ff626 	beq	r3,r4,80c300 <__alt_mem_onchip_mem+0xff804300>
  80c328:	0023883a 	mov	r17,zero
  80c32c:	003fca06 	br	80c258 <__alt_mem_onchip_mem+0xff804258>
  80c330:	813fd336 	bltu	r16,r4,80c280 <__alt_mem_onchip_mem+0xff804280>
  80c334:	1023883a 	mov	r17,r2
  80c338:	003fa806 	br	80c1dc <__alt_mem_onchip_mem+0xff8041dc>
  80c33c:	b0ffd636 	bltu	r22,r3,80c298 <__alt_mem_onchip_mem+0xff804298>
  80c340:	1011883a 	mov	r8,r2
  80c344:	b0ff341e 	bne	r22,r3,80c018 <__alt_mem_onchip_mem+0xff804018>
  80c348:	003f3406 	br	80c01c <__alt_mem_onchip_mem+0xff80401c>
  80c34c:	0005883a 	mov	r2,zero
  80c350:	003fe006 	br	80c2d4 <__alt_mem_onchip_mem+0xff8042d4>
  80c354:	00800434 	movhi	r2,16
  80c358:	89400234 	orhi	r5,r17,8
  80c35c:	10bfffc4 	addi	r2,r2,-1
  80c360:	b807883a 	mov	r3,r23
  80c364:	288a703a 	and	r5,r5,r2
  80c368:	4025883a 	mov	r18,r8
  80c36c:	003e8206 	br	80bd78 <__alt_mem_onchip_mem+0xff803d78>

0080c370 <__eqdf2>:
  80c370:	2804d53a 	srli	r2,r5,20
  80c374:	3806d53a 	srli	r3,r7,20
  80c378:	02000434 	movhi	r8,16
  80c37c:	423fffc4 	addi	r8,r8,-1
  80c380:	1081ffcc 	andi	r2,r2,2047
  80c384:	0281ffc4 	movi	r10,2047
  80c388:	2a12703a 	and	r9,r5,r8
  80c38c:	18c1ffcc 	andi	r3,r3,2047
  80c390:	3a10703a 	and	r8,r7,r8
  80c394:	280ad7fa 	srli	r5,r5,31
  80c398:	380ed7fa 	srli	r7,r7,31
  80c39c:	12801026 	beq	r2,r10,80c3e0 <__eqdf2+0x70>
  80c3a0:	0281ffc4 	movi	r10,2047
  80c3a4:	1a800a26 	beq	r3,r10,80c3d0 <__eqdf2+0x60>
  80c3a8:	10c00226 	beq	r2,r3,80c3b4 <__eqdf2+0x44>
  80c3ac:	00800044 	movi	r2,1
  80c3b0:	f800283a 	ret
  80c3b4:	4a3ffd1e 	bne	r9,r8,80c3ac <__alt_mem_onchip_mem+0xff8043ac>
  80c3b8:	21bffc1e 	bne	r4,r6,80c3ac <__alt_mem_onchip_mem+0xff8043ac>
  80c3bc:	29c00c26 	beq	r5,r7,80c3f0 <__eqdf2+0x80>
  80c3c0:	103ffa1e 	bne	r2,zero,80c3ac <__alt_mem_onchip_mem+0xff8043ac>
  80c3c4:	2244b03a 	or	r2,r4,r9
  80c3c8:	1004c03a 	cmpne	r2,r2,zero
  80c3cc:	f800283a 	ret
  80c3d0:	3214b03a 	or	r10,r6,r8
  80c3d4:	503ff426 	beq	r10,zero,80c3a8 <__alt_mem_onchip_mem+0xff8043a8>
  80c3d8:	00800044 	movi	r2,1
  80c3dc:	f800283a 	ret
  80c3e0:	2254b03a 	or	r10,r4,r9
  80c3e4:	503fee26 	beq	r10,zero,80c3a0 <__alt_mem_onchip_mem+0xff8043a0>
  80c3e8:	00800044 	movi	r2,1
  80c3ec:	f800283a 	ret
  80c3f0:	0005883a 	mov	r2,zero
  80c3f4:	f800283a 	ret

0080c3f8 <__gedf2>:
  80c3f8:	2804d53a 	srli	r2,r5,20
  80c3fc:	3806d53a 	srli	r3,r7,20
  80c400:	02000434 	movhi	r8,16
  80c404:	423fffc4 	addi	r8,r8,-1
  80c408:	1081ffcc 	andi	r2,r2,2047
  80c40c:	0241ffc4 	movi	r9,2047
  80c410:	2a14703a 	and	r10,r5,r8
  80c414:	18c1ffcc 	andi	r3,r3,2047
  80c418:	3a10703a 	and	r8,r7,r8
  80c41c:	280ad7fa 	srli	r5,r5,31
  80c420:	380ed7fa 	srli	r7,r7,31
  80c424:	12401d26 	beq	r2,r9,80c49c <__gedf2+0xa4>
  80c428:	0241ffc4 	movi	r9,2047
  80c42c:	1a401226 	beq	r3,r9,80c478 <__gedf2+0x80>
  80c430:	1000081e 	bne	r2,zero,80c454 <__gedf2+0x5c>
  80c434:	2296b03a 	or	r11,r4,r10
  80c438:	5813003a 	cmpeq	r9,r11,zero
  80c43c:	1800091e 	bne	r3,zero,80c464 <__gedf2+0x6c>
  80c440:	3218b03a 	or	r12,r6,r8
  80c444:	6000071e 	bne	r12,zero,80c464 <__gedf2+0x6c>
  80c448:	0005883a 	mov	r2,zero
  80c44c:	5800101e 	bne	r11,zero,80c490 <__gedf2+0x98>
  80c450:	f800283a 	ret
  80c454:	18000c1e 	bne	r3,zero,80c488 <__gedf2+0x90>
  80c458:	3212b03a 	or	r9,r6,r8
  80c45c:	48000c26 	beq	r9,zero,80c490 <__gedf2+0x98>
  80c460:	0013883a 	mov	r9,zero
  80c464:	39c03fcc 	andi	r7,r7,255
  80c468:	48000826 	beq	r9,zero,80c48c <__gedf2+0x94>
  80c46c:	38000926 	beq	r7,zero,80c494 <__gedf2+0x9c>
  80c470:	00800044 	movi	r2,1
  80c474:	f800283a 	ret
  80c478:	3212b03a 	or	r9,r6,r8
  80c47c:	483fec26 	beq	r9,zero,80c430 <__alt_mem_onchip_mem+0xff804430>
  80c480:	00bfff84 	movi	r2,-2
  80c484:	f800283a 	ret
  80c488:	39c03fcc 	andi	r7,r7,255
  80c48c:	29c00626 	beq	r5,r7,80c4a8 <__gedf2+0xb0>
  80c490:	283ff726 	beq	r5,zero,80c470 <__alt_mem_onchip_mem+0xff804470>
  80c494:	00bfffc4 	movi	r2,-1
  80c498:	f800283a 	ret
  80c49c:	2292b03a 	or	r9,r4,r10
  80c4a0:	483fe126 	beq	r9,zero,80c428 <__alt_mem_onchip_mem+0xff804428>
  80c4a4:	003ff606 	br	80c480 <__alt_mem_onchip_mem+0xff804480>
  80c4a8:	18bff916 	blt	r3,r2,80c490 <__alt_mem_onchip_mem+0xff804490>
  80c4ac:	10c00316 	blt	r2,r3,80c4bc <__gedf2+0xc4>
  80c4b0:	42bff736 	bltu	r8,r10,80c490 <__alt_mem_onchip_mem+0xff804490>
  80c4b4:	52000326 	beq	r10,r8,80c4c4 <__gedf2+0xcc>
  80c4b8:	5200042e 	bgeu	r10,r8,80c4cc <__gedf2+0xd4>
  80c4bc:	283fec1e 	bne	r5,zero,80c470 <__alt_mem_onchip_mem+0xff804470>
  80c4c0:	003ff406 	br	80c494 <__alt_mem_onchip_mem+0xff804494>
  80c4c4:	313ff236 	bltu	r6,r4,80c490 <__alt_mem_onchip_mem+0xff804490>
  80c4c8:	21bffc36 	bltu	r4,r6,80c4bc <__alt_mem_onchip_mem+0xff8044bc>
  80c4cc:	0005883a 	mov	r2,zero
  80c4d0:	f800283a 	ret

0080c4d4 <__ledf2>:
  80c4d4:	2804d53a 	srli	r2,r5,20
  80c4d8:	3810d53a 	srli	r8,r7,20
  80c4dc:	00c00434 	movhi	r3,16
  80c4e0:	18ffffc4 	addi	r3,r3,-1
  80c4e4:	1081ffcc 	andi	r2,r2,2047
  80c4e8:	0241ffc4 	movi	r9,2047
  80c4ec:	28d4703a 	and	r10,r5,r3
  80c4f0:	4201ffcc 	andi	r8,r8,2047
  80c4f4:	38c6703a 	and	r3,r7,r3
  80c4f8:	280ad7fa 	srli	r5,r5,31
  80c4fc:	380ed7fa 	srli	r7,r7,31
  80c500:	12401f26 	beq	r2,r9,80c580 <__ledf2+0xac>
  80c504:	0241ffc4 	movi	r9,2047
  80c508:	42401426 	beq	r8,r9,80c55c <__ledf2+0x88>
  80c50c:	1000091e 	bne	r2,zero,80c534 <__ledf2+0x60>
  80c510:	2296b03a 	or	r11,r4,r10
  80c514:	5813003a 	cmpeq	r9,r11,zero
  80c518:	29403fcc 	andi	r5,r5,255
  80c51c:	40000a1e 	bne	r8,zero,80c548 <__ledf2+0x74>
  80c520:	30d8b03a 	or	r12,r6,r3
  80c524:	6000081e 	bne	r12,zero,80c548 <__ledf2+0x74>
  80c528:	0005883a 	mov	r2,zero
  80c52c:	5800111e 	bne	r11,zero,80c574 <__ledf2+0xa0>
  80c530:	f800283a 	ret
  80c534:	29403fcc 	andi	r5,r5,255
  80c538:	40000c1e 	bne	r8,zero,80c56c <__ledf2+0x98>
  80c53c:	30d2b03a 	or	r9,r6,r3
  80c540:	48000c26 	beq	r9,zero,80c574 <__ledf2+0xa0>
  80c544:	0013883a 	mov	r9,zero
  80c548:	39c03fcc 	andi	r7,r7,255
  80c54c:	48000826 	beq	r9,zero,80c570 <__ledf2+0x9c>
  80c550:	38001126 	beq	r7,zero,80c598 <__ledf2+0xc4>
  80c554:	00800044 	movi	r2,1
  80c558:	f800283a 	ret
  80c55c:	30d2b03a 	or	r9,r6,r3
  80c560:	483fea26 	beq	r9,zero,80c50c <__alt_mem_onchip_mem+0xff80450c>
  80c564:	00800084 	movi	r2,2
  80c568:	f800283a 	ret
  80c56c:	39c03fcc 	andi	r7,r7,255
  80c570:	39400726 	beq	r7,r5,80c590 <__ledf2+0xbc>
  80c574:	2800081e 	bne	r5,zero,80c598 <__ledf2+0xc4>
  80c578:	00800044 	movi	r2,1
  80c57c:	f800283a 	ret
  80c580:	2292b03a 	or	r9,r4,r10
  80c584:	483fdf26 	beq	r9,zero,80c504 <__alt_mem_onchip_mem+0xff804504>
  80c588:	00800084 	movi	r2,2
  80c58c:	f800283a 	ret
  80c590:	4080030e 	bge	r8,r2,80c5a0 <__ledf2+0xcc>
  80c594:	383fef26 	beq	r7,zero,80c554 <__alt_mem_onchip_mem+0xff804554>
  80c598:	00bfffc4 	movi	r2,-1
  80c59c:	f800283a 	ret
  80c5a0:	123feb16 	blt	r2,r8,80c550 <__alt_mem_onchip_mem+0xff804550>
  80c5a4:	1abff336 	bltu	r3,r10,80c574 <__alt_mem_onchip_mem+0xff804574>
  80c5a8:	50c00326 	beq	r10,r3,80c5b8 <__ledf2+0xe4>
  80c5ac:	50c0042e 	bgeu	r10,r3,80c5c0 <__ledf2+0xec>
  80c5b0:	283fe81e 	bne	r5,zero,80c554 <__alt_mem_onchip_mem+0xff804554>
  80c5b4:	003ff806 	br	80c598 <__alt_mem_onchip_mem+0xff804598>
  80c5b8:	313fee36 	bltu	r6,r4,80c574 <__alt_mem_onchip_mem+0xff804574>
  80c5bc:	21bffc36 	bltu	r4,r6,80c5b0 <__alt_mem_onchip_mem+0xff8045b0>
  80c5c0:	0005883a 	mov	r2,zero
  80c5c4:	f800283a 	ret

0080c5c8 <__muldf3>:
  80c5c8:	defff304 	addi	sp,sp,-52
  80c5cc:	2804d53a 	srli	r2,r5,20
  80c5d0:	dd800915 	stw	r22,36(sp)
  80c5d4:	282cd7fa 	srli	r22,r5,31
  80c5d8:	dc000315 	stw	r16,12(sp)
  80c5dc:	04000434 	movhi	r16,16
  80c5e0:	dd400815 	stw	r21,32(sp)
  80c5e4:	dc800515 	stw	r18,20(sp)
  80c5e8:	843fffc4 	addi	r16,r16,-1
  80c5ec:	dfc00c15 	stw	ra,48(sp)
  80c5f0:	df000b15 	stw	fp,44(sp)
  80c5f4:	ddc00a15 	stw	r23,40(sp)
  80c5f8:	dd000715 	stw	r20,28(sp)
  80c5fc:	dcc00615 	stw	r19,24(sp)
  80c600:	dc400415 	stw	r17,16(sp)
  80c604:	1481ffcc 	andi	r18,r2,2047
  80c608:	2c20703a 	and	r16,r5,r16
  80c60c:	b02b883a 	mov	r21,r22
  80c610:	b2403fcc 	andi	r9,r22,255
  80c614:	90006026 	beq	r18,zero,80c798 <__muldf3+0x1d0>
  80c618:	0081ffc4 	movi	r2,2047
  80c61c:	2029883a 	mov	r20,r4
  80c620:	90803626 	beq	r18,r2,80c6fc <__muldf3+0x134>
  80c624:	80800434 	orhi	r2,r16,16
  80c628:	100490fa 	slli	r2,r2,3
  80c62c:	2020d77a 	srli	r16,r4,29
  80c630:	202890fa 	slli	r20,r4,3
  80c634:	94bf0044 	addi	r18,r18,-1023
  80c638:	80a0b03a 	or	r16,r16,r2
  80c63c:	0027883a 	mov	r19,zero
  80c640:	0039883a 	mov	fp,zero
  80c644:	3804d53a 	srli	r2,r7,20
  80c648:	382ed7fa 	srli	r23,r7,31
  80c64c:	04400434 	movhi	r17,16
  80c650:	8c7fffc4 	addi	r17,r17,-1
  80c654:	1081ffcc 	andi	r2,r2,2047
  80c658:	3011883a 	mov	r8,r6
  80c65c:	3c62703a 	and	r17,r7,r17
  80c660:	ba803fcc 	andi	r10,r23,255
  80c664:	10006d26 	beq	r2,zero,80c81c <__muldf3+0x254>
  80c668:	00c1ffc4 	movi	r3,2047
  80c66c:	10c06526 	beq	r2,r3,80c804 <__muldf3+0x23c>
  80c670:	88c00434 	orhi	r3,r17,16
  80c674:	180690fa 	slli	r3,r3,3
  80c678:	3022d77a 	srli	r17,r6,29
  80c67c:	301090fa 	slli	r8,r6,3
  80c680:	10bf0044 	addi	r2,r2,-1023
  80c684:	88e2b03a 	or	r17,r17,r3
  80c688:	000b883a 	mov	r5,zero
  80c68c:	9085883a 	add	r2,r18,r2
  80c690:	2cc8b03a 	or	r4,r5,r19
  80c694:	00c003c4 	movi	r3,15
  80c698:	bdacf03a 	xor	r22,r23,r22
  80c69c:	12c00044 	addi	r11,r2,1
  80c6a0:	19009936 	bltu	r3,r4,80c908 <__muldf3+0x340>
  80c6a4:	200890ba 	slli	r4,r4,2
  80c6a8:	00c02074 	movhi	r3,129
  80c6ac:	18f1af04 	addi	r3,r3,-14660
  80c6b0:	20c9883a 	add	r4,r4,r3
  80c6b4:	20c00017 	ldw	r3,0(r4)
  80c6b8:	1800683a 	jmp	r3
  80c6bc:	0080c908 	cmpgei	r2,zero,804
  80c6c0:	0080c71c 	xori	r2,zero,796
  80c6c4:	0080c71c 	xori	r2,zero,796
  80c6c8:	0080c718 	cmpnei	r2,zero,796
  80c6cc:	0080c8e4 	muli	r2,zero,803
  80c6d0:	0080c8e4 	muli	r2,zero,803
  80c6d4:	0080c8cc 	andi	r2,zero,803
  80c6d8:	0080c718 	cmpnei	r2,zero,796
  80c6dc:	0080c8e4 	muli	r2,zero,803
  80c6e0:	0080c8cc 	andi	r2,zero,803
  80c6e4:	0080c8e4 	muli	r2,zero,803
  80c6e8:	0080c718 	cmpnei	r2,zero,796
  80c6ec:	0080c8f4 	movhi	r2,803
  80c6f0:	0080c8f4 	movhi	r2,803
  80c6f4:	0080c8f4 	movhi	r2,803
  80c6f8:	0080cb10 	cmplti	r2,zero,812
  80c6fc:	2404b03a 	or	r2,r4,r16
  80c700:	10006f1e 	bne	r2,zero,80c8c0 <__muldf3+0x2f8>
  80c704:	04c00204 	movi	r19,8
  80c708:	0021883a 	mov	r16,zero
  80c70c:	0029883a 	mov	r20,zero
  80c710:	07000084 	movi	fp,2
  80c714:	003fcb06 	br	80c644 <__alt_mem_onchip_mem+0xff804644>
  80c718:	502d883a 	mov	r22,r10
  80c71c:	00800084 	movi	r2,2
  80c720:	28805726 	beq	r5,r2,80c880 <__muldf3+0x2b8>
  80c724:	008000c4 	movi	r2,3
  80c728:	28816626 	beq	r5,r2,80ccc4 <__muldf3+0x6fc>
  80c72c:	00800044 	movi	r2,1
  80c730:	2881411e 	bne	r5,r2,80cc38 <__muldf3+0x670>
  80c734:	b02b883a 	mov	r21,r22
  80c738:	0005883a 	mov	r2,zero
  80c73c:	000b883a 	mov	r5,zero
  80c740:	0029883a 	mov	r20,zero
  80c744:	1004953a 	slli	r2,r2,20
  80c748:	a8c03fcc 	andi	r3,r21,255
  80c74c:	04400434 	movhi	r17,16
  80c750:	8c7fffc4 	addi	r17,r17,-1
  80c754:	180697fa 	slli	r3,r3,31
  80c758:	2c4a703a 	and	r5,r5,r17
  80c75c:	288ab03a 	or	r5,r5,r2
  80c760:	28c6b03a 	or	r3,r5,r3
  80c764:	a005883a 	mov	r2,r20
  80c768:	dfc00c17 	ldw	ra,48(sp)
  80c76c:	df000b17 	ldw	fp,44(sp)
  80c770:	ddc00a17 	ldw	r23,40(sp)
  80c774:	dd800917 	ldw	r22,36(sp)
  80c778:	dd400817 	ldw	r21,32(sp)
  80c77c:	dd000717 	ldw	r20,28(sp)
  80c780:	dcc00617 	ldw	r19,24(sp)
  80c784:	dc800517 	ldw	r18,20(sp)
  80c788:	dc400417 	ldw	r17,16(sp)
  80c78c:	dc000317 	ldw	r16,12(sp)
  80c790:	dec00d04 	addi	sp,sp,52
  80c794:	f800283a 	ret
  80c798:	2404b03a 	or	r2,r4,r16
  80c79c:	2027883a 	mov	r19,r4
  80c7a0:	10004226 	beq	r2,zero,80c8ac <__muldf3+0x2e4>
  80c7a4:	8000fc26 	beq	r16,zero,80cb98 <__muldf3+0x5d0>
  80c7a8:	8009883a 	mov	r4,r16
  80c7ac:	d9800215 	stw	r6,8(sp)
  80c7b0:	d9c00015 	stw	r7,0(sp)
  80c7b4:	da400115 	stw	r9,4(sp)
  80c7b8:	080d7e00 	call	80d7e0 <__clzsi2>
  80c7bc:	d9800217 	ldw	r6,8(sp)
  80c7c0:	d9c00017 	ldw	r7,0(sp)
  80c7c4:	da400117 	ldw	r9,4(sp)
  80c7c8:	113ffd44 	addi	r4,r2,-11
  80c7cc:	00c00704 	movi	r3,28
  80c7d0:	1900ed16 	blt	r3,r4,80cb88 <__muldf3+0x5c0>
  80c7d4:	00c00744 	movi	r3,29
  80c7d8:	147ffe04 	addi	r17,r2,-8
  80c7dc:	1907c83a 	sub	r3,r3,r4
  80c7e0:	8460983a 	sll	r16,r16,r17
  80c7e4:	98c6d83a 	srl	r3,r19,r3
  80c7e8:	9c68983a 	sll	r20,r19,r17
  80c7ec:	1c20b03a 	or	r16,r3,r16
  80c7f0:	1080fcc4 	addi	r2,r2,1011
  80c7f4:	00a5c83a 	sub	r18,zero,r2
  80c7f8:	0027883a 	mov	r19,zero
  80c7fc:	0039883a 	mov	fp,zero
  80c800:	003f9006 	br	80c644 <__alt_mem_onchip_mem+0xff804644>
  80c804:	3446b03a 	or	r3,r6,r17
  80c808:	1800261e 	bne	r3,zero,80c8a4 <__muldf3+0x2dc>
  80c80c:	0023883a 	mov	r17,zero
  80c810:	0011883a 	mov	r8,zero
  80c814:	01400084 	movi	r5,2
  80c818:	003f9c06 	br	80c68c <__alt_mem_onchip_mem+0xff80468c>
  80c81c:	3446b03a 	or	r3,r6,r17
  80c820:	18001c26 	beq	r3,zero,80c894 <__muldf3+0x2cc>
  80c824:	8800ce26 	beq	r17,zero,80cb60 <__muldf3+0x598>
  80c828:	8809883a 	mov	r4,r17
  80c82c:	d9800215 	stw	r6,8(sp)
  80c830:	da400115 	stw	r9,4(sp)
  80c834:	da800015 	stw	r10,0(sp)
  80c838:	080d7e00 	call	80d7e0 <__clzsi2>
  80c83c:	d9800217 	ldw	r6,8(sp)
  80c840:	da400117 	ldw	r9,4(sp)
  80c844:	da800017 	ldw	r10,0(sp)
  80c848:	113ffd44 	addi	r4,r2,-11
  80c84c:	00c00704 	movi	r3,28
  80c850:	1900bf16 	blt	r3,r4,80cb50 <__muldf3+0x588>
  80c854:	00c00744 	movi	r3,29
  80c858:	123ffe04 	addi	r8,r2,-8
  80c85c:	1907c83a 	sub	r3,r3,r4
  80c860:	8a22983a 	sll	r17,r17,r8
  80c864:	30c6d83a 	srl	r3,r6,r3
  80c868:	3210983a 	sll	r8,r6,r8
  80c86c:	1c62b03a 	or	r17,r3,r17
  80c870:	1080fcc4 	addi	r2,r2,1011
  80c874:	0085c83a 	sub	r2,zero,r2
  80c878:	000b883a 	mov	r5,zero
  80c87c:	003f8306 	br	80c68c <__alt_mem_onchip_mem+0xff80468c>
  80c880:	b02b883a 	mov	r21,r22
  80c884:	0081ffc4 	movi	r2,2047
  80c888:	000b883a 	mov	r5,zero
  80c88c:	0029883a 	mov	r20,zero
  80c890:	003fac06 	br	80c744 <__alt_mem_onchip_mem+0xff804744>
  80c894:	0023883a 	mov	r17,zero
  80c898:	0011883a 	mov	r8,zero
  80c89c:	01400044 	movi	r5,1
  80c8a0:	003f7a06 	br	80c68c <__alt_mem_onchip_mem+0xff80468c>
  80c8a4:	014000c4 	movi	r5,3
  80c8a8:	003f7806 	br	80c68c <__alt_mem_onchip_mem+0xff80468c>
  80c8ac:	04c00104 	movi	r19,4
  80c8b0:	0021883a 	mov	r16,zero
  80c8b4:	0029883a 	mov	r20,zero
  80c8b8:	07000044 	movi	fp,1
  80c8bc:	003f6106 	br	80c644 <__alt_mem_onchip_mem+0xff804644>
  80c8c0:	04c00304 	movi	r19,12
  80c8c4:	070000c4 	movi	fp,3
  80c8c8:	003f5e06 	br	80c644 <__alt_mem_onchip_mem+0xff804644>
  80c8cc:	01400434 	movhi	r5,16
  80c8d0:	002b883a 	mov	r21,zero
  80c8d4:	297fffc4 	addi	r5,r5,-1
  80c8d8:	053fffc4 	movi	r20,-1
  80c8dc:	0081ffc4 	movi	r2,2047
  80c8e0:	003f9806 	br	80c744 <__alt_mem_onchip_mem+0xff804744>
  80c8e4:	8023883a 	mov	r17,r16
  80c8e8:	a011883a 	mov	r8,r20
  80c8ec:	e00b883a 	mov	r5,fp
  80c8f0:	003f8a06 	br	80c71c <__alt_mem_onchip_mem+0xff80471c>
  80c8f4:	8023883a 	mov	r17,r16
  80c8f8:	a011883a 	mov	r8,r20
  80c8fc:	482d883a 	mov	r22,r9
  80c900:	e00b883a 	mov	r5,fp
  80c904:	003f8506 	br	80c71c <__alt_mem_onchip_mem+0xff80471c>
  80c908:	a00ad43a 	srli	r5,r20,16
  80c90c:	401ad43a 	srli	r13,r8,16
  80c910:	a53fffcc 	andi	r20,r20,65535
  80c914:	423fffcc 	andi	r8,r8,65535
  80c918:	4519383a 	mul	r12,r8,r20
  80c91c:	4147383a 	mul	r3,r8,r5
  80c920:	6d09383a 	mul	r4,r13,r20
  80c924:	600cd43a 	srli	r6,r12,16
  80c928:	2b5d383a 	mul	r14,r5,r13
  80c92c:	20c9883a 	add	r4,r4,r3
  80c930:	310d883a 	add	r6,r6,r4
  80c934:	30c0022e 	bgeu	r6,r3,80c940 <__muldf3+0x378>
  80c938:	00c00074 	movhi	r3,1
  80c93c:	70dd883a 	add	r14,r14,r3
  80c940:	8826d43a 	srli	r19,r17,16
  80c944:	8bffffcc 	andi	r15,r17,65535
  80c948:	7d23383a 	mul	r17,r15,r20
  80c94c:	7949383a 	mul	r4,r15,r5
  80c950:	9d29383a 	mul	r20,r19,r20
  80c954:	8814d43a 	srli	r10,r17,16
  80c958:	3012943a 	slli	r9,r6,16
  80c95c:	a129883a 	add	r20,r20,r4
  80c960:	633fffcc 	andi	r12,r12,65535
  80c964:	5515883a 	add	r10,r10,r20
  80c968:	3006d43a 	srli	r3,r6,16
  80c96c:	4b13883a 	add	r9,r9,r12
  80c970:	2ccb383a 	mul	r5,r5,r19
  80c974:	5100022e 	bgeu	r10,r4,80c980 <__muldf3+0x3b8>
  80c978:	01000074 	movhi	r4,1
  80c97c:	290b883a 	add	r5,r5,r4
  80c980:	802ad43a 	srli	r21,r16,16
  80c984:	843fffcc 	andi	r16,r16,65535
  80c988:	440d383a 	mul	r6,r8,r16
  80c98c:	4565383a 	mul	r18,r8,r21
  80c990:	8349383a 	mul	r4,r16,r13
  80c994:	500e943a 	slli	r7,r10,16
  80c998:	3010d43a 	srli	r8,r6,16
  80c99c:	5028d43a 	srli	r20,r10,16
  80c9a0:	2489883a 	add	r4,r4,r18
  80c9a4:	8abfffcc 	andi	r10,r17,65535
  80c9a8:	3a95883a 	add	r10,r7,r10
  80c9ac:	4119883a 	add	r12,r8,r4
  80c9b0:	a169883a 	add	r20,r20,r5
  80c9b4:	1a87883a 	add	r3,r3,r10
  80c9b8:	6d5b383a 	mul	r13,r13,r21
  80c9bc:	6480022e 	bgeu	r12,r18,80c9c8 <__muldf3+0x400>
  80c9c0:	01000074 	movhi	r4,1
  80c9c4:	691b883a 	add	r13,r13,r4
  80c9c8:	7c25383a 	mul	r18,r15,r16
  80c9cc:	7d4b383a 	mul	r5,r15,r21
  80c9d0:	84cf383a 	mul	r7,r16,r19
  80c9d4:	901ed43a 	srli	r15,r18,16
  80c9d8:	6008d43a 	srli	r4,r12,16
  80c9dc:	6010943a 	slli	r8,r12,16
  80c9e0:	394f883a 	add	r7,r7,r5
  80c9e4:	333fffcc 	andi	r12,r6,65535
  80c9e8:	79df883a 	add	r15,r15,r7
  80c9ec:	235b883a 	add	r13,r4,r13
  80c9f0:	9d63383a 	mul	r17,r19,r21
  80c9f4:	4309883a 	add	r4,r8,r12
  80c9f8:	7940022e 	bgeu	r15,r5,80ca04 <__muldf3+0x43c>
  80c9fc:	01400074 	movhi	r5,1
  80ca00:	8963883a 	add	r17,r17,r5
  80ca04:	780a943a 	slli	r5,r15,16
  80ca08:	91bfffcc 	andi	r6,r18,65535
  80ca0c:	70c7883a 	add	r3,r14,r3
  80ca10:	298d883a 	add	r6,r5,r6
  80ca14:	1a8f803a 	cmpltu	r7,r3,r10
  80ca18:	350b883a 	add	r5,r6,r20
  80ca1c:	20c7883a 	add	r3,r4,r3
  80ca20:	3955883a 	add	r10,r7,r5
  80ca24:	1909803a 	cmpltu	r4,r3,r4
  80ca28:	6a91883a 	add	r8,r13,r10
  80ca2c:	780cd43a 	srli	r6,r15,16
  80ca30:	2219883a 	add	r12,r4,r8
  80ca34:	2d0b803a 	cmpltu	r5,r5,r20
  80ca38:	51cf803a 	cmpltu	r7,r10,r7
  80ca3c:	29ceb03a 	or	r7,r5,r7
  80ca40:	4351803a 	cmpltu	r8,r8,r13
  80ca44:	610b803a 	cmpltu	r5,r12,r4
  80ca48:	4148b03a 	or	r4,r8,r5
  80ca4c:	398f883a 	add	r7,r7,r6
  80ca50:	3909883a 	add	r4,r7,r4
  80ca54:	1810927a 	slli	r8,r3,9
  80ca58:	2449883a 	add	r4,r4,r17
  80ca5c:	2008927a 	slli	r4,r4,9
  80ca60:	6022d5fa 	srli	r17,r12,23
  80ca64:	1806d5fa 	srli	r3,r3,23
  80ca68:	4252b03a 	or	r9,r8,r9
  80ca6c:	600a927a 	slli	r5,r12,9
  80ca70:	4810c03a 	cmpne	r8,r9,zero
  80ca74:	2462b03a 	or	r17,r4,r17
  80ca78:	40c6b03a 	or	r3,r8,r3
  80ca7c:	8900402c 	andhi	r4,r17,256
  80ca80:	1950b03a 	or	r8,r3,r5
  80ca84:	20000726 	beq	r4,zero,80caa4 <__muldf3+0x4dc>
  80ca88:	4006d07a 	srli	r3,r8,1
  80ca8c:	880497fa 	slli	r2,r17,31
  80ca90:	4200004c 	andi	r8,r8,1
  80ca94:	8822d07a 	srli	r17,r17,1
  80ca98:	1a10b03a 	or	r8,r3,r8
  80ca9c:	1210b03a 	or	r8,r2,r8
  80caa0:	5805883a 	mov	r2,r11
  80caa4:	1140ffc4 	addi	r5,r2,1023
  80caa8:	0140440e 	bge	zero,r5,80cbbc <__muldf3+0x5f4>
  80caac:	40c001cc 	andi	r3,r8,7
  80cab0:	18000726 	beq	r3,zero,80cad0 <__muldf3+0x508>
  80cab4:	40c003cc 	andi	r3,r8,15
  80cab8:	01000104 	movi	r4,4
  80cabc:	19000426 	beq	r3,r4,80cad0 <__muldf3+0x508>
  80cac0:	4107883a 	add	r3,r8,r4
  80cac4:	1a11803a 	cmpltu	r8,r3,r8
  80cac8:	8a23883a 	add	r17,r17,r8
  80cacc:	1811883a 	mov	r8,r3
  80cad0:	88c0402c 	andhi	r3,r17,256
  80cad4:	18000426 	beq	r3,zero,80cae8 <__muldf3+0x520>
  80cad8:	11410004 	addi	r5,r2,1024
  80cadc:	00bfc034 	movhi	r2,65280
  80cae0:	10bfffc4 	addi	r2,r2,-1
  80cae4:	88a2703a 	and	r17,r17,r2
  80cae8:	0081ff84 	movi	r2,2046
  80caec:	117f6416 	blt	r2,r5,80c880 <__alt_mem_onchip_mem+0xff804880>
  80caf0:	8828977a 	slli	r20,r17,29
  80caf4:	4010d0fa 	srli	r8,r8,3
  80caf8:	8822927a 	slli	r17,r17,9
  80cafc:	2881ffcc 	andi	r2,r5,2047
  80cb00:	a228b03a 	or	r20,r20,r8
  80cb04:	880ad33a 	srli	r5,r17,12
  80cb08:	b02b883a 	mov	r21,r22
  80cb0c:	003f0d06 	br	80c744 <__alt_mem_onchip_mem+0xff804744>
  80cb10:	8080022c 	andhi	r2,r16,8
  80cb14:	10000926 	beq	r2,zero,80cb3c <__muldf3+0x574>
  80cb18:	8880022c 	andhi	r2,r17,8
  80cb1c:	1000071e 	bne	r2,zero,80cb3c <__muldf3+0x574>
  80cb20:	00800434 	movhi	r2,16
  80cb24:	89400234 	orhi	r5,r17,8
  80cb28:	10bfffc4 	addi	r2,r2,-1
  80cb2c:	b82b883a 	mov	r21,r23
  80cb30:	288a703a 	and	r5,r5,r2
  80cb34:	4029883a 	mov	r20,r8
  80cb38:	003f6806 	br	80c8dc <__alt_mem_onchip_mem+0xff8048dc>
  80cb3c:	00800434 	movhi	r2,16
  80cb40:	81400234 	orhi	r5,r16,8
  80cb44:	10bfffc4 	addi	r2,r2,-1
  80cb48:	288a703a 	and	r5,r5,r2
  80cb4c:	003f6306 	br	80c8dc <__alt_mem_onchip_mem+0xff8048dc>
  80cb50:	147ff604 	addi	r17,r2,-40
  80cb54:	3462983a 	sll	r17,r6,r17
  80cb58:	0011883a 	mov	r8,zero
  80cb5c:	003f4406 	br	80c870 <__alt_mem_onchip_mem+0xff804870>
  80cb60:	3009883a 	mov	r4,r6
  80cb64:	d9800215 	stw	r6,8(sp)
  80cb68:	da400115 	stw	r9,4(sp)
  80cb6c:	da800015 	stw	r10,0(sp)
  80cb70:	080d7e00 	call	80d7e0 <__clzsi2>
  80cb74:	10800804 	addi	r2,r2,32
  80cb78:	da800017 	ldw	r10,0(sp)
  80cb7c:	da400117 	ldw	r9,4(sp)
  80cb80:	d9800217 	ldw	r6,8(sp)
  80cb84:	003f3006 	br	80c848 <__alt_mem_onchip_mem+0xff804848>
  80cb88:	143ff604 	addi	r16,r2,-40
  80cb8c:	9c20983a 	sll	r16,r19,r16
  80cb90:	0029883a 	mov	r20,zero
  80cb94:	003f1606 	br	80c7f0 <__alt_mem_onchip_mem+0xff8047f0>
  80cb98:	d9800215 	stw	r6,8(sp)
  80cb9c:	d9c00015 	stw	r7,0(sp)
  80cba0:	da400115 	stw	r9,4(sp)
  80cba4:	080d7e00 	call	80d7e0 <__clzsi2>
  80cba8:	10800804 	addi	r2,r2,32
  80cbac:	da400117 	ldw	r9,4(sp)
  80cbb0:	d9c00017 	ldw	r7,0(sp)
  80cbb4:	d9800217 	ldw	r6,8(sp)
  80cbb8:	003f0306 	br	80c7c8 <__alt_mem_onchip_mem+0xff8047c8>
  80cbbc:	00c00044 	movi	r3,1
  80cbc0:	1947c83a 	sub	r3,r3,r5
  80cbc4:	00800e04 	movi	r2,56
  80cbc8:	10feda16 	blt	r2,r3,80c734 <__alt_mem_onchip_mem+0xff804734>
  80cbcc:	008007c4 	movi	r2,31
  80cbd0:	10c01b16 	blt	r2,r3,80cc40 <__muldf3+0x678>
  80cbd4:	00800804 	movi	r2,32
  80cbd8:	10c5c83a 	sub	r2,r2,r3
  80cbdc:	888a983a 	sll	r5,r17,r2
  80cbe0:	40c8d83a 	srl	r4,r8,r3
  80cbe4:	4084983a 	sll	r2,r8,r2
  80cbe8:	88e2d83a 	srl	r17,r17,r3
  80cbec:	2906b03a 	or	r3,r5,r4
  80cbf0:	1004c03a 	cmpne	r2,r2,zero
  80cbf4:	1886b03a 	or	r3,r3,r2
  80cbf8:	188001cc 	andi	r2,r3,7
  80cbfc:	10000726 	beq	r2,zero,80cc1c <__muldf3+0x654>
  80cc00:	188003cc 	andi	r2,r3,15
  80cc04:	01000104 	movi	r4,4
  80cc08:	11000426 	beq	r2,r4,80cc1c <__muldf3+0x654>
  80cc0c:	1805883a 	mov	r2,r3
  80cc10:	10c00104 	addi	r3,r2,4
  80cc14:	1885803a 	cmpltu	r2,r3,r2
  80cc18:	88a3883a 	add	r17,r17,r2
  80cc1c:	8880202c 	andhi	r2,r17,128
  80cc20:	10001c26 	beq	r2,zero,80cc94 <__muldf3+0x6cc>
  80cc24:	b02b883a 	mov	r21,r22
  80cc28:	00800044 	movi	r2,1
  80cc2c:	000b883a 	mov	r5,zero
  80cc30:	0029883a 	mov	r20,zero
  80cc34:	003ec306 	br	80c744 <__alt_mem_onchip_mem+0xff804744>
  80cc38:	5805883a 	mov	r2,r11
  80cc3c:	003f9906 	br	80caa4 <__alt_mem_onchip_mem+0xff804aa4>
  80cc40:	00bff844 	movi	r2,-31
  80cc44:	1145c83a 	sub	r2,r2,r5
  80cc48:	8888d83a 	srl	r4,r17,r2
  80cc4c:	00800804 	movi	r2,32
  80cc50:	18801a26 	beq	r3,r2,80ccbc <__muldf3+0x6f4>
  80cc54:	00801004 	movi	r2,64
  80cc58:	10c5c83a 	sub	r2,r2,r3
  80cc5c:	8884983a 	sll	r2,r17,r2
  80cc60:	1204b03a 	or	r2,r2,r8
  80cc64:	1004c03a 	cmpne	r2,r2,zero
  80cc68:	2084b03a 	or	r2,r4,r2
  80cc6c:	144001cc 	andi	r17,r2,7
  80cc70:	88000d1e 	bne	r17,zero,80cca8 <__muldf3+0x6e0>
  80cc74:	000b883a 	mov	r5,zero
  80cc78:	1028d0fa 	srli	r20,r2,3
  80cc7c:	b02b883a 	mov	r21,r22
  80cc80:	0005883a 	mov	r2,zero
  80cc84:	a468b03a 	or	r20,r20,r17
  80cc88:	003eae06 	br	80c744 <__alt_mem_onchip_mem+0xff804744>
  80cc8c:	1007883a 	mov	r3,r2
  80cc90:	0023883a 	mov	r17,zero
  80cc94:	880a927a 	slli	r5,r17,9
  80cc98:	1805883a 	mov	r2,r3
  80cc9c:	8822977a 	slli	r17,r17,29
  80cca0:	280ad33a 	srli	r5,r5,12
  80cca4:	003ff406 	br	80cc78 <__alt_mem_onchip_mem+0xff804c78>
  80cca8:	10c003cc 	andi	r3,r2,15
  80ccac:	01000104 	movi	r4,4
  80ccb0:	193ff626 	beq	r3,r4,80cc8c <__alt_mem_onchip_mem+0xff804c8c>
  80ccb4:	0023883a 	mov	r17,zero
  80ccb8:	003fd506 	br	80cc10 <__alt_mem_onchip_mem+0xff804c10>
  80ccbc:	0005883a 	mov	r2,zero
  80ccc0:	003fe706 	br	80cc60 <__alt_mem_onchip_mem+0xff804c60>
  80ccc4:	00800434 	movhi	r2,16
  80ccc8:	89400234 	orhi	r5,r17,8
  80cccc:	10bfffc4 	addi	r2,r2,-1
  80ccd0:	b02b883a 	mov	r21,r22
  80ccd4:	288a703a 	and	r5,r5,r2
  80ccd8:	4029883a 	mov	r20,r8
  80ccdc:	003eff06 	br	80c8dc <__alt_mem_onchip_mem+0xff8048dc>

0080cce0 <__subdf3>:
  80cce0:	02000434 	movhi	r8,16
  80cce4:	423fffc4 	addi	r8,r8,-1
  80cce8:	defffb04 	addi	sp,sp,-20
  80ccec:	2a14703a 	and	r10,r5,r8
  80ccf0:	3812d53a 	srli	r9,r7,20
  80ccf4:	3a10703a 	and	r8,r7,r8
  80ccf8:	2006d77a 	srli	r3,r4,29
  80ccfc:	3004d77a 	srli	r2,r6,29
  80cd00:	dc000015 	stw	r16,0(sp)
  80cd04:	501490fa 	slli	r10,r10,3
  80cd08:	2820d53a 	srli	r16,r5,20
  80cd0c:	401090fa 	slli	r8,r8,3
  80cd10:	dc800215 	stw	r18,8(sp)
  80cd14:	dc400115 	stw	r17,4(sp)
  80cd18:	dfc00415 	stw	ra,16(sp)
  80cd1c:	202290fa 	slli	r17,r4,3
  80cd20:	dcc00315 	stw	r19,12(sp)
  80cd24:	4a41ffcc 	andi	r9,r9,2047
  80cd28:	0101ffc4 	movi	r4,2047
  80cd2c:	2824d7fa 	srli	r18,r5,31
  80cd30:	8401ffcc 	andi	r16,r16,2047
  80cd34:	50c6b03a 	or	r3,r10,r3
  80cd38:	380ed7fa 	srli	r7,r7,31
  80cd3c:	408ab03a 	or	r5,r8,r2
  80cd40:	300c90fa 	slli	r6,r6,3
  80cd44:	49009626 	beq	r9,r4,80cfa0 <__subdf3+0x2c0>
  80cd48:	39c0005c 	xori	r7,r7,1
  80cd4c:	8245c83a 	sub	r2,r16,r9
  80cd50:	3c807426 	beq	r7,r18,80cf24 <__subdf3+0x244>
  80cd54:	0080af0e 	bge	zero,r2,80d014 <__subdf3+0x334>
  80cd58:	48002a1e 	bne	r9,zero,80ce04 <__subdf3+0x124>
  80cd5c:	2988b03a 	or	r4,r5,r6
  80cd60:	20009a1e 	bne	r4,zero,80cfcc <__subdf3+0x2ec>
  80cd64:	888001cc 	andi	r2,r17,7
  80cd68:	10000726 	beq	r2,zero,80cd88 <__subdf3+0xa8>
  80cd6c:	888003cc 	andi	r2,r17,15
  80cd70:	01000104 	movi	r4,4
  80cd74:	11000426 	beq	r2,r4,80cd88 <__subdf3+0xa8>
  80cd78:	890b883a 	add	r5,r17,r4
  80cd7c:	2c63803a 	cmpltu	r17,r5,r17
  80cd80:	1c47883a 	add	r3,r3,r17
  80cd84:	2823883a 	mov	r17,r5
  80cd88:	1880202c 	andhi	r2,r3,128
  80cd8c:	10005926 	beq	r2,zero,80cef4 <__subdf3+0x214>
  80cd90:	84000044 	addi	r16,r16,1
  80cd94:	0081ffc4 	movi	r2,2047
  80cd98:	8080be26 	beq	r16,r2,80d094 <__subdf3+0x3b4>
  80cd9c:	017fe034 	movhi	r5,65408
  80cda0:	297fffc4 	addi	r5,r5,-1
  80cda4:	1946703a 	and	r3,r3,r5
  80cda8:	1804977a 	slli	r2,r3,29
  80cdac:	1806927a 	slli	r3,r3,9
  80cdb0:	8822d0fa 	srli	r17,r17,3
  80cdb4:	8401ffcc 	andi	r16,r16,2047
  80cdb8:	180ad33a 	srli	r5,r3,12
  80cdbc:	9100004c 	andi	r4,r18,1
  80cdc0:	1444b03a 	or	r2,r2,r17
  80cdc4:	80c1ffcc 	andi	r3,r16,2047
  80cdc8:	1820953a 	slli	r16,r3,20
  80cdcc:	20c03fcc 	andi	r3,r4,255
  80cdd0:	180897fa 	slli	r4,r3,31
  80cdd4:	00c00434 	movhi	r3,16
  80cdd8:	18ffffc4 	addi	r3,r3,-1
  80cddc:	28c6703a 	and	r3,r5,r3
  80cde0:	1c06b03a 	or	r3,r3,r16
  80cde4:	1906b03a 	or	r3,r3,r4
  80cde8:	dfc00417 	ldw	ra,16(sp)
  80cdec:	dcc00317 	ldw	r19,12(sp)
  80cdf0:	dc800217 	ldw	r18,8(sp)
  80cdf4:	dc400117 	ldw	r17,4(sp)
  80cdf8:	dc000017 	ldw	r16,0(sp)
  80cdfc:	dec00504 	addi	sp,sp,20
  80ce00:	f800283a 	ret
  80ce04:	0101ffc4 	movi	r4,2047
  80ce08:	813fd626 	beq	r16,r4,80cd64 <__alt_mem_onchip_mem+0xff804d64>
  80ce0c:	29402034 	orhi	r5,r5,128
  80ce10:	01000e04 	movi	r4,56
  80ce14:	2080a316 	blt	r4,r2,80d0a4 <__subdf3+0x3c4>
  80ce18:	010007c4 	movi	r4,31
  80ce1c:	2080c616 	blt	r4,r2,80d138 <__subdf3+0x458>
  80ce20:	01000804 	movi	r4,32
  80ce24:	2089c83a 	sub	r4,r4,r2
  80ce28:	2910983a 	sll	r8,r5,r4
  80ce2c:	308ed83a 	srl	r7,r6,r2
  80ce30:	3108983a 	sll	r4,r6,r4
  80ce34:	2884d83a 	srl	r2,r5,r2
  80ce38:	41ccb03a 	or	r6,r8,r7
  80ce3c:	2008c03a 	cmpne	r4,r4,zero
  80ce40:	310cb03a 	or	r6,r6,r4
  80ce44:	898dc83a 	sub	r6,r17,r6
  80ce48:	89a3803a 	cmpltu	r17,r17,r6
  80ce4c:	1887c83a 	sub	r3,r3,r2
  80ce50:	1c47c83a 	sub	r3,r3,r17
  80ce54:	3023883a 	mov	r17,r6
  80ce58:	1880202c 	andhi	r2,r3,128
  80ce5c:	10002326 	beq	r2,zero,80ceec <__subdf3+0x20c>
  80ce60:	04c02034 	movhi	r19,128
  80ce64:	9cffffc4 	addi	r19,r19,-1
  80ce68:	1ce6703a 	and	r19,r3,r19
  80ce6c:	98007a26 	beq	r19,zero,80d058 <__subdf3+0x378>
  80ce70:	9809883a 	mov	r4,r19
  80ce74:	080d7e00 	call	80d7e0 <__clzsi2>
  80ce78:	113ffe04 	addi	r4,r2,-8
  80ce7c:	00c007c4 	movi	r3,31
  80ce80:	19007b16 	blt	r3,r4,80d070 <__subdf3+0x390>
  80ce84:	00800804 	movi	r2,32
  80ce88:	1105c83a 	sub	r2,r2,r4
  80ce8c:	8884d83a 	srl	r2,r17,r2
  80ce90:	9906983a 	sll	r3,r19,r4
  80ce94:	8922983a 	sll	r17,r17,r4
  80ce98:	10c4b03a 	or	r2,r2,r3
  80ce9c:	24007816 	blt	r4,r16,80d080 <__subdf3+0x3a0>
  80cea0:	2421c83a 	sub	r16,r4,r16
  80cea4:	80c00044 	addi	r3,r16,1
  80cea8:	010007c4 	movi	r4,31
  80ceac:	20c09516 	blt	r4,r3,80d104 <__subdf3+0x424>
  80ceb0:	01400804 	movi	r5,32
  80ceb4:	28cbc83a 	sub	r5,r5,r3
  80ceb8:	88c8d83a 	srl	r4,r17,r3
  80cebc:	8962983a 	sll	r17,r17,r5
  80cec0:	114a983a 	sll	r5,r2,r5
  80cec4:	10c6d83a 	srl	r3,r2,r3
  80cec8:	8804c03a 	cmpne	r2,r17,zero
  80cecc:	290ab03a 	or	r5,r5,r4
  80ced0:	28a2b03a 	or	r17,r5,r2
  80ced4:	0021883a 	mov	r16,zero
  80ced8:	003fa206 	br	80cd64 <__alt_mem_onchip_mem+0xff804d64>
  80cedc:	2090b03a 	or	r8,r4,r2
  80cee0:	40018e26 	beq	r8,zero,80d51c <__subdf3+0x83c>
  80cee4:	1007883a 	mov	r3,r2
  80cee8:	2023883a 	mov	r17,r4
  80ceec:	888001cc 	andi	r2,r17,7
  80cef0:	103f9e1e 	bne	r2,zero,80cd6c <__alt_mem_onchip_mem+0xff804d6c>
  80cef4:	1804977a 	slli	r2,r3,29
  80cef8:	8822d0fa 	srli	r17,r17,3
  80cefc:	1810d0fa 	srli	r8,r3,3
  80cf00:	9100004c 	andi	r4,r18,1
  80cf04:	1444b03a 	or	r2,r2,r17
  80cf08:	00c1ffc4 	movi	r3,2047
  80cf0c:	80c02826 	beq	r16,r3,80cfb0 <__subdf3+0x2d0>
  80cf10:	01400434 	movhi	r5,16
  80cf14:	297fffc4 	addi	r5,r5,-1
  80cf18:	80e0703a 	and	r16,r16,r3
  80cf1c:	414a703a 	and	r5,r8,r5
  80cf20:	003fa806 	br	80cdc4 <__alt_mem_onchip_mem+0xff804dc4>
  80cf24:	0080630e 	bge	zero,r2,80d0b4 <__subdf3+0x3d4>
  80cf28:	48003026 	beq	r9,zero,80cfec <__subdf3+0x30c>
  80cf2c:	0101ffc4 	movi	r4,2047
  80cf30:	813f8c26 	beq	r16,r4,80cd64 <__alt_mem_onchip_mem+0xff804d64>
  80cf34:	29402034 	orhi	r5,r5,128
  80cf38:	01000e04 	movi	r4,56
  80cf3c:	2080a90e 	bge	r4,r2,80d1e4 <__subdf3+0x504>
  80cf40:	298cb03a 	or	r6,r5,r6
  80cf44:	3012c03a 	cmpne	r9,r6,zero
  80cf48:	0005883a 	mov	r2,zero
  80cf4c:	4c53883a 	add	r9,r9,r17
  80cf50:	4c63803a 	cmpltu	r17,r9,r17
  80cf54:	10c7883a 	add	r3,r2,r3
  80cf58:	88c7883a 	add	r3,r17,r3
  80cf5c:	4823883a 	mov	r17,r9
  80cf60:	1880202c 	andhi	r2,r3,128
  80cf64:	1000d026 	beq	r2,zero,80d2a8 <__subdf3+0x5c8>
  80cf68:	84000044 	addi	r16,r16,1
  80cf6c:	0081ffc4 	movi	r2,2047
  80cf70:	8080fe26 	beq	r16,r2,80d36c <__subdf3+0x68c>
  80cf74:	00bfe034 	movhi	r2,65408
  80cf78:	10bfffc4 	addi	r2,r2,-1
  80cf7c:	1886703a 	and	r3,r3,r2
  80cf80:	880ad07a 	srli	r5,r17,1
  80cf84:	180497fa 	slli	r2,r3,31
  80cf88:	8900004c 	andi	r4,r17,1
  80cf8c:	2922b03a 	or	r17,r5,r4
  80cf90:	1806d07a 	srli	r3,r3,1
  80cf94:	1462b03a 	or	r17,r2,r17
  80cf98:	3825883a 	mov	r18,r7
  80cf9c:	003f7106 	br	80cd64 <__alt_mem_onchip_mem+0xff804d64>
  80cfa0:	2984b03a 	or	r2,r5,r6
  80cfa4:	103f6826 	beq	r2,zero,80cd48 <__alt_mem_onchip_mem+0xff804d48>
  80cfa8:	39c03fcc 	andi	r7,r7,255
  80cfac:	003f6706 	br	80cd4c <__alt_mem_onchip_mem+0xff804d4c>
  80cfb0:	4086b03a 	or	r3,r8,r2
  80cfb4:	18015226 	beq	r3,zero,80d500 <__subdf3+0x820>
  80cfb8:	00c00434 	movhi	r3,16
  80cfbc:	41400234 	orhi	r5,r8,8
  80cfc0:	18ffffc4 	addi	r3,r3,-1
  80cfc4:	28ca703a 	and	r5,r5,r3
  80cfc8:	003f7e06 	br	80cdc4 <__alt_mem_onchip_mem+0xff804dc4>
  80cfcc:	10bfffc4 	addi	r2,r2,-1
  80cfd0:	1000491e 	bne	r2,zero,80d0f8 <__subdf3+0x418>
  80cfd4:	898fc83a 	sub	r7,r17,r6
  80cfd8:	89e3803a 	cmpltu	r17,r17,r7
  80cfdc:	1947c83a 	sub	r3,r3,r5
  80cfe0:	1c47c83a 	sub	r3,r3,r17
  80cfe4:	3823883a 	mov	r17,r7
  80cfe8:	003f9b06 	br	80ce58 <__alt_mem_onchip_mem+0xff804e58>
  80cfec:	2988b03a 	or	r4,r5,r6
  80cff0:	203f5c26 	beq	r4,zero,80cd64 <__alt_mem_onchip_mem+0xff804d64>
  80cff4:	10bfffc4 	addi	r2,r2,-1
  80cff8:	1000931e 	bne	r2,zero,80d248 <__subdf3+0x568>
  80cffc:	898d883a 	add	r6,r17,r6
  80d000:	3463803a 	cmpltu	r17,r6,r17
  80d004:	1947883a 	add	r3,r3,r5
  80d008:	88c7883a 	add	r3,r17,r3
  80d00c:	3023883a 	mov	r17,r6
  80d010:	003fd306 	br	80cf60 <__alt_mem_onchip_mem+0xff804f60>
  80d014:	1000541e 	bne	r2,zero,80d168 <__subdf3+0x488>
  80d018:	80800044 	addi	r2,r16,1
  80d01c:	1081ffcc 	andi	r2,r2,2047
  80d020:	01000044 	movi	r4,1
  80d024:	2080a20e 	bge	r4,r2,80d2b0 <__subdf3+0x5d0>
  80d028:	8989c83a 	sub	r4,r17,r6
  80d02c:	8905803a 	cmpltu	r2,r17,r4
  80d030:	1967c83a 	sub	r19,r3,r5
  80d034:	98a7c83a 	sub	r19,r19,r2
  80d038:	9880202c 	andhi	r2,r19,128
  80d03c:	10006326 	beq	r2,zero,80d1cc <__subdf3+0x4ec>
  80d040:	3463c83a 	sub	r17,r6,r17
  80d044:	28c7c83a 	sub	r3,r5,r3
  80d048:	344d803a 	cmpltu	r6,r6,r17
  80d04c:	19a7c83a 	sub	r19,r3,r6
  80d050:	3825883a 	mov	r18,r7
  80d054:	983f861e 	bne	r19,zero,80ce70 <__alt_mem_onchip_mem+0xff804e70>
  80d058:	8809883a 	mov	r4,r17
  80d05c:	080d7e00 	call	80d7e0 <__clzsi2>
  80d060:	10800804 	addi	r2,r2,32
  80d064:	113ffe04 	addi	r4,r2,-8
  80d068:	00c007c4 	movi	r3,31
  80d06c:	193f850e 	bge	r3,r4,80ce84 <__alt_mem_onchip_mem+0xff804e84>
  80d070:	10bff604 	addi	r2,r2,-40
  80d074:	8884983a 	sll	r2,r17,r2
  80d078:	0023883a 	mov	r17,zero
  80d07c:	243f880e 	bge	r4,r16,80cea0 <__alt_mem_onchip_mem+0xff804ea0>
  80d080:	00ffe034 	movhi	r3,65408
  80d084:	18ffffc4 	addi	r3,r3,-1
  80d088:	8121c83a 	sub	r16,r16,r4
  80d08c:	10c6703a 	and	r3,r2,r3
  80d090:	003f3406 	br	80cd64 <__alt_mem_onchip_mem+0xff804d64>
  80d094:	9100004c 	andi	r4,r18,1
  80d098:	000b883a 	mov	r5,zero
  80d09c:	0005883a 	mov	r2,zero
  80d0a0:	003f4806 	br	80cdc4 <__alt_mem_onchip_mem+0xff804dc4>
  80d0a4:	298cb03a 	or	r6,r5,r6
  80d0a8:	300cc03a 	cmpne	r6,r6,zero
  80d0ac:	0005883a 	mov	r2,zero
  80d0b0:	003f6406 	br	80ce44 <__alt_mem_onchip_mem+0xff804e44>
  80d0b4:	10009a1e 	bne	r2,zero,80d320 <__subdf3+0x640>
  80d0b8:	82400044 	addi	r9,r16,1
  80d0bc:	4881ffcc 	andi	r2,r9,2047
  80d0c0:	02800044 	movi	r10,1
  80d0c4:	5080670e 	bge	r10,r2,80d264 <__subdf3+0x584>
  80d0c8:	0081ffc4 	movi	r2,2047
  80d0cc:	4880af26 	beq	r9,r2,80d38c <__subdf3+0x6ac>
  80d0d0:	898d883a 	add	r6,r17,r6
  80d0d4:	1945883a 	add	r2,r3,r5
  80d0d8:	3447803a 	cmpltu	r3,r6,r17
  80d0dc:	1887883a 	add	r3,r3,r2
  80d0e0:	182297fa 	slli	r17,r3,31
  80d0e4:	300cd07a 	srli	r6,r6,1
  80d0e8:	1806d07a 	srli	r3,r3,1
  80d0ec:	4821883a 	mov	r16,r9
  80d0f0:	89a2b03a 	or	r17,r17,r6
  80d0f4:	003f1b06 	br	80cd64 <__alt_mem_onchip_mem+0xff804d64>
  80d0f8:	0101ffc4 	movi	r4,2047
  80d0fc:	813f441e 	bne	r16,r4,80ce10 <__alt_mem_onchip_mem+0xff804e10>
  80d100:	003f1806 	br	80cd64 <__alt_mem_onchip_mem+0xff804d64>
  80d104:	843ff844 	addi	r16,r16,-31
  80d108:	01400804 	movi	r5,32
  80d10c:	1408d83a 	srl	r4,r2,r16
  80d110:	19405026 	beq	r3,r5,80d254 <__subdf3+0x574>
  80d114:	01401004 	movi	r5,64
  80d118:	28c7c83a 	sub	r3,r5,r3
  80d11c:	10c4983a 	sll	r2,r2,r3
  80d120:	88a2b03a 	or	r17,r17,r2
  80d124:	8822c03a 	cmpne	r17,r17,zero
  80d128:	2462b03a 	or	r17,r4,r17
  80d12c:	0007883a 	mov	r3,zero
  80d130:	0021883a 	mov	r16,zero
  80d134:	003f6d06 	br	80ceec <__alt_mem_onchip_mem+0xff804eec>
  80d138:	11fff804 	addi	r7,r2,-32
  80d13c:	01000804 	movi	r4,32
  80d140:	29ced83a 	srl	r7,r5,r7
  80d144:	11004526 	beq	r2,r4,80d25c <__subdf3+0x57c>
  80d148:	01001004 	movi	r4,64
  80d14c:	2089c83a 	sub	r4,r4,r2
  80d150:	2904983a 	sll	r2,r5,r4
  80d154:	118cb03a 	or	r6,r2,r6
  80d158:	300cc03a 	cmpne	r6,r6,zero
  80d15c:	398cb03a 	or	r6,r7,r6
  80d160:	0005883a 	mov	r2,zero
  80d164:	003f3706 	br	80ce44 <__alt_mem_onchip_mem+0xff804e44>
  80d168:	80002a26 	beq	r16,zero,80d214 <__subdf3+0x534>
  80d16c:	0101ffc4 	movi	r4,2047
  80d170:	49006626 	beq	r9,r4,80d30c <__subdf3+0x62c>
  80d174:	0085c83a 	sub	r2,zero,r2
  80d178:	18c02034 	orhi	r3,r3,128
  80d17c:	01000e04 	movi	r4,56
  80d180:	20807e16 	blt	r4,r2,80d37c <__subdf3+0x69c>
  80d184:	010007c4 	movi	r4,31
  80d188:	2080e716 	blt	r4,r2,80d528 <__subdf3+0x848>
  80d18c:	01000804 	movi	r4,32
  80d190:	2089c83a 	sub	r4,r4,r2
  80d194:	1914983a 	sll	r10,r3,r4
  80d198:	8890d83a 	srl	r8,r17,r2
  80d19c:	8908983a 	sll	r4,r17,r4
  80d1a0:	1884d83a 	srl	r2,r3,r2
  80d1a4:	5222b03a 	or	r17,r10,r8
  80d1a8:	2006c03a 	cmpne	r3,r4,zero
  80d1ac:	88e2b03a 	or	r17,r17,r3
  80d1b0:	3463c83a 	sub	r17,r6,r17
  80d1b4:	2885c83a 	sub	r2,r5,r2
  80d1b8:	344d803a 	cmpltu	r6,r6,r17
  80d1bc:	1187c83a 	sub	r3,r2,r6
  80d1c0:	4821883a 	mov	r16,r9
  80d1c4:	3825883a 	mov	r18,r7
  80d1c8:	003f2306 	br	80ce58 <__alt_mem_onchip_mem+0xff804e58>
  80d1cc:	24d0b03a 	or	r8,r4,r19
  80d1d0:	40001b1e 	bne	r8,zero,80d240 <__subdf3+0x560>
  80d1d4:	0005883a 	mov	r2,zero
  80d1d8:	0009883a 	mov	r4,zero
  80d1dc:	0021883a 	mov	r16,zero
  80d1e0:	003f4906 	br	80cf08 <__alt_mem_onchip_mem+0xff804f08>
  80d1e4:	010007c4 	movi	r4,31
  80d1e8:	20803a16 	blt	r4,r2,80d2d4 <__subdf3+0x5f4>
  80d1ec:	01000804 	movi	r4,32
  80d1f0:	2089c83a 	sub	r4,r4,r2
  80d1f4:	2912983a 	sll	r9,r5,r4
  80d1f8:	3090d83a 	srl	r8,r6,r2
  80d1fc:	3108983a 	sll	r4,r6,r4
  80d200:	2884d83a 	srl	r2,r5,r2
  80d204:	4a12b03a 	or	r9,r9,r8
  80d208:	2008c03a 	cmpne	r4,r4,zero
  80d20c:	4912b03a 	or	r9,r9,r4
  80d210:	003f4e06 	br	80cf4c <__alt_mem_onchip_mem+0xff804f4c>
  80d214:	1c48b03a 	or	r4,r3,r17
  80d218:	20003c26 	beq	r4,zero,80d30c <__subdf3+0x62c>
  80d21c:	0084303a 	nor	r2,zero,r2
  80d220:	1000381e 	bne	r2,zero,80d304 <__subdf3+0x624>
  80d224:	3463c83a 	sub	r17,r6,r17
  80d228:	28c5c83a 	sub	r2,r5,r3
  80d22c:	344d803a 	cmpltu	r6,r6,r17
  80d230:	1187c83a 	sub	r3,r2,r6
  80d234:	4821883a 	mov	r16,r9
  80d238:	3825883a 	mov	r18,r7
  80d23c:	003f0606 	br	80ce58 <__alt_mem_onchip_mem+0xff804e58>
  80d240:	2023883a 	mov	r17,r4
  80d244:	003f0906 	br	80ce6c <__alt_mem_onchip_mem+0xff804e6c>
  80d248:	0101ffc4 	movi	r4,2047
  80d24c:	813f3a1e 	bne	r16,r4,80cf38 <__alt_mem_onchip_mem+0xff804f38>
  80d250:	003ec406 	br	80cd64 <__alt_mem_onchip_mem+0xff804d64>
  80d254:	0005883a 	mov	r2,zero
  80d258:	003fb106 	br	80d120 <__alt_mem_onchip_mem+0xff805120>
  80d25c:	0005883a 	mov	r2,zero
  80d260:	003fbc06 	br	80d154 <__alt_mem_onchip_mem+0xff805154>
  80d264:	1c44b03a 	or	r2,r3,r17
  80d268:	80008e1e 	bne	r16,zero,80d4a4 <__subdf3+0x7c4>
  80d26c:	1000c826 	beq	r2,zero,80d590 <__subdf3+0x8b0>
  80d270:	2984b03a 	or	r2,r5,r6
  80d274:	103ebb26 	beq	r2,zero,80cd64 <__alt_mem_onchip_mem+0xff804d64>
  80d278:	8989883a 	add	r4,r17,r6
  80d27c:	1945883a 	add	r2,r3,r5
  80d280:	2447803a 	cmpltu	r3,r4,r17
  80d284:	1887883a 	add	r3,r3,r2
  80d288:	1880202c 	andhi	r2,r3,128
  80d28c:	2023883a 	mov	r17,r4
  80d290:	103f1626 	beq	r2,zero,80ceec <__alt_mem_onchip_mem+0xff804eec>
  80d294:	00bfe034 	movhi	r2,65408
  80d298:	10bfffc4 	addi	r2,r2,-1
  80d29c:	5021883a 	mov	r16,r10
  80d2a0:	1886703a 	and	r3,r3,r2
  80d2a4:	003eaf06 	br	80cd64 <__alt_mem_onchip_mem+0xff804d64>
  80d2a8:	3825883a 	mov	r18,r7
  80d2ac:	003f0f06 	br	80ceec <__alt_mem_onchip_mem+0xff804eec>
  80d2b0:	1c44b03a 	or	r2,r3,r17
  80d2b4:	8000251e 	bne	r16,zero,80d34c <__subdf3+0x66c>
  80d2b8:	1000661e 	bne	r2,zero,80d454 <__subdf3+0x774>
  80d2bc:	2990b03a 	or	r8,r5,r6
  80d2c0:	40009626 	beq	r8,zero,80d51c <__subdf3+0x83c>
  80d2c4:	2807883a 	mov	r3,r5
  80d2c8:	3023883a 	mov	r17,r6
  80d2cc:	3825883a 	mov	r18,r7
  80d2d0:	003ea406 	br	80cd64 <__alt_mem_onchip_mem+0xff804d64>
  80d2d4:	127ff804 	addi	r9,r2,-32
  80d2d8:	01000804 	movi	r4,32
  80d2dc:	2a52d83a 	srl	r9,r5,r9
  80d2e0:	11008c26 	beq	r2,r4,80d514 <__subdf3+0x834>
  80d2e4:	01001004 	movi	r4,64
  80d2e8:	2085c83a 	sub	r2,r4,r2
  80d2ec:	2884983a 	sll	r2,r5,r2
  80d2f0:	118cb03a 	or	r6,r2,r6
  80d2f4:	300cc03a 	cmpne	r6,r6,zero
  80d2f8:	4992b03a 	or	r9,r9,r6
  80d2fc:	0005883a 	mov	r2,zero
  80d300:	003f1206 	br	80cf4c <__alt_mem_onchip_mem+0xff804f4c>
  80d304:	0101ffc4 	movi	r4,2047
  80d308:	493f9c1e 	bne	r9,r4,80d17c <__alt_mem_onchip_mem+0xff80517c>
  80d30c:	2807883a 	mov	r3,r5
  80d310:	3023883a 	mov	r17,r6
  80d314:	4821883a 	mov	r16,r9
  80d318:	3825883a 	mov	r18,r7
  80d31c:	003e9106 	br	80cd64 <__alt_mem_onchip_mem+0xff804d64>
  80d320:	80001f1e 	bne	r16,zero,80d3a0 <__subdf3+0x6c0>
  80d324:	1c48b03a 	or	r4,r3,r17
  80d328:	20005a26 	beq	r4,zero,80d494 <__subdf3+0x7b4>
  80d32c:	0084303a 	nor	r2,zero,r2
  80d330:	1000561e 	bne	r2,zero,80d48c <__subdf3+0x7ac>
  80d334:	89a3883a 	add	r17,r17,r6
  80d338:	1945883a 	add	r2,r3,r5
  80d33c:	898d803a 	cmpltu	r6,r17,r6
  80d340:	3087883a 	add	r3,r6,r2
  80d344:	4821883a 	mov	r16,r9
  80d348:	003f0506 	br	80cf60 <__alt_mem_onchip_mem+0xff804f60>
  80d34c:	10002b1e 	bne	r2,zero,80d3fc <__subdf3+0x71c>
  80d350:	2984b03a 	or	r2,r5,r6
  80d354:	10008026 	beq	r2,zero,80d558 <__subdf3+0x878>
  80d358:	2807883a 	mov	r3,r5
  80d35c:	3023883a 	mov	r17,r6
  80d360:	3825883a 	mov	r18,r7
  80d364:	0401ffc4 	movi	r16,2047
  80d368:	003e7e06 	br	80cd64 <__alt_mem_onchip_mem+0xff804d64>
  80d36c:	3809883a 	mov	r4,r7
  80d370:	0011883a 	mov	r8,zero
  80d374:	0005883a 	mov	r2,zero
  80d378:	003ee306 	br	80cf08 <__alt_mem_onchip_mem+0xff804f08>
  80d37c:	1c62b03a 	or	r17,r3,r17
  80d380:	8822c03a 	cmpne	r17,r17,zero
  80d384:	0005883a 	mov	r2,zero
  80d388:	003f8906 	br	80d1b0 <__alt_mem_onchip_mem+0xff8051b0>
  80d38c:	3809883a 	mov	r4,r7
  80d390:	4821883a 	mov	r16,r9
  80d394:	0011883a 	mov	r8,zero
  80d398:	0005883a 	mov	r2,zero
  80d39c:	003eda06 	br	80cf08 <__alt_mem_onchip_mem+0xff804f08>
  80d3a0:	0101ffc4 	movi	r4,2047
  80d3a4:	49003b26 	beq	r9,r4,80d494 <__subdf3+0x7b4>
  80d3a8:	0085c83a 	sub	r2,zero,r2
  80d3ac:	18c02034 	orhi	r3,r3,128
  80d3b0:	01000e04 	movi	r4,56
  80d3b4:	20806e16 	blt	r4,r2,80d570 <__subdf3+0x890>
  80d3b8:	010007c4 	movi	r4,31
  80d3bc:	20807716 	blt	r4,r2,80d59c <__subdf3+0x8bc>
  80d3c0:	01000804 	movi	r4,32
  80d3c4:	2089c83a 	sub	r4,r4,r2
  80d3c8:	1914983a 	sll	r10,r3,r4
  80d3cc:	8890d83a 	srl	r8,r17,r2
  80d3d0:	8908983a 	sll	r4,r17,r4
  80d3d4:	1884d83a 	srl	r2,r3,r2
  80d3d8:	5222b03a 	or	r17,r10,r8
  80d3dc:	2006c03a 	cmpne	r3,r4,zero
  80d3e0:	88e2b03a 	or	r17,r17,r3
  80d3e4:	89a3883a 	add	r17,r17,r6
  80d3e8:	1145883a 	add	r2,r2,r5
  80d3ec:	898d803a 	cmpltu	r6,r17,r6
  80d3f0:	3087883a 	add	r3,r6,r2
  80d3f4:	4821883a 	mov	r16,r9
  80d3f8:	003ed906 	br	80cf60 <__alt_mem_onchip_mem+0xff804f60>
  80d3fc:	2984b03a 	or	r2,r5,r6
  80d400:	10004226 	beq	r2,zero,80d50c <__subdf3+0x82c>
  80d404:	1808d0fa 	srli	r4,r3,3
  80d408:	8822d0fa 	srli	r17,r17,3
  80d40c:	1806977a 	slli	r3,r3,29
  80d410:	2080022c 	andhi	r2,r4,8
  80d414:	1c62b03a 	or	r17,r3,r17
  80d418:	10000826 	beq	r2,zero,80d43c <__subdf3+0x75c>
  80d41c:	2812d0fa 	srli	r9,r5,3
  80d420:	4880022c 	andhi	r2,r9,8
  80d424:	1000051e 	bne	r2,zero,80d43c <__subdf3+0x75c>
  80d428:	300cd0fa 	srli	r6,r6,3
  80d42c:	2804977a 	slli	r2,r5,29
  80d430:	4809883a 	mov	r4,r9
  80d434:	3825883a 	mov	r18,r7
  80d438:	11a2b03a 	or	r17,r2,r6
  80d43c:	8806d77a 	srli	r3,r17,29
  80d440:	200890fa 	slli	r4,r4,3
  80d444:	882290fa 	slli	r17,r17,3
  80d448:	0401ffc4 	movi	r16,2047
  80d44c:	1906b03a 	or	r3,r3,r4
  80d450:	003e4406 	br	80cd64 <__alt_mem_onchip_mem+0xff804d64>
  80d454:	2984b03a 	or	r2,r5,r6
  80d458:	103e4226 	beq	r2,zero,80cd64 <__alt_mem_onchip_mem+0xff804d64>
  80d45c:	8989c83a 	sub	r4,r17,r6
  80d460:	8911803a 	cmpltu	r8,r17,r4
  80d464:	1945c83a 	sub	r2,r3,r5
  80d468:	1205c83a 	sub	r2,r2,r8
  80d46c:	1200202c 	andhi	r8,r2,128
  80d470:	403e9a26 	beq	r8,zero,80cedc <__alt_mem_onchip_mem+0xff804edc>
  80d474:	3463c83a 	sub	r17,r6,r17
  80d478:	28c5c83a 	sub	r2,r5,r3
  80d47c:	344d803a 	cmpltu	r6,r6,r17
  80d480:	1187c83a 	sub	r3,r2,r6
  80d484:	3825883a 	mov	r18,r7
  80d488:	003e3606 	br	80cd64 <__alt_mem_onchip_mem+0xff804d64>
  80d48c:	0101ffc4 	movi	r4,2047
  80d490:	493fc71e 	bne	r9,r4,80d3b0 <__alt_mem_onchip_mem+0xff8053b0>
  80d494:	2807883a 	mov	r3,r5
  80d498:	3023883a 	mov	r17,r6
  80d49c:	4821883a 	mov	r16,r9
  80d4a0:	003e3006 	br	80cd64 <__alt_mem_onchip_mem+0xff804d64>
  80d4a4:	10003626 	beq	r2,zero,80d580 <__subdf3+0x8a0>
  80d4a8:	2984b03a 	or	r2,r5,r6
  80d4ac:	10001726 	beq	r2,zero,80d50c <__subdf3+0x82c>
  80d4b0:	1808d0fa 	srli	r4,r3,3
  80d4b4:	8822d0fa 	srli	r17,r17,3
  80d4b8:	1806977a 	slli	r3,r3,29
  80d4bc:	2080022c 	andhi	r2,r4,8
  80d4c0:	1c62b03a 	or	r17,r3,r17
  80d4c4:	10000726 	beq	r2,zero,80d4e4 <__subdf3+0x804>
  80d4c8:	2812d0fa 	srli	r9,r5,3
  80d4cc:	4880022c 	andhi	r2,r9,8
  80d4d0:	1000041e 	bne	r2,zero,80d4e4 <__subdf3+0x804>
  80d4d4:	300cd0fa 	srli	r6,r6,3
  80d4d8:	2804977a 	slli	r2,r5,29
  80d4dc:	4809883a 	mov	r4,r9
  80d4e0:	11a2b03a 	or	r17,r2,r6
  80d4e4:	8806d77a 	srli	r3,r17,29
  80d4e8:	200890fa 	slli	r4,r4,3
  80d4ec:	882290fa 	slli	r17,r17,3
  80d4f0:	3825883a 	mov	r18,r7
  80d4f4:	1906b03a 	or	r3,r3,r4
  80d4f8:	0401ffc4 	movi	r16,2047
  80d4fc:	003e1906 	br	80cd64 <__alt_mem_onchip_mem+0xff804d64>
  80d500:	000b883a 	mov	r5,zero
  80d504:	0005883a 	mov	r2,zero
  80d508:	003e2e06 	br	80cdc4 <__alt_mem_onchip_mem+0xff804dc4>
  80d50c:	0401ffc4 	movi	r16,2047
  80d510:	003e1406 	br	80cd64 <__alt_mem_onchip_mem+0xff804d64>
  80d514:	0005883a 	mov	r2,zero
  80d518:	003f7506 	br	80d2f0 <__alt_mem_onchip_mem+0xff8052f0>
  80d51c:	0005883a 	mov	r2,zero
  80d520:	0009883a 	mov	r4,zero
  80d524:	003e7806 	br	80cf08 <__alt_mem_onchip_mem+0xff804f08>
  80d528:	123ff804 	addi	r8,r2,-32
  80d52c:	01000804 	movi	r4,32
  80d530:	1a10d83a 	srl	r8,r3,r8
  80d534:	11002526 	beq	r2,r4,80d5cc <__subdf3+0x8ec>
  80d538:	01001004 	movi	r4,64
  80d53c:	2085c83a 	sub	r2,r4,r2
  80d540:	1884983a 	sll	r2,r3,r2
  80d544:	1444b03a 	or	r2,r2,r17
  80d548:	1004c03a 	cmpne	r2,r2,zero
  80d54c:	40a2b03a 	or	r17,r8,r2
  80d550:	0005883a 	mov	r2,zero
  80d554:	003f1606 	br	80d1b0 <__alt_mem_onchip_mem+0xff8051b0>
  80d558:	02000434 	movhi	r8,16
  80d55c:	0009883a 	mov	r4,zero
  80d560:	423fffc4 	addi	r8,r8,-1
  80d564:	00bfffc4 	movi	r2,-1
  80d568:	0401ffc4 	movi	r16,2047
  80d56c:	003e6606 	br	80cf08 <__alt_mem_onchip_mem+0xff804f08>
  80d570:	1c62b03a 	or	r17,r3,r17
  80d574:	8822c03a 	cmpne	r17,r17,zero
  80d578:	0005883a 	mov	r2,zero
  80d57c:	003f9906 	br	80d3e4 <__alt_mem_onchip_mem+0xff8053e4>
  80d580:	2807883a 	mov	r3,r5
  80d584:	3023883a 	mov	r17,r6
  80d588:	0401ffc4 	movi	r16,2047
  80d58c:	003df506 	br	80cd64 <__alt_mem_onchip_mem+0xff804d64>
  80d590:	2807883a 	mov	r3,r5
  80d594:	3023883a 	mov	r17,r6
  80d598:	003df206 	br	80cd64 <__alt_mem_onchip_mem+0xff804d64>
  80d59c:	123ff804 	addi	r8,r2,-32
  80d5a0:	01000804 	movi	r4,32
  80d5a4:	1a10d83a 	srl	r8,r3,r8
  80d5a8:	11000a26 	beq	r2,r4,80d5d4 <__subdf3+0x8f4>
  80d5ac:	01001004 	movi	r4,64
  80d5b0:	2085c83a 	sub	r2,r4,r2
  80d5b4:	1884983a 	sll	r2,r3,r2
  80d5b8:	1444b03a 	or	r2,r2,r17
  80d5bc:	1004c03a 	cmpne	r2,r2,zero
  80d5c0:	40a2b03a 	or	r17,r8,r2
  80d5c4:	0005883a 	mov	r2,zero
  80d5c8:	003f8606 	br	80d3e4 <__alt_mem_onchip_mem+0xff8053e4>
  80d5cc:	0005883a 	mov	r2,zero
  80d5d0:	003fdc06 	br	80d544 <__alt_mem_onchip_mem+0xff805544>
  80d5d4:	0005883a 	mov	r2,zero
  80d5d8:	003ff706 	br	80d5b8 <__alt_mem_onchip_mem+0xff8055b8>

0080d5dc <__fixdfsi>:
  80d5dc:	280cd53a 	srli	r6,r5,20
  80d5e0:	00c00434 	movhi	r3,16
  80d5e4:	18ffffc4 	addi	r3,r3,-1
  80d5e8:	3181ffcc 	andi	r6,r6,2047
  80d5ec:	01c0ff84 	movi	r7,1022
  80d5f0:	28c6703a 	and	r3,r5,r3
  80d5f4:	280ad7fa 	srli	r5,r5,31
  80d5f8:	3980120e 	bge	r7,r6,80d644 <__fixdfsi+0x68>
  80d5fc:	00810744 	movi	r2,1053
  80d600:	11800c16 	blt	r2,r6,80d634 <__fixdfsi+0x58>
  80d604:	00810cc4 	movi	r2,1075
  80d608:	1185c83a 	sub	r2,r2,r6
  80d60c:	01c007c4 	movi	r7,31
  80d610:	18c00434 	orhi	r3,r3,16
  80d614:	38800d16 	blt	r7,r2,80d64c <__fixdfsi+0x70>
  80d618:	31befb44 	addi	r6,r6,-1043
  80d61c:	2084d83a 	srl	r2,r4,r2
  80d620:	1986983a 	sll	r3,r3,r6
  80d624:	1884b03a 	or	r2,r3,r2
  80d628:	28000726 	beq	r5,zero,80d648 <__fixdfsi+0x6c>
  80d62c:	0085c83a 	sub	r2,zero,r2
  80d630:	f800283a 	ret
  80d634:	00a00034 	movhi	r2,32768
  80d638:	10bfffc4 	addi	r2,r2,-1
  80d63c:	2885883a 	add	r2,r5,r2
  80d640:	f800283a 	ret
  80d644:	0005883a 	mov	r2,zero
  80d648:	f800283a 	ret
  80d64c:	008104c4 	movi	r2,1043
  80d650:	1185c83a 	sub	r2,r2,r6
  80d654:	1884d83a 	srl	r2,r3,r2
  80d658:	003ff306 	br	80d628 <__alt_mem_onchip_mem+0xff805628>

0080d65c <__floatsidf>:
  80d65c:	defffd04 	addi	sp,sp,-12
  80d660:	dfc00215 	stw	ra,8(sp)
  80d664:	dc400115 	stw	r17,4(sp)
  80d668:	dc000015 	stw	r16,0(sp)
  80d66c:	20002b26 	beq	r4,zero,80d71c <__floatsidf+0xc0>
  80d670:	2023883a 	mov	r17,r4
  80d674:	2020d7fa 	srli	r16,r4,31
  80d678:	20002d16 	blt	r4,zero,80d730 <__floatsidf+0xd4>
  80d67c:	8809883a 	mov	r4,r17
  80d680:	080d7e00 	call	80d7e0 <__clzsi2>
  80d684:	01410784 	movi	r5,1054
  80d688:	288bc83a 	sub	r5,r5,r2
  80d68c:	01010cc4 	movi	r4,1075
  80d690:	2149c83a 	sub	r4,r4,r5
  80d694:	00c007c4 	movi	r3,31
  80d698:	1900160e 	bge	r3,r4,80d6f4 <__floatsidf+0x98>
  80d69c:	00c104c4 	movi	r3,1043
  80d6a0:	1947c83a 	sub	r3,r3,r5
  80d6a4:	88c6983a 	sll	r3,r17,r3
  80d6a8:	00800434 	movhi	r2,16
  80d6ac:	10bfffc4 	addi	r2,r2,-1
  80d6b0:	1886703a 	and	r3,r3,r2
  80d6b4:	2941ffcc 	andi	r5,r5,2047
  80d6b8:	800d883a 	mov	r6,r16
  80d6bc:	0005883a 	mov	r2,zero
  80d6c0:	280a953a 	slli	r5,r5,20
  80d6c4:	31803fcc 	andi	r6,r6,255
  80d6c8:	01000434 	movhi	r4,16
  80d6cc:	300c97fa 	slli	r6,r6,31
  80d6d0:	213fffc4 	addi	r4,r4,-1
  80d6d4:	1906703a 	and	r3,r3,r4
  80d6d8:	1946b03a 	or	r3,r3,r5
  80d6dc:	1986b03a 	or	r3,r3,r6
  80d6e0:	dfc00217 	ldw	ra,8(sp)
  80d6e4:	dc400117 	ldw	r17,4(sp)
  80d6e8:	dc000017 	ldw	r16,0(sp)
  80d6ec:	dec00304 	addi	sp,sp,12
  80d6f0:	f800283a 	ret
  80d6f4:	00c002c4 	movi	r3,11
  80d6f8:	1887c83a 	sub	r3,r3,r2
  80d6fc:	88c6d83a 	srl	r3,r17,r3
  80d700:	8904983a 	sll	r2,r17,r4
  80d704:	01000434 	movhi	r4,16
  80d708:	213fffc4 	addi	r4,r4,-1
  80d70c:	2941ffcc 	andi	r5,r5,2047
  80d710:	1906703a 	and	r3,r3,r4
  80d714:	800d883a 	mov	r6,r16
  80d718:	003fe906 	br	80d6c0 <__alt_mem_onchip_mem+0xff8056c0>
  80d71c:	000d883a 	mov	r6,zero
  80d720:	000b883a 	mov	r5,zero
  80d724:	0007883a 	mov	r3,zero
  80d728:	0005883a 	mov	r2,zero
  80d72c:	003fe406 	br	80d6c0 <__alt_mem_onchip_mem+0xff8056c0>
  80d730:	0123c83a 	sub	r17,zero,r4
  80d734:	003fd106 	br	80d67c <__alt_mem_onchip_mem+0xff80567c>

0080d738 <__floatunsidf>:
  80d738:	defffe04 	addi	sp,sp,-8
  80d73c:	dc000015 	stw	r16,0(sp)
  80d740:	dfc00115 	stw	ra,4(sp)
  80d744:	2021883a 	mov	r16,r4
  80d748:	20002226 	beq	r4,zero,80d7d4 <__floatunsidf+0x9c>
  80d74c:	080d7e00 	call	80d7e0 <__clzsi2>
  80d750:	01010784 	movi	r4,1054
  80d754:	2089c83a 	sub	r4,r4,r2
  80d758:	01810cc4 	movi	r6,1075
  80d75c:	310dc83a 	sub	r6,r6,r4
  80d760:	00c007c4 	movi	r3,31
  80d764:	1980120e 	bge	r3,r6,80d7b0 <__floatunsidf+0x78>
  80d768:	00c104c4 	movi	r3,1043
  80d76c:	1907c83a 	sub	r3,r3,r4
  80d770:	80ca983a 	sll	r5,r16,r3
  80d774:	00800434 	movhi	r2,16
  80d778:	10bfffc4 	addi	r2,r2,-1
  80d77c:	2101ffcc 	andi	r4,r4,2047
  80d780:	0021883a 	mov	r16,zero
  80d784:	288a703a 	and	r5,r5,r2
  80d788:	2008953a 	slli	r4,r4,20
  80d78c:	00c00434 	movhi	r3,16
  80d790:	18ffffc4 	addi	r3,r3,-1
  80d794:	28c6703a 	and	r3,r5,r3
  80d798:	8005883a 	mov	r2,r16
  80d79c:	1906b03a 	or	r3,r3,r4
  80d7a0:	dfc00117 	ldw	ra,4(sp)
  80d7a4:	dc000017 	ldw	r16,0(sp)
  80d7a8:	dec00204 	addi	sp,sp,8
  80d7ac:	f800283a 	ret
  80d7b0:	00c002c4 	movi	r3,11
  80d7b4:	188bc83a 	sub	r5,r3,r2
  80d7b8:	814ad83a 	srl	r5,r16,r5
  80d7bc:	00c00434 	movhi	r3,16
  80d7c0:	18ffffc4 	addi	r3,r3,-1
  80d7c4:	81a0983a 	sll	r16,r16,r6
  80d7c8:	2101ffcc 	andi	r4,r4,2047
  80d7cc:	28ca703a 	and	r5,r5,r3
  80d7d0:	003fed06 	br	80d788 <__alt_mem_onchip_mem+0xff805788>
  80d7d4:	0009883a 	mov	r4,zero
  80d7d8:	000b883a 	mov	r5,zero
  80d7dc:	003fea06 	br	80d788 <__alt_mem_onchip_mem+0xff805788>

0080d7e0 <__clzsi2>:
  80d7e0:	00bfffd4 	movui	r2,65535
  80d7e4:	11000536 	bltu	r2,r4,80d7fc <__clzsi2+0x1c>
  80d7e8:	00803fc4 	movi	r2,255
  80d7ec:	11000f36 	bltu	r2,r4,80d82c <__clzsi2+0x4c>
  80d7f0:	00800804 	movi	r2,32
  80d7f4:	0007883a 	mov	r3,zero
  80d7f8:	00000506 	br	80d810 <__clzsi2+0x30>
  80d7fc:	00804034 	movhi	r2,256
  80d800:	10bfffc4 	addi	r2,r2,-1
  80d804:	11000c2e 	bgeu	r2,r4,80d838 <__clzsi2+0x58>
  80d808:	00800204 	movi	r2,8
  80d80c:	00c00604 	movi	r3,24
  80d810:	20c8d83a 	srl	r4,r4,r3
  80d814:	00c02074 	movhi	r3,129
  80d818:	18c71b04 	addi	r3,r3,7276
  80d81c:	1909883a 	add	r4,r3,r4
  80d820:	20c00003 	ldbu	r3,0(r4)
  80d824:	10c5c83a 	sub	r2,r2,r3
  80d828:	f800283a 	ret
  80d82c:	00800604 	movi	r2,24
  80d830:	00c00204 	movi	r3,8
  80d834:	003ff606 	br	80d810 <__alt_mem_onchip_mem+0xff805810>
  80d838:	00800404 	movi	r2,16
  80d83c:	1007883a 	mov	r3,r2
  80d840:	003ff306 	br	80d810 <__alt_mem_onchip_mem+0xff805810>

0080d844 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d844:	defffe04 	addi	sp,sp,-8
  80d848:	dfc00115 	stw	ra,4(sp)
  80d84c:	df000015 	stw	fp,0(sp)
  80d850:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d854:	d0a00b17 	ldw	r2,-32724(gp)
  80d858:	10000326 	beq	r2,zero,80d868 <alt_get_errno+0x24>
  80d85c:	d0a00b17 	ldw	r2,-32724(gp)
  80d860:	103ee83a 	callr	r2
  80d864:	00000106 	br	80d86c <alt_get_errno+0x28>
  80d868:	d0a75904 	addi	r2,gp,-25244
}
  80d86c:	e037883a 	mov	sp,fp
  80d870:	dfc00117 	ldw	ra,4(sp)
  80d874:	df000017 	ldw	fp,0(sp)
  80d878:	dec00204 	addi	sp,sp,8
  80d87c:	f800283a 	ret

0080d880 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80d880:	defffb04 	addi	sp,sp,-20
  80d884:	dfc00415 	stw	ra,16(sp)
  80d888:	df000315 	stw	fp,12(sp)
  80d88c:	df000304 	addi	fp,sp,12
  80d890:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80d894:	e0bfff17 	ldw	r2,-4(fp)
  80d898:	10000616 	blt	r2,zero,80d8b4 <close+0x34>
  80d89c:	e0bfff17 	ldw	r2,-4(fp)
  80d8a0:	10c00324 	muli	r3,r2,12
  80d8a4:	00802074 	movhi	r2,129
  80d8a8:	108a4604 	addi	r2,r2,10520
  80d8ac:	1885883a 	add	r2,r3,r2
  80d8b0:	00000106 	br	80d8b8 <close+0x38>
  80d8b4:	0005883a 	mov	r2,zero
  80d8b8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80d8bc:	e0bffd17 	ldw	r2,-12(fp)
  80d8c0:	10001926 	beq	r2,zero,80d928 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80d8c4:	e0bffd17 	ldw	r2,-12(fp)
  80d8c8:	10800017 	ldw	r2,0(r2)
  80d8cc:	10800417 	ldw	r2,16(r2)
  80d8d0:	10000626 	beq	r2,zero,80d8ec <close+0x6c>
  80d8d4:	e0bffd17 	ldw	r2,-12(fp)
  80d8d8:	10800017 	ldw	r2,0(r2)
  80d8dc:	10800417 	ldw	r2,16(r2)
  80d8e0:	e13ffd17 	ldw	r4,-12(fp)
  80d8e4:	103ee83a 	callr	r2
  80d8e8:	00000106 	br	80d8f0 <close+0x70>
  80d8ec:	0005883a 	mov	r2,zero
  80d8f0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80d8f4:	e13fff17 	ldw	r4,-4(fp)
  80d8f8:	080e1940 	call	80e194 <alt_release_fd>
    if (rval < 0)
  80d8fc:	e0bffe17 	ldw	r2,-8(fp)
  80d900:	1000070e 	bge	r2,zero,80d920 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  80d904:	080d8440 	call	80d844 <alt_get_errno>
  80d908:	1007883a 	mov	r3,r2
  80d90c:	e0bffe17 	ldw	r2,-8(fp)
  80d910:	0085c83a 	sub	r2,zero,r2
  80d914:	18800015 	stw	r2,0(r3)
      return -1;
  80d918:	00bfffc4 	movi	r2,-1
  80d91c:	00000706 	br	80d93c <close+0xbc>
    }
    return 0;
  80d920:	0005883a 	mov	r2,zero
  80d924:	00000506 	br	80d93c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80d928:	080d8440 	call	80d844 <alt_get_errno>
  80d92c:	1007883a 	mov	r3,r2
  80d930:	00801444 	movi	r2,81
  80d934:	18800015 	stw	r2,0(r3)
    return -1;
  80d938:	00bfffc4 	movi	r2,-1
  }
}
  80d93c:	e037883a 	mov	sp,fp
  80d940:	dfc00117 	ldw	ra,4(sp)
  80d944:	df000017 	ldw	fp,0(sp)
  80d948:	dec00204 	addi	sp,sp,8
  80d94c:	f800283a 	ret

0080d950 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80d950:	defffc04 	addi	sp,sp,-16
  80d954:	df000315 	stw	fp,12(sp)
  80d958:	df000304 	addi	fp,sp,12
  80d95c:	e13ffd15 	stw	r4,-12(fp)
  80d960:	e17ffe15 	stw	r5,-8(fp)
  80d964:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80d968:	e0bfff17 	ldw	r2,-4(fp)
}
  80d96c:	e037883a 	mov	sp,fp
  80d970:	df000017 	ldw	fp,0(sp)
  80d974:	dec00104 	addi	sp,sp,4
  80d978:	f800283a 	ret

0080d97c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d97c:	defffe04 	addi	sp,sp,-8
  80d980:	dfc00115 	stw	ra,4(sp)
  80d984:	df000015 	stw	fp,0(sp)
  80d988:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d98c:	d0a00b17 	ldw	r2,-32724(gp)
  80d990:	10000326 	beq	r2,zero,80d9a0 <alt_get_errno+0x24>
  80d994:	d0a00b17 	ldw	r2,-32724(gp)
  80d998:	103ee83a 	callr	r2
  80d99c:	00000106 	br	80d9a4 <alt_get_errno+0x28>
  80d9a0:	d0a75904 	addi	r2,gp,-25244
}
  80d9a4:	e037883a 	mov	sp,fp
  80d9a8:	dfc00117 	ldw	ra,4(sp)
  80d9ac:	df000017 	ldw	fp,0(sp)
  80d9b0:	dec00204 	addi	sp,sp,8
  80d9b4:	f800283a 	ret

0080d9b8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80d9b8:	defffb04 	addi	sp,sp,-20
  80d9bc:	dfc00415 	stw	ra,16(sp)
  80d9c0:	df000315 	stw	fp,12(sp)
  80d9c4:	df000304 	addi	fp,sp,12
  80d9c8:	e13ffe15 	stw	r4,-8(fp)
  80d9cc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80d9d0:	e0bffe17 	ldw	r2,-8(fp)
  80d9d4:	10000616 	blt	r2,zero,80d9f0 <fstat+0x38>
  80d9d8:	e0bffe17 	ldw	r2,-8(fp)
  80d9dc:	10c00324 	muli	r3,r2,12
  80d9e0:	00802074 	movhi	r2,129
  80d9e4:	108a4604 	addi	r2,r2,10520
  80d9e8:	1885883a 	add	r2,r3,r2
  80d9ec:	00000106 	br	80d9f4 <fstat+0x3c>
  80d9f0:	0005883a 	mov	r2,zero
  80d9f4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80d9f8:	e0bffd17 	ldw	r2,-12(fp)
  80d9fc:	10001026 	beq	r2,zero,80da40 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80da00:	e0bffd17 	ldw	r2,-12(fp)
  80da04:	10800017 	ldw	r2,0(r2)
  80da08:	10800817 	ldw	r2,32(r2)
  80da0c:	10000726 	beq	r2,zero,80da2c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  80da10:	e0bffd17 	ldw	r2,-12(fp)
  80da14:	10800017 	ldw	r2,0(r2)
  80da18:	10800817 	ldw	r2,32(r2)
  80da1c:	e17fff17 	ldw	r5,-4(fp)
  80da20:	e13ffd17 	ldw	r4,-12(fp)
  80da24:	103ee83a 	callr	r2
  80da28:	00000a06 	br	80da54 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80da2c:	e0bfff17 	ldw	r2,-4(fp)
  80da30:	00c80004 	movi	r3,8192
  80da34:	10c00115 	stw	r3,4(r2)
      return 0;
  80da38:	0005883a 	mov	r2,zero
  80da3c:	00000506 	br	80da54 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80da40:	080d97c0 	call	80d97c <alt_get_errno>
  80da44:	1007883a 	mov	r3,r2
  80da48:	00801444 	movi	r2,81
  80da4c:	18800015 	stw	r2,0(r3)
    return -1;
  80da50:	00bfffc4 	movi	r2,-1
  }
}
  80da54:	e037883a 	mov	sp,fp
  80da58:	dfc00117 	ldw	ra,4(sp)
  80da5c:	df000017 	ldw	fp,0(sp)
  80da60:	dec00204 	addi	sp,sp,8
  80da64:	f800283a 	ret

0080da68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80da68:	defffe04 	addi	sp,sp,-8
  80da6c:	dfc00115 	stw	ra,4(sp)
  80da70:	df000015 	stw	fp,0(sp)
  80da74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80da78:	d0a00b17 	ldw	r2,-32724(gp)
  80da7c:	10000326 	beq	r2,zero,80da8c <alt_get_errno+0x24>
  80da80:	d0a00b17 	ldw	r2,-32724(gp)
  80da84:	103ee83a 	callr	r2
  80da88:	00000106 	br	80da90 <alt_get_errno+0x28>
  80da8c:	d0a75904 	addi	r2,gp,-25244
}
  80da90:	e037883a 	mov	sp,fp
  80da94:	dfc00117 	ldw	ra,4(sp)
  80da98:	df000017 	ldw	fp,0(sp)
  80da9c:	dec00204 	addi	sp,sp,8
  80daa0:	f800283a 	ret

0080daa4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80daa4:	deffed04 	addi	sp,sp,-76
  80daa8:	dfc01215 	stw	ra,72(sp)
  80daac:	df001115 	stw	fp,68(sp)
  80dab0:	df001104 	addi	fp,sp,68
  80dab4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80dab8:	e0bfff17 	ldw	r2,-4(fp)
  80dabc:	10000616 	blt	r2,zero,80dad8 <isatty+0x34>
  80dac0:	e0bfff17 	ldw	r2,-4(fp)
  80dac4:	10c00324 	muli	r3,r2,12
  80dac8:	00802074 	movhi	r2,129
  80dacc:	108a4604 	addi	r2,r2,10520
  80dad0:	1885883a 	add	r2,r3,r2
  80dad4:	00000106 	br	80dadc <isatty+0x38>
  80dad8:	0005883a 	mov	r2,zero
  80dadc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  80dae0:	e0bfef17 	ldw	r2,-68(fp)
  80dae4:	10000e26 	beq	r2,zero,80db20 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80dae8:	e0bfef17 	ldw	r2,-68(fp)
  80daec:	10800017 	ldw	r2,0(r2)
  80daf0:	10800817 	ldw	r2,32(r2)
  80daf4:	1000021e 	bne	r2,zero,80db00 <isatty+0x5c>
    {
      return 1;
  80daf8:	00800044 	movi	r2,1
  80dafc:	00000d06 	br	80db34 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80db00:	e0bff004 	addi	r2,fp,-64
  80db04:	100b883a 	mov	r5,r2
  80db08:	e13fff17 	ldw	r4,-4(fp)
  80db0c:	080d9b80 	call	80d9b8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80db10:	e0bff117 	ldw	r2,-60(fp)
  80db14:	10880020 	cmpeqi	r2,r2,8192
  80db18:	10803fcc 	andi	r2,r2,255
  80db1c:	00000506 	br	80db34 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80db20:	080da680 	call	80da68 <alt_get_errno>
  80db24:	1007883a 	mov	r3,r2
  80db28:	00801444 	movi	r2,81
  80db2c:	18800015 	stw	r2,0(r3)
    return 0;
  80db30:	0005883a 	mov	r2,zero
  }
}
  80db34:	e037883a 	mov	sp,fp
  80db38:	dfc00117 	ldw	ra,4(sp)
  80db3c:	df000017 	ldw	fp,0(sp)
  80db40:	dec00204 	addi	sp,sp,8
  80db44:	f800283a 	ret

0080db48 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80db48:	defffc04 	addi	sp,sp,-16
  80db4c:	df000315 	stw	fp,12(sp)
  80db50:	df000304 	addi	fp,sp,12
  80db54:	e13ffd15 	stw	r4,-12(fp)
  80db58:	e17ffe15 	stw	r5,-8(fp)
  80db5c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80db60:	e0fffe17 	ldw	r3,-8(fp)
  80db64:	e0bffd17 	ldw	r2,-12(fp)
  80db68:	18800c26 	beq	r3,r2,80db9c <alt_load_section+0x54>
  {
    while( to != end )
  80db6c:	00000806 	br	80db90 <alt_load_section+0x48>
    {
      *to++ = *from++;
  80db70:	e0bffe17 	ldw	r2,-8(fp)
  80db74:	10c00104 	addi	r3,r2,4
  80db78:	e0fffe15 	stw	r3,-8(fp)
  80db7c:	e0fffd17 	ldw	r3,-12(fp)
  80db80:	19000104 	addi	r4,r3,4
  80db84:	e13ffd15 	stw	r4,-12(fp)
  80db88:	18c00017 	ldw	r3,0(r3)
  80db8c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80db90:	e0fffe17 	ldw	r3,-8(fp)
  80db94:	e0bfff17 	ldw	r2,-4(fp)
  80db98:	18bff51e 	bne	r3,r2,80db70 <__alt_mem_onchip_mem+0xff805b70>
    {
      *to++ = *from++;
    }
  }
}
  80db9c:	0001883a 	nop
  80dba0:	e037883a 	mov	sp,fp
  80dba4:	df000017 	ldw	fp,0(sp)
  80dba8:	dec00104 	addi	sp,sp,4
  80dbac:	f800283a 	ret

0080dbb0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80dbb0:	defffe04 	addi	sp,sp,-8
  80dbb4:	dfc00115 	stw	ra,4(sp)
  80dbb8:	df000015 	stw	fp,0(sp)
  80dbbc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80dbc0:	01802074 	movhi	r6,129
  80dbc4:	318f5a04 	addi	r6,r6,15720
  80dbc8:	01402074 	movhi	r5,129
  80dbcc:	29481304 	addi	r5,r5,8268
  80dbd0:	01002074 	movhi	r4,129
  80dbd4:	210f5a04 	addi	r4,r4,15720
  80dbd8:	080db480 	call	80db48 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80dbdc:	01802034 	movhi	r6,128
  80dbe0:	31809104 	addi	r6,r6,580
  80dbe4:	01402034 	movhi	r5,128
  80dbe8:	29400804 	addi	r5,r5,32
  80dbec:	01002034 	movhi	r4,128
  80dbf0:	21000804 	addi	r4,r4,32
  80dbf4:	080db480 	call	80db48 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80dbf8:	01802074 	movhi	r6,129
  80dbfc:	31881304 	addi	r6,r6,8268
  80dc00:	01402074 	movhi	r5,129
  80dc04:	29469104 	addi	r5,r5,6724
  80dc08:	01002074 	movhi	r4,129
  80dc0c:	21069104 	addi	r4,r4,6724
  80dc10:	080db480 	call	80db48 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80dc14:	08109fc0 	call	8109fc <alt_dcache_flush_all>
  alt_icache_flush_all();
  80dc18:	0810e200 	call	810e20 <alt_icache_flush_all>
}
  80dc1c:	0001883a 	nop
  80dc20:	e037883a 	mov	sp,fp
  80dc24:	dfc00117 	ldw	ra,4(sp)
  80dc28:	df000017 	ldw	fp,0(sp)
  80dc2c:	dec00204 	addi	sp,sp,8
  80dc30:	f800283a 	ret

0080dc34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80dc34:	defffe04 	addi	sp,sp,-8
  80dc38:	dfc00115 	stw	ra,4(sp)
  80dc3c:	df000015 	stw	fp,0(sp)
  80dc40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80dc44:	d0a00b17 	ldw	r2,-32724(gp)
  80dc48:	10000326 	beq	r2,zero,80dc58 <alt_get_errno+0x24>
  80dc4c:	d0a00b17 	ldw	r2,-32724(gp)
  80dc50:	103ee83a 	callr	r2
  80dc54:	00000106 	br	80dc5c <alt_get_errno+0x28>
  80dc58:	d0a75904 	addi	r2,gp,-25244
}
  80dc5c:	e037883a 	mov	sp,fp
  80dc60:	dfc00117 	ldw	ra,4(sp)
  80dc64:	df000017 	ldw	fp,0(sp)
  80dc68:	dec00204 	addi	sp,sp,8
  80dc6c:	f800283a 	ret

0080dc70 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80dc70:	defff904 	addi	sp,sp,-28
  80dc74:	dfc00615 	stw	ra,24(sp)
  80dc78:	df000515 	stw	fp,20(sp)
  80dc7c:	df000504 	addi	fp,sp,20
  80dc80:	e13ffd15 	stw	r4,-12(fp)
  80dc84:	e17ffe15 	stw	r5,-8(fp)
  80dc88:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80dc8c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80dc90:	e0bffd17 	ldw	r2,-12(fp)
  80dc94:	10000616 	blt	r2,zero,80dcb0 <lseek+0x40>
  80dc98:	e0bffd17 	ldw	r2,-12(fp)
  80dc9c:	10c00324 	muli	r3,r2,12
  80dca0:	00802074 	movhi	r2,129
  80dca4:	108a4604 	addi	r2,r2,10520
  80dca8:	1885883a 	add	r2,r3,r2
  80dcac:	00000106 	br	80dcb4 <lseek+0x44>
  80dcb0:	0005883a 	mov	r2,zero
  80dcb4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80dcb8:	e0bffc17 	ldw	r2,-16(fp)
  80dcbc:	10001026 	beq	r2,zero,80dd00 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80dcc0:	e0bffc17 	ldw	r2,-16(fp)
  80dcc4:	10800017 	ldw	r2,0(r2)
  80dcc8:	10800717 	ldw	r2,28(r2)
  80dccc:	10000926 	beq	r2,zero,80dcf4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80dcd0:	e0bffc17 	ldw	r2,-16(fp)
  80dcd4:	10800017 	ldw	r2,0(r2)
  80dcd8:	10800717 	ldw	r2,28(r2)
  80dcdc:	e1bfff17 	ldw	r6,-4(fp)
  80dce0:	e17ffe17 	ldw	r5,-8(fp)
  80dce4:	e13ffc17 	ldw	r4,-16(fp)
  80dce8:	103ee83a 	callr	r2
  80dcec:	e0bffb15 	stw	r2,-20(fp)
  80dcf0:	00000506 	br	80dd08 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80dcf4:	00bfde84 	movi	r2,-134
  80dcf8:	e0bffb15 	stw	r2,-20(fp)
  80dcfc:	00000206 	br	80dd08 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  80dd00:	00bfebc4 	movi	r2,-81
  80dd04:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80dd08:	e0bffb17 	ldw	r2,-20(fp)
  80dd0c:	1000070e 	bge	r2,zero,80dd2c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  80dd10:	080dc340 	call	80dc34 <alt_get_errno>
  80dd14:	1007883a 	mov	r3,r2
  80dd18:	e0bffb17 	ldw	r2,-20(fp)
  80dd1c:	0085c83a 	sub	r2,zero,r2
  80dd20:	18800015 	stw	r2,0(r3)
    rc = -1;
  80dd24:	00bfffc4 	movi	r2,-1
  80dd28:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80dd2c:	e0bffb17 	ldw	r2,-20(fp)
}
  80dd30:	e037883a 	mov	sp,fp
  80dd34:	dfc00117 	ldw	ra,4(sp)
  80dd38:	df000017 	ldw	fp,0(sp)
  80dd3c:	dec00204 	addi	sp,sp,8
  80dd40:	f800283a 	ret

0080dd44 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80dd44:	defffd04 	addi	sp,sp,-12
  80dd48:	dfc00215 	stw	ra,8(sp)
  80dd4c:	df000115 	stw	fp,4(sp)
  80dd50:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80dd54:	0009883a 	mov	r4,zero
  80dd58:	080e4100 	call	80e410 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80dd5c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80dd60:	080e4480 	call	80e448 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80dd64:	01802074 	movhi	r6,129
  80dd68:	31875e04 	addi	r6,r6,7544
  80dd6c:	01402074 	movhi	r5,129
  80dd70:	29475e04 	addi	r5,r5,7544
  80dd74:	01002074 	movhi	r4,129
  80dd78:	21075e04 	addi	r4,r4,7544
  80dd7c:	08111b80 	call	8111b8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80dd80:	0810b240 	call	810b24 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80dd84:	01002074 	movhi	r4,129
  80dd88:	2102e104 	addi	r4,r4,2948
  80dd8c:	08116b00 	call	8116b0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80dd90:	d0a76017 	ldw	r2,-25216(gp)
  80dd94:	d0e76117 	ldw	r3,-25212(gp)
  80dd98:	d1276217 	ldw	r4,-25208(gp)
  80dd9c:	200d883a 	mov	r6,r4
  80dda0:	180b883a 	mov	r5,r3
  80dda4:	1009883a 	mov	r4,r2
  80dda8:	08002900 	call	800290 <main>
  80ddac:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80ddb0:	01000044 	movi	r4,1
  80ddb4:	080d8800 	call	80d880 <close>
  exit (result);
  80ddb8:	e13fff17 	ldw	r4,-4(fp)
  80ddbc:	08116c40 	call	8116c4 <exit>

0080ddc0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80ddc0:	defffe04 	addi	sp,sp,-8
  80ddc4:	df000115 	stw	fp,4(sp)
  80ddc8:	df000104 	addi	fp,sp,4
  80ddcc:	e13fff15 	stw	r4,-4(fp)
}
  80ddd0:	0001883a 	nop
  80ddd4:	e037883a 	mov	sp,fp
  80ddd8:	df000017 	ldw	fp,0(sp)
  80dddc:	dec00104 	addi	sp,sp,4
  80dde0:	f800283a 	ret

0080dde4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80dde4:	defffe04 	addi	sp,sp,-8
  80dde8:	df000115 	stw	fp,4(sp)
  80ddec:	df000104 	addi	fp,sp,4
  80ddf0:	e13fff15 	stw	r4,-4(fp)
}
  80ddf4:	0001883a 	nop
  80ddf8:	e037883a 	mov	sp,fp
  80ddfc:	df000017 	ldw	fp,0(sp)
  80de00:	dec00104 	addi	sp,sp,4
  80de04:	f800283a 	ret

0080de08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80de08:	defffe04 	addi	sp,sp,-8
  80de0c:	dfc00115 	stw	ra,4(sp)
  80de10:	df000015 	stw	fp,0(sp)
  80de14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80de18:	d0a00b17 	ldw	r2,-32724(gp)
  80de1c:	10000326 	beq	r2,zero,80de2c <alt_get_errno+0x24>
  80de20:	d0a00b17 	ldw	r2,-32724(gp)
  80de24:	103ee83a 	callr	r2
  80de28:	00000106 	br	80de30 <alt_get_errno+0x28>
  80de2c:	d0a75904 	addi	r2,gp,-25244
}
  80de30:	e037883a 	mov	sp,fp
  80de34:	dfc00117 	ldw	ra,4(sp)
  80de38:	df000017 	ldw	fp,0(sp)
  80de3c:	dec00204 	addi	sp,sp,8
  80de40:	f800283a 	ret

0080de44 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80de44:	defffd04 	addi	sp,sp,-12
  80de48:	df000215 	stw	fp,8(sp)
  80de4c:	df000204 	addi	fp,sp,8
  80de50:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80de54:	e0bfff17 	ldw	r2,-4(fp)
  80de58:	10800217 	ldw	r2,8(r2)
  80de5c:	10d00034 	orhi	r3,r2,16384
  80de60:	e0bfff17 	ldw	r2,-4(fp)
  80de64:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80de68:	e03ffe15 	stw	zero,-8(fp)
  80de6c:	00001d06 	br	80dee4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80de70:	00802074 	movhi	r2,129
  80de74:	108a4604 	addi	r2,r2,10520
  80de78:	e0fffe17 	ldw	r3,-8(fp)
  80de7c:	18c00324 	muli	r3,r3,12
  80de80:	10c5883a 	add	r2,r2,r3
  80de84:	10c00017 	ldw	r3,0(r2)
  80de88:	e0bfff17 	ldw	r2,-4(fp)
  80de8c:	10800017 	ldw	r2,0(r2)
  80de90:	1880111e 	bne	r3,r2,80ded8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80de94:	00802074 	movhi	r2,129
  80de98:	108a4604 	addi	r2,r2,10520
  80de9c:	e0fffe17 	ldw	r3,-8(fp)
  80dea0:	18c00324 	muli	r3,r3,12
  80dea4:	10c5883a 	add	r2,r2,r3
  80dea8:	10800204 	addi	r2,r2,8
  80deac:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80deb0:	1000090e 	bge	r2,zero,80ded8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  80deb4:	e0bffe17 	ldw	r2,-8(fp)
  80deb8:	10c00324 	muli	r3,r2,12
  80debc:	00802074 	movhi	r2,129
  80dec0:	108a4604 	addi	r2,r2,10520
  80dec4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80dec8:	e0bfff17 	ldw	r2,-4(fp)
  80decc:	18800226 	beq	r3,r2,80ded8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80ded0:	00bffcc4 	movi	r2,-13
  80ded4:	00000806 	br	80def8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80ded8:	e0bffe17 	ldw	r2,-8(fp)
  80dedc:	10800044 	addi	r2,r2,1
  80dee0:	e0bffe15 	stw	r2,-8(fp)
  80dee4:	d0a00a17 	ldw	r2,-32728(gp)
  80dee8:	1007883a 	mov	r3,r2
  80deec:	e0bffe17 	ldw	r2,-8(fp)
  80def0:	18bfdf2e 	bgeu	r3,r2,80de70 <__alt_mem_onchip_mem+0xff805e70>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80def4:	0005883a 	mov	r2,zero
}
  80def8:	e037883a 	mov	sp,fp
  80defc:	df000017 	ldw	fp,0(sp)
  80df00:	dec00104 	addi	sp,sp,4
  80df04:	f800283a 	ret

0080df08 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80df08:	defff604 	addi	sp,sp,-40
  80df0c:	dfc00915 	stw	ra,36(sp)
  80df10:	df000815 	stw	fp,32(sp)
  80df14:	df000804 	addi	fp,sp,32
  80df18:	e13ffd15 	stw	r4,-12(fp)
  80df1c:	e17ffe15 	stw	r5,-8(fp)
  80df20:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80df24:	00bfffc4 	movi	r2,-1
  80df28:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  80df2c:	00bffb44 	movi	r2,-19
  80df30:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  80df34:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80df38:	d1600804 	addi	r5,gp,-32736
  80df3c:	e13ffd17 	ldw	r4,-12(fp)
  80df40:	0810be40 	call	810be4 <alt_find_dev>
  80df44:	e0bff815 	stw	r2,-32(fp)
  80df48:	e0bff817 	ldw	r2,-32(fp)
  80df4c:	1000051e 	bne	r2,zero,80df64 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80df50:	e13ffd17 	ldw	r4,-12(fp)
  80df54:	0810c740 	call	810c74 <alt_find_file>
  80df58:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  80df5c:	00800044 	movi	r2,1
  80df60:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80df64:	e0bff817 	ldw	r2,-32(fp)
  80df68:	10002926 	beq	r2,zero,80e010 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80df6c:	e13ff817 	ldw	r4,-32(fp)
  80df70:	0810d7c0 	call	810d7c <alt_get_fd>
  80df74:	e0bff915 	stw	r2,-28(fp)
  80df78:	e0bff917 	ldw	r2,-28(fp)
  80df7c:	1000030e 	bge	r2,zero,80df8c <open+0x84>
    {
      status = index;
  80df80:	e0bff917 	ldw	r2,-28(fp)
  80df84:	e0bffa15 	stw	r2,-24(fp)
  80df88:	00002306 	br	80e018 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  80df8c:	e0bff917 	ldw	r2,-28(fp)
  80df90:	10c00324 	muli	r3,r2,12
  80df94:	00802074 	movhi	r2,129
  80df98:	108a4604 	addi	r2,r2,10520
  80df9c:	1885883a 	add	r2,r3,r2
  80dfa0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80dfa4:	e0fffe17 	ldw	r3,-8(fp)
  80dfa8:	00900034 	movhi	r2,16384
  80dfac:	10bfffc4 	addi	r2,r2,-1
  80dfb0:	1886703a 	and	r3,r3,r2
  80dfb4:	e0bffc17 	ldw	r2,-16(fp)
  80dfb8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80dfbc:	e0bffb17 	ldw	r2,-20(fp)
  80dfc0:	1000051e 	bne	r2,zero,80dfd8 <open+0xd0>
  80dfc4:	e13ffc17 	ldw	r4,-16(fp)
  80dfc8:	080de440 	call	80de44 <alt_file_locked>
  80dfcc:	e0bffa15 	stw	r2,-24(fp)
  80dfd0:	e0bffa17 	ldw	r2,-24(fp)
  80dfd4:	10001016 	blt	r2,zero,80e018 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80dfd8:	e0bff817 	ldw	r2,-32(fp)
  80dfdc:	10800317 	ldw	r2,12(r2)
  80dfe0:	10000826 	beq	r2,zero,80e004 <open+0xfc>
  80dfe4:	e0bff817 	ldw	r2,-32(fp)
  80dfe8:	10800317 	ldw	r2,12(r2)
  80dfec:	e1ffff17 	ldw	r7,-4(fp)
  80dff0:	e1bffe17 	ldw	r6,-8(fp)
  80dff4:	e17ffd17 	ldw	r5,-12(fp)
  80dff8:	e13ffc17 	ldw	r4,-16(fp)
  80dffc:	103ee83a 	callr	r2
  80e000:	00000106 	br	80e008 <open+0x100>
  80e004:	0005883a 	mov	r2,zero
  80e008:	e0bffa15 	stw	r2,-24(fp)
  80e00c:	00000206 	br	80e018 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80e010:	00bffb44 	movi	r2,-19
  80e014:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80e018:	e0bffa17 	ldw	r2,-24(fp)
  80e01c:	1000090e 	bge	r2,zero,80e044 <open+0x13c>
  {
    alt_release_fd (index);  
  80e020:	e13ff917 	ldw	r4,-28(fp)
  80e024:	080e1940 	call	80e194 <alt_release_fd>
    ALT_ERRNO = -status;
  80e028:	080de080 	call	80de08 <alt_get_errno>
  80e02c:	1007883a 	mov	r3,r2
  80e030:	e0bffa17 	ldw	r2,-24(fp)
  80e034:	0085c83a 	sub	r2,zero,r2
  80e038:	18800015 	stw	r2,0(r3)
    return -1;
  80e03c:	00bfffc4 	movi	r2,-1
  80e040:	00000106 	br	80e048 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  80e044:	e0bff917 	ldw	r2,-28(fp)
}
  80e048:	e037883a 	mov	sp,fp
  80e04c:	dfc00117 	ldw	ra,4(sp)
  80e050:	df000017 	ldw	fp,0(sp)
  80e054:	dec00204 	addi	sp,sp,8
  80e058:	f800283a 	ret

0080e05c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e05c:	defffe04 	addi	sp,sp,-8
  80e060:	dfc00115 	stw	ra,4(sp)
  80e064:	df000015 	stw	fp,0(sp)
  80e068:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e06c:	d0a00b17 	ldw	r2,-32724(gp)
  80e070:	10000326 	beq	r2,zero,80e080 <alt_get_errno+0x24>
  80e074:	d0a00b17 	ldw	r2,-32724(gp)
  80e078:	103ee83a 	callr	r2
  80e07c:	00000106 	br	80e084 <alt_get_errno+0x28>
  80e080:	d0a75904 	addi	r2,gp,-25244
}
  80e084:	e037883a 	mov	sp,fp
  80e088:	dfc00117 	ldw	ra,4(sp)
  80e08c:	df000017 	ldw	fp,0(sp)
  80e090:	dec00204 	addi	sp,sp,8
  80e094:	f800283a 	ret

0080e098 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80e098:	defff904 	addi	sp,sp,-28
  80e09c:	dfc00615 	stw	ra,24(sp)
  80e0a0:	df000515 	stw	fp,20(sp)
  80e0a4:	df000504 	addi	fp,sp,20
  80e0a8:	e13ffd15 	stw	r4,-12(fp)
  80e0ac:	e17ffe15 	stw	r5,-8(fp)
  80e0b0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e0b4:	e0bffd17 	ldw	r2,-12(fp)
  80e0b8:	10000616 	blt	r2,zero,80e0d4 <read+0x3c>
  80e0bc:	e0bffd17 	ldw	r2,-12(fp)
  80e0c0:	10c00324 	muli	r3,r2,12
  80e0c4:	00802074 	movhi	r2,129
  80e0c8:	108a4604 	addi	r2,r2,10520
  80e0cc:	1885883a 	add	r2,r3,r2
  80e0d0:	00000106 	br	80e0d8 <read+0x40>
  80e0d4:	0005883a 	mov	r2,zero
  80e0d8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80e0dc:	e0bffb17 	ldw	r2,-20(fp)
  80e0e0:	10002226 	beq	r2,zero,80e16c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80e0e4:	e0bffb17 	ldw	r2,-20(fp)
  80e0e8:	10800217 	ldw	r2,8(r2)
  80e0ec:	108000cc 	andi	r2,r2,3
  80e0f0:	10800060 	cmpeqi	r2,r2,1
  80e0f4:	1000181e 	bne	r2,zero,80e158 <read+0xc0>
        (fd->dev->read))
  80e0f8:	e0bffb17 	ldw	r2,-20(fp)
  80e0fc:	10800017 	ldw	r2,0(r2)
  80e100:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80e104:	10001426 	beq	r2,zero,80e158 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80e108:	e0bffb17 	ldw	r2,-20(fp)
  80e10c:	10800017 	ldw	r2,0(r2)
  80e110:	10800517 	ldw	r2,20(r2)
  80e114:	e0ffff17 	ldw	r3,-4(fp)
  80e118:	180d883a 	mov	r6,r3
  80e11c:	e17ffe17 	ldw	r5,-8(fp)
  80e120:	e13ffb17 	ldw	r4,-20(fp)
  80e124:	103ee83a 	callr	r2
  80e128:	e0bffc15 	stw	r2,-16(fp)
  80e12c:	e0bffc17 	ldw	r2,-16(fp)
  80e130:	1000070e 	bge	r2,zero,80e150 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  80e134:	080e05c0 	call	80e05c <alt_get_errno>
  80e138:	1007883a 	mov	r3,r2
  80e13c:	e0bffc17 	ldw	r2,-16(fp)
  80e140:	0085c83a 	sub	r2,zero,r2
  80e144:	18800015 	stw	r2,0(r3)
          return -1;
  80e148:	00bfffc4 	movi	r2,-1
  80e14c:	00000c06 	br	80e180 <read+0xe8>
        }
        return rval;
  80e150:	e0bffc17 	ldw	r2,-16(fp)
  80e154:	00000a06 	br	80e180 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80e158:	080e05c0 	call	80e05c <alt_get_errno>
  80e15c:	1007883a 	mov	r3,r2
  80e160:	00800344 	movi	r2,13
  80e164:	18800015 	stw	r2,0(r3)
  80e168:	00000406 	br	80e17c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80e16c:	080e05c0 	call	80e05c <alt_get_errno>
  80e170:	1007883a 	mov	r3,r2
  80e174:	00801444 	movi	r2,81
  80e178:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80e17c:	00bfffc4 	movi	r2,-1
}
  80e180:	e037883a 	mov	sp,fp
  80e184:	dfc00117 	ldw	ra,4(sp)
  80e188:	df000017 	ldw	fp,0(sp)
  80e18c:	dec00204 	addi	sp,sp,8
  80e190:	f800283a 	ret

0080e194 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80e194:	defffe04 	addi	sp,sp,-8
  80e198:	df000115 	stw	fp,4(sp)
  80e19c:	df000104 	addi	fp,sp,4
  80e1a0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80e1a4:	e0bfff17 	ldw	r2,-4(fp)
  80e1a8:	108000d0 	cmplti	r2,r2,3
  80e1ac:	10000d1e 	bne	r2,zero,80e1e4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80e1b0:	00802074 	movhi	r2,129
  80e1b4:	108a4604 	addi	r2,r2,10520
  80e1b8:	e0ffff17 	ldw	r3,-4(fp)
  80e1bc:	18c00324 	muli	r3,r3,12
  80e1c0:	10c5883a 	add	r2,r2,r3
  80e1c4:	10800204 	addi	r2,r2,8
  80e1c8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80e1cc:	00802074 	movhi	r2,129
  80e1d0:	108a4604 	addi	r2,r2,10520
  80e1d4:	e0ffff17 	ldw	r3,-4(fp)
  80e1d8:	18c00324 	muli	r3,r3,12
  80e1dc:	10c5883a 	add	r2,r2,r3
  80e1e0:	10000015 	stw	zero,0(r2)
  }
}
  80e1e4:	0001883a 	nop
  80e1e8:	e037883a 	mov	sp,fp
  80e1ec:	df000017 	ldw	fp,0(sp)
  80e1f0:	dec00104 	addi	sp,sp,4
  80e1f4:	f800283a 	ret

0080e1f8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80e1f8:	defff904 	addi	sp,sp,-28
  80e1fc:	df000615 	stw	fp,24(sp)
  80e200:	df000604 	addi	fp,sp,24
  80e204:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e208:	0005303a 	rdctl	r2,status
  80e20c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e210:	e0fffe17 	ldw	r3,-8(fp)
  80e214:	00bfff84 	movi	r2,-2
  80e218:	1884703a 	and	r2,r3,r2
  80e21c:	1001703a 	wrctl	status,r2
  
  return context;
  80e220:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80e224:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80e228:	d0a00c17 	ldw	r2,-32720(gp)
  80e22c:	10c000c4 	addi	r3,r2,3
  80e230:	00bfff04 	movi	r2,-4
  80e234:	1884703a 	and	r2,r3,r2
  80e238:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80e23c:	d0e00c17 	ldw	r3,-32720(gp)
  80e240:	e0bfff17 	ldw	r2,-4(fp)
  80e244:	1887883a 	add	r3,r3,r2
  80e248:	00804034 	movhi	r2,256
  80e24c:	10800004 	addi	r2,r2,0
  80e250:	10c0062e 	bgeu	r2,r3,80e26c <sbrk+0x74>
  80e254:	e0bffb17 	ldw	r2,-20(fp)
  80e258:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e25c:	e0bffa17 	ldw	r2,-24(fp)
  80e260:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80e264:	00bfffc4 	movi	r2,-1
  80e268:	00000b06 	br	80e298 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80e26c:	d0a00c17 	ldw	r2,-32720(gp)
  80e270:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  80e274:	d0e00c17 	ldw	r3,-32720(gp)
  80e278:	e0bfff17 	ldw	r2,-4(fp)
  80e27c:	1885883a 	add	r2,r3,r2
  80e280:	d0a00c15 	stw	r2,-32720(gp)
  80e284:	e0bffb17 	ldw	r2,-20(fp)
  80e288:	e0bffc15 	stw	r2,-16(fp)
  80e28c:	e0bffc17 	ldw	r2,-16(fp)
  80e290:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80e294:	e0bffd17 	ldw	r2,-12(fp)
} 
  80e298:	e037883a 	mov	sp,fp
  80e29c:	df000017 	ldw	fp,0(sp)
  80e2a0:	dec00104 	addi	sp,sp,4
  80e2a4:	f800283a 	ret

0080e2a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e2a8:	defffe04 	addi	sp,sp,-8
  80e2ac:	dfc00115 	stw	ra,4(sp)
  80e2b0:	df000015 	stw	fp,0(sp)
  80e2b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e2b8:	d0a00b17 	ldw	r2,-32724(gp)
  80e2bc:	10000326 	beq	r2,zero,80e2cc <alt_get_errno+0x24>
  80e2c0:	d0a00b17 	ldw	r2,-32724(gp)
  80e2c4:	103ee83a 	callr	r2
  80e2c8:	00000106 	br	80e2d0 <alt_get_errno+0x28>
  80e2cc:	d0a75904 	addi	r2,gp,-25244
}
  80e2d0:	e037883a 	mov	sp,fp
  80e2d4:	dfc00117 	ldw	ra,4(sp)
  80e2d8:	df000017 	ldw	fp,0(sp)
  80e2dc:	dec00204 	addi	sp,sp,8
  80e2e0:	f800283a 	ret

0080e2e4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80e2e4:	defff904 	addi	sp,sp,-28
  80e2e8:	dfc00615 	stw	ra,24(sp)
  80e2ec:	df000515 	stw	fp,20(sp)
  80e2f0:	df000504 	addi	fp,sp,20
  80e2f4:	e13ffd15 	stw	r4,-12(fp)
  80e2f8:	e17ffe15 	stw	r5,-8(fp)
  80e2fc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e300:	e0bffd17 	ldw	r2,-12(fp)
  80e304:	10000616 	blt	r2,zero,80e320 <write+0x3c>
  80e308:	e0bffd17 	ldw	r2,-12(fp)
  80e30c:	10c00324 	muli	r3,r2,12
  80e310:	00802074 	movhi	r2,129
  80e314:	108a4604 	addi	r2,r2,10520
  80e318:	1885883a 	add	r2,r3,r2
  80e31c:	00000106 	br	80e324 <write+0x40>
  80e320:	0005883a 	mov	r2,zero
  80e324:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80e328:	e0bffb17 	ldw	r2,-20(fp)
  80e32c:	10002126 	beq	r2,zero,80e3b4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80e330:	e0bffb17 	ldw	r2,-20(fp)
  80e334:	10800217 	ldw	r2,8(r2)
  80e338:	108000cc 	andi	r2,r2,3
  80e33c:	10001826 	beq	r2,zero,80e3a0 <write+0xbc>
  80e340:	e0bffb17 	ldw	r2,-20(fp)
  80e344:	10800017 	ldw	r2,0(r2)
  80e348:	10800617 	ldw	r2,24(r2)
  80e34c:	10001426 	beq	r2,zero,80e3a0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80e350:	e0bffb17 	ldw	r2,-20(fp)
  80e354:	10800017 	ldw	r2,0(r2)
  80e358:	10800617 	ldw	r2,24(r2)
  80e35c:	e0ffff17 	ldw	r3,-4(fp)
  80e360:	180d883a 	mov	r6,r3
  80e364:	e17ffe17 	ldw	r5,-8(fp)
  80e368:	e13ffb17 	ldw	r4,-20(fp)
  80e36c:	103ee83a 	callr	r2
  80e370:	e0bffc15 	stw	r2,-16(fp)
  80e374:	e0bffc17 	ldw	r2,-16(fp)
  80e378:	1000070e 	bge	r2,zero,80e398 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  80e37c:	080e2a80 	call	80e2a8 <alt_get_errno>
  80e380:	1007883a 	mov	r3,r2
  80e384:	e0bffc17 	ldw	r2,-16(fp)
  80e388:	0085c83a 	sub	r2,zero,r2
  80e38c:	18800015 	stw	r2,0(r3)
        return -1;
  80e390:	00bfffc4 	movi	r2,-1
  80e394:	00000c06 	br	80e3c8 <write+0xe4>
      }
      return rval;
  80e398:	e0bffc17 	ldw	r2,-16(fp)
  80e39c:	00000a06 	br	80e3c8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80e3a0:	080e2a80 	call	80e2a8 <alt_get_errno>
  80e3a4:	1007883a 	mov	r3,r2
  80e3a8:	00800344 	movi	r2,13
  80e3ac:	18800015 	stw	r2,0(r3)
  80e3b0:	00000406 	br	80e3c4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80e3b4:	080e2a80 	call	80e2a8 <alt_get_errno>
  80e3b8:	1007883a 	mov	r3,r2
  80e3bc:	00801444 	movi	r2,81
  80e3c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80e3c4:	00bfffc4 	movi	r2,-1
}
  80e3c8:	e037883a 	mov	sp,fp
  80e3cc:	dfc00117 	ldw	ra,4(sp)
  80e3d0:	df000017 	ldw	fp,0(sp)
  80e3d4:	dec00204 	addi	sp,sp,8
  80e3d8:	f800283a 	ret

0080e3dc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80e3dc:	defffd04 	addi	sp,sp,-12
  80e3e0:	dfc00215 	stw	ra,8(sp)
  80e3e4:	df000115 	stw	fp,4(sp)
  80e3e8:	df000104 	addi	fp,sp,4
  80e3ec:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80e3f0:	d1600804 	addi	r5,gp,-32736
  80e3f4:	e13fff17 	ldw	r4,-4(fp)
  80e3f8:	0810a800 	call	810a80 <alt_dev_llist_insert>
}
  80e3fc:	e037883a 	mov	sp,fp
  80e400:	dfc00117 	ldw	ra,4(sp)
  80e404:	df000017 	ldw	fp,0(sp)
  80e408:	dec00204 	addi	sp,sp,8
  80e40c:	f800283a 	ret

0080e410 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80e410:	defffd04 	addi	sp,sp,-12
  80e414:	dfc00215 	stw	ra,8(sp)
  80e418:	df000115 	stw	fp,4(sp)
  80e41c:	df000104 	addi	fp,sp,4
  80e420:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  80e424:	08114080 	call	811408 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80e428:	00800044 	movi	r2,1
  80e42c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80e430:	0001883a 	nop
  80e434:	e037883a 	mov	sp,fp
  80e438:	dfc00117 	ldw	ra,4(sp)
  80e43c:	df000017 	ldw	fp,0(sp)
  80e440:	dec00204 	addi	sp,sp,8
  80e444:	f800283a 	ret

0080e448 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80e448:	defffe04 	addi	sp,sp,-8
  80e44c:	dfc00115 	stw	ra,4(sp)
  80e450:	df000015 	stw	fp,0(sp)
  80e454:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80e458:	01c0fa04 	movi	r7,1000
  80e45c:	01800084 	movi	r6,2
  80e460:	000b883a 	mov	r5,zero
  80e464:	01004074 	movhi	r4,257
  80e468:	21060804 	addi	r4,r4,6176
  80e46c:	080ff7c0 	call	80ff7c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80e470:	01800044 	movi	r6,1
  80e474:	000b883a 	mov	r5,zero
  80e478:	01002074 	movhi	r4,129
  80e47c:	210ab004 	addi	r4,r4,10944
  80e480:	080e7240 	call	80e724 <altera_avalon_jtag_uart_init>
  80e484:	01002074 	movhi	r4,129
  80e488:	210aa604 	addi	r4,r4,10904
  80e48c:	080e3dc0 	call	80e3dc <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  80e490:	01002074 	movhi	r4,129
  80e494:	210ec804 	addi	r4,r4,15136
  80e498:	080fd700 	call	80fd70 <altera_avalon_lcd_16207_init>
  80e49c:	01002074 	movhi	r4,129
  80e4a0:	210ebe04 	addi	r4,r4,15096
  80e4a4:	080e3dc0 	call	80e3dc <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
  80e4a8:	000d883a 	mov	r6,zero
  80e4ac:	000b883a 	mov	r5,zero
  80e4b0:	01002074 	movhi	r4,129
  80e4b4:	210f1004 	addi	r4,r4,15424
  80e4b8:	08101080 	call	810108 <altera_avalon_uart_init>
  80e4bc:	01002074 	movhi	r4,129
  80e4c0:	210f0604 	addi	r4,r4,15384
  80e4c4:	080e3dc0 	call	80e3dc <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VIDEO_RGB_RESAMPLER_0, video_rgb_resampler_0);
  80e4c8:	00802074 	movhi	r2,129
  80e4cc:	108f3704 	addi	r2,r2,15580
  80e4d0:	10800a17 	ldw	r2,40(r2)
  80e4d4:	10800017 	ldw	r2,0(r2)
  80e4d8:	10c003cc 	andi	r3,r2,15
  80e4dc:	00802074 	movhi	r2,129
  80e4e0:	108f3704 	addi	r2,r2,15580
  80e4e4:	10c00b15 	stw	r3,44(r2)
  80e4e8:	00802074 	movhi	r2,129
  80e4ec:	108f3704 	addi	r2,r2,15580
  80e4f0:	10800a17 	ldw	r2,40(r2)
  80e4f4:	10800017 	ldw	r2,0(r2)
  80e4f8:	1005d13a 	srai	r2,r2,4
  80e4fc:	10c0004c 	andi	r3,r2,1
  80e500:	00802074 	movhi	r2,129
  80e504:	108f3704 	addi	r2,r2,15580
  80e508:	10c00c15 	stw	r3,48(r2)
  80e50c:	00802074 	movhi	r2,129
  80e510:	108f3704 	addi	r2,r2,15580
  80e514:	10800a17 	ldw	r2,40(r2)
  80e518:	10800017 	ldw	r2,0(r2)
  80e51c:	1005d17a 	srai	r2,r2,5
  80e520:	10c0004c 	andi	r3,r2,1
  80e524:	00802074 	movhi	r2,129
  80e528:	108f3704 	addi	r2,r2,15580
  80e52c:	10c00d15 	stw	r3,52(r2)
  80e530:	00802074 	movhi	r2,129
  80e534:	108f3704 	addi	r2,r2,15580
  80e538:	10800a17 	ldw	r2,40(r2)
  80e53c:	10800017 	ldw	r2,0(r2)
  80e540:	1005d43a 	srai	r2,r2,16
  80e544:	10c003cc 	andi	r3,r2,15
  80e548:	00802074 	movhi	r2,129
  80e54c:	108f3704 	addi	r2,r2,15580
  80e550:	10c00e15 	stw	r3,56(r2)
  80e554:	00802074 	movhi	r2,129
  80e558:	108f3704 	addi	r2,r2,15580
  80e55c:	10800a17 	ldw	r2,40(r2)
  80e560:	10800017 	ldw	r2,0(r2)
  80e564:	1005d53a 	srai	r2,r2,20
  80e568:	10c0004c 	andi	r3,r2,1
  80e56c:	00802074 	movhi	r2,129
  80e570:	108f3704 	addi	r2,r2,15580
  80e574:	10c00f15 	stw	r3,60(r2)
  80e578:	00802074 	movhi	r2,129
  80e57c:	108f3704 	addi	r2,r2,15580
  80e580:	10800a17 	ldw	r2,40(r2)
  80e584:	10800017 	ldw	r2,0(r2)
  80e588:	1005d57a 	srai	r2,r2,21
  80e58c:	10c0004c 	andi	r3,r2,1
  80e590:	00802074 	movhi	r2,129
  80e594:	108f3704 	addi	r2,r2,15580
  80e598:	10c01015 	stw	r3,64(r2)
  80e59c:	01002074 	movhi	r4,129
  80e5a0:	210f3704 	addi	r4,r4,15580
  80e5a4:	080e3dc0 	call	80e3dc <alt_dev_reg>
}
  80e5a8:	0001883a 	nop
  80e5ac:	e037883a 	mov	sp,fp
  80e5b0:	dfc00117 	ldw	ra,4(sp)
  80e5b4:	df000017 	ldw	fp,0(sp)
  80e5b8:	dec00204 	addi	sp,sp,8
  80e5bc:	f800283a 	ret

0080e5c0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80e5c0:	defffa04 	addi	sp,sp,-24
  80e5c4:	dfc00515 	stw	ra,20(sp)
  80e5c8:	df000415 	stw	fp,16(sp)
  80e5cc:	df000404 	addi	fp,sp,16
  80e5d0:	e13ffd15 	stw	r4,-12(fp)
  80e5d4:	e17ffe15 	stw	r5,-8(fp)
  80e5d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80e5dc:	e0bffd17 	ldw	r2,-12(fp)
  80e5e0:	10800017 	ldw	r2,0(r2)
  80e5e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80e5e8:	e0bffc17 	ldw	r2,-16(fp)
  80e5ec:	10c00a04 	addi	r3,r2,40
  80e5f0:	e0bffd17 	ldw	r2,-12(fp)
  80e5f4:	10800217 	ldw	r2,8(r2)
  80e5f8:	100f883a 	mov	r7,r2
  80e5fc:	e1bfff17 	ldw	r6,-4(fp)
  80e600:	e17ffe17 	ldw	r5,-8(fp)
  80e604:	1809883a 	mov	r4,r3
  80e608:	080ebe80 	call	80ebe8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80e60c:	e037883a 	mov	sp,fp
  80e610:	dfc00117 	ldw	ra,4(sp)
  80e614:	df000017 	ldw	fp,0(sp)
  80e618:	dec00204 	addi	sp,sp,8
  80e61c:	f800283a 	ret

0080e620 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80e620:	defffa04 	addi	sp,sp,-24
  80e624:	dfc00515 	stw	ra,20(sp)
  80e628:	df000415 	stw	fp,16(sp)
  80e62c:	df000404 	addi	fp,sp,16
  80e630:	e13ffd15 	stw	r4,-12(fp)
  80e634:	e17ffe15 	stw	r5,-8(fp)
  80e638:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80e63c:	e0bffd17 	ldw	r2,-12(fp)
  80e640:	10800017 	ldw	r2,0(r2)
  80e644:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80e648:	e0bffc17 	ldw	r2,-16(fp)
  80e64c:	10c00a04 	addi	r3,r2,40
  80e650:	e0bffd17 	ldw	r2,-12(fp)
  80e654:	10800217 	ldw	r2,8(r2)
  80e658:	100f883a 	mov	r7,r2
  80e65c:	e1bfff17 	ldw	r6,-4(fp)
  80e660:	e17ffe17 	ldw	r5,-8(fp)
  80e664:	1809883a 	mov	r4,r3
  80e668:	080ee040 	call	80ee04 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80e66c:	e037883a 	mov	sp,fp
  80e670:	dfc00117 	ldw	ra,4(sp)
  80e674:	df000017 	ldw	fp,0(sp)
  80e678:	dec00204 	addi	sp,sp,8
  80e67c:	f800283a 	ret

0080e680 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80e680:	defffc04 	addi	sp,sp,-16
  80e684:	dfc00315 	stw	ra,12(sp)
  80e688:	df000215 	stw	fp,8(sp)
  80e68c:	df000204 	addi	fp,sp,8
  80e690:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80e694:	e0bfff17 	ldw	r2,-4(fp)
  80e698:	10800017 	ldw	r2,0(r2)
  80e69c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80e6a0:	e0bffe17 	ldw	r2,-8(fp)
  80e6a4:	10c00a04 	addi	r3,r2,40
  80e6a8:	e0bfff17 	ldw	r2,-4(fp)
  80e6ac:	10800217 	ldw	r2,8(r2)
  80e6b0:	100b883a 	mov	r5,r2
  80e6b4:	1809883a 	mov	r4,r3
  80e6b8:	080ea900 	call	80ea90 <altera_avalon_jtag_uart_close>
}
  80e6bc:	e037883a 	mov	sp,fp
  80e6c0:	dfc00117 	ldw	ra,4(sp)
  80e6c4:	df000017 	ldw	fp,0(sp)
  80e6c8:	dec00204 	addi	sp,sp,8
  80e6cc:	f800283a 	ret

0080e6d0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80e6d0:	defffa04 	addi	sp,sp,-24
  80e6d4:	dfc00515 	stw	ra,20(sp)
  80e6d8:	df000415 	stw	fp,16(sp)
  80e6dc:	df000404 	addi	fp,sp,16
  80e6e0:	e13ffd15 	stw	r4,-12(fp)
  80e6e4:	e17ffe15 	stw	r5,-8(fp)
  80e6e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80e6ec:	e0bffd17 	ldw	r2,-12(fp)
  80e6f0:	10800017 	ldw	r2,0(r2)
  80e6f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80e6f8:	e0bffc17 	ldw	r2,-16(fp)
  80e6fc:	10800a04 	addi	r2,r2,40
  80e700:	e1bfff17 	ldw	r6,-4(fp)
  80e704:	e17ffe17 	ldw	r5,-8(fp)
  80e708:	1009883a 	mov	r4,r2
  80e70c:	080eaf80 	call	80eaf8 <altera_avalon_jtag_uart_ioctl>
}
  80e710:	e037883a 	mov	sp,fp
  80e714:	dfc00117 	ldw	ra,4(sp)
  80e718:	df000017 	ldw	fp,0(sp)
  80e71c:	dec00204 	addi	sp,sp,8
  80e720:	f800283a 	ret

0080e724 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80e724:	defffa04 	addi	sp,sp,-24
  80e728:	dfc00515 	stw	ra,20(sp)
  80e72c:	df000415 	stw	fp,16(sp)
  80e730:	df000404 	addi	fp,sp,16
  80e734:	e13ffd15 	stw	r4,-12(fp)
  80e738:	e17ffe15 	stw	r5,-8(fp)
  80e73c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80e740:	e0bffd17 	ldw	r2,-12(fp)
  80e744:	00c00044 	movi	r3,1
  80e748:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80e74c:	e0bffd17 	ldw	r2,-12(fp)
  80e750:	10800017 	ldw	r2,0(r2)
  80e754:	10800104 	addi	r2,r2,4
  80e758:	1007883a 	mov	r3,r2
  80e75c:	e0bffd17 	ldw	r2,-12(fp)
  80e760:	10800817 	ldw	r2,32(r2)
  80e764:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80e768:	e0bffe17 	ldw	r2,-8(fp)
  80e76c:	e0ffff17 	ldw	r3,-4(fp)
  80e770:	d8000015 	stw	zero,0(sp)
  80e774:	e1fffd17 	ldw	r7,-12(fp)
  80e778:	01802074 	movhi	r6,129
  80e77c:	31b9f904 	addi	r6,r6,-6172
  80e780:	180b883a 	mov	r5,r3
  80e784:	1009883a 	mov	r4,r2
  80e788:	0810e540 	call	810e54 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80e78c:	e0bffd17 	ldw	r2,-12(fp)
  80e790:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80e794:	e0bffd17 	ldw	r2,-12(fp)
  80e798:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80e79c:	d0e76417 	ldw	r3,-25200(gp)
  80e7a0:	e1fffd17 	ldw	r7,-12(fp)
  80e7a4:	01802074 	movhi	r6,129
  80e7a8:	31ba7c04 	addi	r6,r6,-5648
  80e7ac:	180b883a 	mov	r5,r3
  80e7b0:	1009883a 	mov	r4,r2
  80e7b4:	08108d00 	call	8108d0 <alt_alarm_start>
  80e7b8:	1000040e 	bge	r2,zero,80e7cc <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80e7bc:	e0fffd17 	ldw	r3,-12(fp)
  80e7c0:	00a00034 	movhi	r2,32768
  80e7c4:	10bfffc4 	addi	r2,r2,-1
  80e7c8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80e7cc:	0001883a 	nop
  80e7d0:	e037883a 	mov	sp,fp
  80e7d4:	dfc00117 	ldw	ra,4(sp)
  80e7d8:	df000017 	ldw	fp,0(sp)
  80e7dc:	dec00204 	addi	sp,sp,8
  80e7e0:	f800283a 	ret

0080e7e4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80e7e4:	defff804 	addi	sp,sp,-32
  80e7e8:	df000715 	stw	fp,28(sp)
  80e7ec:	df000704 	addi	fp,sp,28
  80e7f0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80e7f4:	e0bfff17 	ldw	r2,-4(fp)
  80e7f8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  80e7fc:	e0bffb17 	ldw	r2,-20(fp)
  80e800:	10800017 	ldw	r2,0(r2)
  80e804:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80e808:	e0bffc17 	ldw	r2,-16(fp)
  80e80c:	10800104 	addi	r2,r2,4
  80e810:	10800037 	ldwio	r2,0(r2)
  80e814:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80e818:	e0bffd17 	ldw	r2,-12(fp)
  80e81c:	1080c00c 	andi	r2,r2,768
  80e820:	10006d26 	beq	r2,zero,80e9d8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80e824:	e0bffd17 	ldw	r2,-12(fp)
  80e828:	1080400c 	andi	r2,r2,256
  80e82c:	10003526 	beq	r2,zero,80e904 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80e830:	00800074 	movhi	r2,1
  80e834:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80e838:	e0bffb17 	ldw	r2,-20(fp)
  80e83c:	10800a17 	ldw	r2,40(r2)
  80e840:	10800044 	addi	r2,r2,1
  80e844:	1081ffcc 	andi	r2,r2,2047
  80e848:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  80e84c:	e0bffb17 	ldw	r2,-20(fp)
  80e850:	10c00b17 	ldw	r3,44(r2)
  80e854:	e0bffe17 	ldw	r2,-8(fp)
  80e858:	18801526 	beq	r3,r2,80e8b0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80e85c:	e0bffc17 	ldw	r2,-16(fp)
  80e860:	10800037 	ldwio	r2,0(r2)
  80e864:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80e868:	e0bff917 	ldw	r2,-28(fp)
  80e86c:	10a0000c 	andi	r2,r2,32768
  80e870:	10001126 	beq	r2,zero,80e8b8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80e874:	e0bffb17 	ldw	r2,-20(fp)
  80e878:	10800a17 	ldw	r2,40(r2)
  80e87c:	e0fff917 	ldw	r3,-28(fp)
  80e880:	1809883a 	mov	r4,r3
  80e884:	e0fffb17 	ldw	r3,-20(fp)
  80e888:	1885883a 	add	r2,r3,r2
  80e88c:	10800e04 	addi	r2,r2,56
  80e890:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80e894:	e0bffb17 	ldw	r2,-20(fp)
  80e898:	10800a17 	ldw	r2,40(r2)
  80e89c:	10800044 	addi	r2,r2,1
  80e8a0:	10c1ffcc 	andi	r3,r2,2047
  80e8a4:	e0bffb17 	ldw	r2,-20(fp)
  80e8a8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80e8ac:	003fe206 	br	80e838 <__alt_mem_onchip_mem+0xff806838>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  80e8b0:	0001883a 	nop
  80e8b4:	00000106 	br	80e8bc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  80e8b8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80e8bc:	e0bff917 	ldw	r2,-28(fp)
  80e8c0:	10bfffec 	andhi	r2,r2,65535
  80e8c4:	10000f26 	beq	r2,zero,80e904 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80e8c8:	e0bffb17 	ldw	r2,-20(fp)
  80e8cc:	10c00817 	ldw	r3,32(r2)
  80e8d0:	00bfff84 	movi	r2,-2
  80e8d4:	1886703a 	and	r3,r3,r2
  80e8d8:	e0bffb17 	ldw	r2,-20(fp)
  80e8dc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80e8e0:	e0bffc17 	ldw	r2,-16(fp)
  80e8e4:	10800104 	addi	r2,r2,4
  80e8e8:	1007883a 	mov	r3,r2
  80e8ec:	e0bffb17 	ldw	r2,-20(fp)
  80e8f0:	10800817 	ldw	r2,32(r2)
  80e8f4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80e8f8:	e0bffc17 	ldw	r2,-16(fp)
  80e8fc:	10800104 	addi	r2,r2,4
  80e900:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80e904:	e0bffd17 	ldw	r2,-12(fp)
  80e908:	1080800c 	andi	r2,r2,512
  80e90c:	103fbe26 	beq	r2,zero,80e808 <__alt_mem_onchip_mem+0xff806808>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80e910:	e0bffd17 	ldw	r2,-12(fp)
  80e914:	1004d43a 	srli	r2,r2,16
  80e918:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80e91c:	00001406 	br	80e970 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80e920:	e0bffc17 	ldw	r2,-16(fp)
  80e924:	e0fffb17 	ldw	r3,-20(fp)
  80e928:	18c00d17 	ldw	r3,52(r3)
  80e92c:	e13ffb17 	ldw	r4,-20(fp)
  80e930:	20c7883a 	add	r3,r4,r3
  80e934:	18c20e04 	addi	r3,r3,2104
  80e938:	18c00003 	ldbu	r3,0(r3)
  80e93c:	18c03fcc 	andi	r3,r3,255
  80e940:	18c0201c 	xori	r3,r3,128
  80e944:	18ffe004 	addi	r3,r3,-128
  80e948:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80e94c:	e0bffb17 	ldw	r2,-20(fp)
  80e950:	10800d17 	ldw	r2,52(r2)
  80e954:	10800044 	addi	r2,r2,1
  80e958:	10c1ffcc 	andi	r3,r2,2047
  80e95c:	e0bffb17 	ldw	r2,-20(fp)
  80e960:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80e964:	e0bffa17 	ldw	r2,-24(fp)
  80e968:	10bfffc4 	addi	r2,r2,-1
  80e96c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80e970:	e0bffa17 	ldw	r2,-24(fp)
  80e974:	10000526 	beq	r2,zero,80e98c <altera_avalon_jtag_uart_irq+0x1a8>
  80e978:	e0bffb17 	ldw	r2,-20(fp)
  80e97c:	10c00d17 	ldw	r3,52(r2)
  80e980:	e0bffb17 	ldw	r2,-20(fp)
  80e984:	10800c17 	ldw	r2,48(r2)
  80e988:	18bfe51e 	bne	r3,r2,80e920 <__alt_mem_onchip_mem+0xff806920>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80e98c:	e0bffa17 	ldw	r2,-24(fp)
  80e990:	103f9d26 	beq	r2,zero,80e808 <__alt_mem_onchip_mem+0xff806808>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80e994:	e0bffb17 	ldw	r2,-20(fp)
  80e998:	10c00817 	ldw	r3,32(r2)
  80e99c:	00bfff44 	movi	r2,-3
  80e9a0:	1886703a 	and	r3,r3,r2
  80e9a4:	e0bffb17 	ldw	r2,-20(fp)
  80e9a8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80e9ac:	e0bffb17 	ldw	r2,-20(fp)
  80e9b0:	10800017 	ldw	r2,0(r2)
  80e9b4:	10800104 	addi	r2,r2,4
  80e9b8:	1007883a 	mov	r3,r2
  80e9bc:	e0bffb17 	ldw	r2,-20(fp)
  80e9c0:	10800817 	ldw	r2,32(r2)
  80e9c4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80e9c8:	e0bffc17 	ldw	r2,-16(fp)
  80e9cc:	10800104 	addi	r2,r2,4
  80e9d0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80e9d4:	003f8c06 	br	80e808 <__alt_mem_onchip_mem+0xff806808>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  80e9d8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  80e9dc:	0001883a 	nop
  80e9e0:	e037883a 	mov	sp,fp
  80e9e4:	df000017 	ldw	fp,0(sp)
  80e9e8:	dec00104 	addi	sp,sp,4
  80e9ec:	f800283a 	ret

0080e9f0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80e9f0:	defff804 	addi	sp,sp,-32
  80e9f4:	df000715 	stw	fp,28(sp)
  80e9f8:	df000704 	addi	fp,sp,28
  80e9fc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80ea00:	e0bffb17 	ldw	r2,-20(fp)
  80ea04:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80ea08:	e0bff917 	ldw	r2,-28(fp)
  80ea0c:	10800017 	ldw	r2,0(r2)
  80ea10:	10800104 	addi	r2,r2,4
  80ea14:	10800037 	ldwio	r2,0(r2)
  80ea18:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80ea1c:	e0bffa17 	ldw	r2,-24(fp)
  80ea20:	1081000c 	andi	r2,r2,1024
  80ea24:	10000b26 	beq	r2,zero,80ea54 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80ea28:	e0bff917 	ldw	r2,-28(fp)
  80ea2c:	10800017 	ldw	r2,0(r2)
  80ea30:	10800104 	addi	r2,r2,4
  80ea34:	1007883a 	mov	r3,r2
  80ea38:	e0bff917 	ldw	r2,-28(fp)
  80ea3c:	10800817 	ldw	r2,32(r2)
  80ea40:	10810014 	ori	r2,r2,1024
  80ea44:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  80ea48:	e0bff917 	ldw	r2,-28(fp)
  80ea4c:	10000915 	stw	zero,36(r2)
  80ea50:	00000a06 	br	80ea7c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80ea54:	e0bff917 	ldw	r2,-28(fp)
  80ea58:	10c00917 	ldw	r3,36(r2)
  80ea5c:	00a00034 	movhi	r2,32768
  80ea60:	10bfff04 	addi	r2,r2,-4
  80ea64:	10c00536 	bltu	r2,r3,80ea7c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  80ea68:	e0bff917 	ldw	r2,-28(fp)
  80ea6c:	10800917 	ldw	r2,36(r2)
  80ea70:	10c00044 	addi	r3,r2,1
  80ea74:	e0bff917 	ldw	r2,-28(fp)
  80ea78:	10c00915 	stw	r3,36(r2)
  80ea7c:	d0a76417 	ldw	r2,-25200(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80ea80:	e037883a 	mov	sp,fp
  80ea84:	df000017 	ldw	fp,0(sp)
  80ea88:	dec00104 	addi	sp,sp,4
  80ea8c:	f800283a 	ret

0080ea90 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80ea90:	defffd04 	addi	sp,sp,-12
  80ea94:	df000215 	stw	fp,8(sp)
  80ea98:	df000204 	addi	fp,sp,8
  80ea9c:	e13ffe15 	stw	r4,-8(fp)
  80eaa0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80eaa4:	00000506 	br	80eabc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80eaa8:	e0bfff17 	ldw	r2,-4(fp)
  80eaac:	1090000c 	andi	r2,r2,16384
  80eab0:	10000226 	beq	r2,zero,80eabc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80eab4:	00bffd44 	movi	r2,-11
  80eab8:	00000b06 	br	80eae8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80eabc:	e0bffe17 	ldw	r2,-8(fp)
  80eac0:	10c00d17 	ldw	r3,52(r2)
  80eac4:	e0bffe17 	ldw	r2,-8(fp)
  80eac8:	10800c17 	ldw	r2,48(r2)
  80eacc:	18800526 	beq	r3,r2,80eae4 <altera_avalon_jtag_uart_close+0x54>
  80ead0:	e0bffe17 	ldw	r2,-8(fp)
  80ead4:	10c00917 	ldw	r3,36(r2)
  80ead8:	e0bffe17 	ldw	r2,-8(fp)
  80eadc:	10800117 	ldw	r2,4(r2)
  80eae0:	18bff136 	bltu	r3,r2,80eaa8 <__alt_mem_onchip_mem+0xff806aa8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80eae4:	0005883a 	mov	r2,zero
}
  80eae8:	e037883a 	mov	sp,fp
  80eaec:	df000017 	ldw	fp,0(sp)
  80eaf0:	dec00104 	addi	sp,sp,4
  80eaf4:	f800283a 	ret

0080eaf8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80eaf8:	defffa04 	addi	sp,sp,-24
  80eafc:	df000515 	stw	fp,20(sp)
  80eb00:	df000504 	addi	fp,sp,20
  80eb04:	e13ffd15 	stw	r4,-12(fp)
  80eb08:	e17ffe15 	stw	r5,-8(fp)
  80eb0c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  80eb10:	00bff9c4 	movi	r2,-25
  80eb14:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  80eb18:	e0bffe17 	ldw	r2,-8(fp)
  80eb1c:	10da8060 	cmpeqi	r3,r2,27137
  80eb20:	1800031e 	bne	r3,zero,80eb30 <altera_avalon_jtag_uart_ioctl+0x38>
  80eb24:	109a80a0 	cmpeqi	r2,r2,27138
  80eb28:	1000181e 	bne	r2,zero,80eb8c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  80eb2c:	00002906 	br	80ebd4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80eb30:	e0bffd17 	ldw	r2,-12(fp)
  80eb34:	10c00117 	ldw	r3,4(r2)
  80eb38:	00a00034 	movhi	r2,32768
  80eb3c:	10bfffc4 	addi	r2,r2,-1
  80eb40:	18802126 	beq	r3,r2,80ebc8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  80eb44:	e0bfff17 	ldw	r2,-4(fp)
  80eb48:	10800017 	ldw	r2,0(r2)
  80eb4c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80eb50:	e0bffc17 	ldw	r2,-16(fp)
  80eb54:	10800090 	cmplti	r2,r2,2
  80eb58:	1000061e 	bne	r2,zero,80eb74 <altera_avalon_jtag_uart_ioctl+0x7c>
  80eb5c:	e0fffc17 	ldw	r3,-16(fp)
  80eb60:	00a00034 	movhi	r2,32768
  80eb64:	10bfffc4 	addi	r2,r2,-1
  80eb68:	18800226 	beq	r3,r2,80eb74 <altera_avalon_jtag_uart_ioctl+0x7c>
  80eb6c:	e0bffc17 	ldw	r2,-16(fp)
  80eb70:	00000206 	br	80eb7c <altera_avalon_jtag_uart_ioctl+0x84>
  80eb74:	00a00034 	movhi	r2,32768
  80eb78:	10bfff84 	addi	r2,r2,-2
  80eb7c:	e0fffd17 	ldw	r3,-12(fp)
  80eb80:	18800115 	stw	r2,4(r3)
      rc = 0;
  80eb84:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80eb88:	00000f06 	br	80ebc8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80eb8c:	e0bffd17 	ldw	r2,-12(fp)
  80eb90:	10c00117 	ldw	r3,4(r2)
  80eb94:	00a00034 	movhi	r2,32768
  80eb98:	10bfffc4 	addi	r2,r2,-1
  80eb9c:	18800c26 	beq	r3,r2,80ebd0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80eba0:	e0bffd17 	ldw	r2,-12(fp)
  80eba4:	10c00917 	ldw	r3,36(r2)
  80eba8:	e0bffd17 	ldw	r2,-12(fp)
  80ebac:	10800117 	ldw	r2,4(r2)
  80ebb0:	1885803a 	cmpltu	r2,r3,r2
  80ebb4:	10c03fcc 	andi	r3,r2,255
  80ebb8:	e0bfff17 	ldw	r2,-4(fp)
  80ebbc:	10c00015 	stw	r3,0(r2)
      rc = 0;
  80ebc0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80ebc4:	00000206 	br	80ebd0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  80ebc8:	0001883a 	nop
  80ebcc:	00000106 	br	80ebd4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  80ebd0:	0001883a 	nop

  default:
    break;
  }

  return rc;
  80ebd4:	e0bffb17 	ldw	r2,-20(fp)
}
  80ebd8:	e037883a 	mov	sp,fp
  80ebdc:	df000017 	ldw	fp,0(sp)
  80ebe0:	dec00104 	addi	sp,sp,4
  80ebe4:	f800283a 	ret

0080ebe8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80ebe8:	defff304 	addi	sp,sp,-52
  80ebec:	dfc00c15 	stw	ra,48(sp)
  80ebf0:	df000b15 	stw	fp,44(sp)
  80ebf4:	df000b04 	addi	fp,sp,44
  80ebf8:	e13ffc15 	stw	r4,-16(fp)
  80ebfc:	e17ffd15 	stw	r5,-12(fp)
  80ec00:	e1bffe15 	stw	r6,-8(fp)
  80ec04:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  80ec08:	e0bffd17 	ldw	r2,-12(fp)
  80ec0c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80ec10:	00004706 	br	80ed30 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80ec14:	e0bffc17 	ldw	r2,-16(fp)
  80ec18:	10800a17 	ldw	r2,40(r2)
  80ec1c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80ec20:	e0bffc17 	ldw	r2,-16(fp)
  80ec24:	10800b17 	ldw	r2,44(r2)
  80ec28:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  80ec2c:	e0fff717 	ldw	r3,-36(fp)
  80ec30:	e0bff817 	ldw	r2,-32(fp)
  80ec34:	18800536 	bltu	r3,r2,80ec4c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80ec38:	e0fff717 	ldw	r3,-36(fp)
  80ec3c:	e0bff817 	ldw	r2,-32(fp)
  80ec40:	1885c83a 	sub	r2,r3,r2
  80ec44:	e0bff615 	stw	r2,-40(fp)
  80ec48:	00000406 	br	80ec5c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80ec4c:	00c20004 	movi	r3,2048
  80ec50:	e0bff817 	ldw	r2,-32(fp)
  80ec54:	1885c83a 	sub	r2,r3,r2
  80ec58:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80ec5c:	e0bff617 	ldw	r2,-40(fp)
  80ec60:	10001e26 	beq	r2,zero,80ecdc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  80ec64:	e0fffe17 	ldw	r3,-8(fp)
  80ec68:	e0bff617 	ldw	r2,-40(fp)
  80ec6c:	1880022e 	bgeu	r3,r2,80ec78 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  80ec70:	e0bffe17 	ldw	r2,-8(fp)
  80ec74:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80ec78:	e0bffc17 	ldw	r2,-16(fp)
  80ec7c:	10c00e04 	addi	r3,r2,56
  80ec80:	e0bff817 	ldw	r2,-32(fp)
  80ec84:	1885883a 	add	r2,r3,r2
  80ec88:	e1bff617 	ldw	r6,-40(fp)
  80ec8c:	100b883a 	mov	r5,r2
  80ec90:	e13ff517 	ldw	r4,-44(fp)
  80ec94:	0806e6c0 	call	806e6c <memcpy>
      ptr   += n;
  80ec98:	e0fff517 	ldw	r3,-44(fp)
  80ec9c:	e0bff617 	ldw	r2,-40(fp)
  80eca0:	1885883a 	add	r2,r3,r2
  80eca4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  80eca8:	e0fffe17 	ldw	r3,-8(fp)
  80ecac:	e0bff617 	ldw	r2,-40(fp)
  80ecb0:	1885c83a 	sub	r2,r3,r2
  80ecb4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ecb8:	e0fff817 	ldw	r3,-32(fp)
  80ecbc:	e0bff617 	ldw	r2,-40(fp)
  80ecc0:	1885883a 	add	r2,r3,r2
  80ecc4:	10c1ffcc 	andi	r3,r2,2047
  80ecc8:	e0bffc17 	ldw	r2,-16(fp)
  80eccc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80ecd0:	e0bffe17 	ldw	r2,-8(fp)
  80ecd4:	00bfcf16 	blt	zero,r2,80ec14 <__alt_mem_onchip_mem+0xff806c14>
  80ecd8:	00000106 	br	80ece0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  80ecdc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80ece0:	e0fff517 	ldw	r3,-44(fp)
  80ece4:	e0bffd17 	ldw	r2,-12(fp)
  80ece8:	1880141e 	bne	r3,r2,80ed3c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80ecec:	e0bfff17 	ldw	r2,-4(fp)
  80ecf0:	1090000c 	andi	r2,r2,16384
  80ecf4:	1000131e 	bne	r2,zero,80ed44 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80ecf8:	0001883a 	nop
  80ecfc:	e0bffc17 	ldw	r2,-16(fp)
  80ed00:	10c00a17 	ldw	r3,40(r2)
  80ed04:	e0bff717 	ldw	r2,-36(fp)
  80ed08:	1880051e 	bne	r3,r2,80ed20 <altera_avalon_jtag_uart_read+0x138>
  80ed0c:	e0bffc17 	ldw	r2,-16(fp)
  80ed10:	10c00917 	ldw	r3,36(r2)
  80ed14:	e0bffc17 	ldw	r2,-16(fp)
  80ed18:	10800117 	ldw	r2,4(r2)
  80ed1c:	18bff736 	bltu	r3,r2,80ecfc <__alt_mem_onchip_mem+0xff806cfc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80ed20:	e0bffc17 	ldw	r2,-16(fp)
  80ed24:	10c00a17 	ldw	r3,40(r2)
  80ed28:	e0bff717 	ldw	r2,-36(fp)
  80ed2c:	18800726 	beq	r3,r2,80ed4c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80ed30:	e0bffe17 	ldw	r2,-8(fp)
  80ed34:	00bfb716 	blt	zero,r2,80ec14 <__alt_mem_onchip_mem+0xff806c14>
  80ed38:	00000506 	br	80ed50 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  80ed3c:	0001883a 	nop
  80ed40:	00000306 	br	80ed50 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  80ed44:	0001883a 	nop
  80ed48:	00000106 	br	80ed50 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  80ed4c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80ed50:	e0fff517 	ldw	r3,-44(fp)
  80ed54:	e0bffd17 	ldw	r2,-12(fp)
  80ed58:	18801826 	beq	r3,r2,80edbc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ed5c:	0005303a 	rdctl	r2,status
  80ed60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ed64:	e0fffb17 	ldw	r3,-20(fp)
  80ed68:	00bfff84 	movi	r2,-2
  80ed6c:	1884703a 	and	r2,r3,r2
  80ed70:	1001703a 	wrctl	status,r2
  
  return context;
  80ed74:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80ed78:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80ed7c:	e0bffc17 	ldw	r2,-16(fp)
  80ed80:	10800817 	ldw	r2,32(r2)
  80ed84:	10c00054 	ori	r3,r2,1
  80ed88:	e0bffc17 	ldw	r2,-16(fp)
  80ed8c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80ed90:	e0bffc17 	ldw	r2,-16(fp)
  80ed94:	10800017 	ldw	r2,0(r2)
  80ed98:	10800104 	addi	r2,r2,4
  80ed9c:	1007883a 	mov	r3,r2
  80eda0:	e0bffc17 	ldw	r2,-16(fp)
  80eda4:	10800817 	ldw	r2,32(r2)
  80eda8:	18800035 	stwio	r2,0(r3)
  80edac:	e0bffa17 	ldw	r2,-24(fp)
  80edb0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80edb4:	e0bff917 	ldw	r2,-28(fp)
  80edb8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80edbc:	e0fff517 	ldw	r3,-44(fp)
  80edc0:	e0bffd17 	ldw	r2,-12(fp)
  80edc4:	18800426 	beq	r3,r2,80edd8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  80edc8:	e0fff517 	ldw	r3,-44(fp)
  80edcc:	e0bffd17 	ldw	r2,-12(fp)
  80edd0:	1885c83a 	sub	r2,r3,r2
  80edd4:	00000606 	br	80edf0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  80edd8:	e0bfff17 	ldw	r2,-4(fp)
  80eddc:	1090000c 	andi	r2,r2,16384
  80ede0:	10000226 	beq	r2,zero,80edec <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80ede4:	00bffd44 	movi	r2,-11
  80ede8:	00000106 	br	80edf0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  80edec:	00bffec4 	movi	r2,-5
}
  80edf0:	e037883a 	mov	sp,fp
  80edf4:	dfc00117 	ldw	ra,4(sp)
  80edf8:	df000017 	ldw	fp,0(sp)
  80edfc:	dec00204 	addi	sp,sp,8
  80ee00:	f800283a 	ret

0080ee04 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80ee04:	defff304 	addi	sp,sp,-52
  80ee08:	dfc00c15 	stw	ra,48(sp)
  80ee0c:	df000b15 	stw	fp,44(sp)
  80ee10:	df000b04 	addi	fp,sp,44
  80ee14:	e13ffc15 	stw	r4,-16(fp)
  80ee18:	e17ffd15 	stw	r5,-12(fp)
  80ee1c:	e1bffe15 	stw	r6,-8(fp)
  80ee20:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80ee24:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80ee28:	e0bffd17 	ldw	r2,-12(fp)
  80ee2c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80ee30:	00003706 	br	80ef10 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80ee34:	e0bffc17 	ldw	r2,-16(fp)
  80ee38:	10800c17 	ldw	r2,48(r2)
  80ee3c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  80ee40:	e0bffc17 	ldw	r2,-16(fp)
  80ee44:	10800d17 	ldw	r2,52(r2)
  80ee48:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  80ee4c:	e0fff917 	ldw	r3,-28(fp)
  80ee50:	e0bff517 	ldw	r2,-44(fp)
  80ee54:	1880062e 	bgeu	r3,r2,80ee70 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80ee58:	e0fff517 	ldw	r3,-44(fp)
  80ee5c:	e0bff917 	ldw	r2,-28(fp)
  80ee60:	1885c83a 	sub	r2,r3,r2
  80ee64:	10bfffc4 	addi	r2,r2,-1
  80ee68:	e0bff615 	stw	r2,-40(fp)
  80ee6c:	00000b06 	br	80ee9c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  80ee70:	e0bff517 	ldw	r2,-44(fp)
  80ee74:	10000526 	beq	r2,zero,80ee8c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80ee78:	00c20004 	movi	r3,2048
  80ee7c:	e0bff917 	ldw	r2,-28(fp)
  80ee80:	1885c83a 	sub	r2,r3,r2
  80ee84:	e0bff615 	stw	r2,-40(fp)
  80ee88:	00000406 	br	80ee9c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80ee8c:	00c1ffc4 	movi	r3,2047
  80ee90:	e0bff917 	ldw	r2,-28(fp)
  80ee94:	1885c83a 	sub	r2,r3,r2
  80ee98:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80ee9c:	e0bff617 	ldw	r2,-40(fp)
  80eea0:	10001e26 	beq	r2,zero,80ef1c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  80eea4:	e0fffe17 	ldw	r3,-8(fp)
  80eea8:	e0bff617 	ldw	r2,-40(fp)
  80eeac:	1880022e 	bgeu	r3,r2,80eeb8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  80eeb0:	e0bffe17 	ldw	r2,-8(fp)
  80eeb4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80eeb8:	e0bffc17 	ldw	r2,-16(fp)
  80eebc:	10c20e04 	addi	r3,r2,2104
  80eec0:	e0bff917 	ldw	r2,-28(fp)
  80eec4:	1885883a 	add	r2,r3,r2
  80eec8:	e1bff617 	ldw	r6,-40(fp)
  80eecc:	e17ffd17 	ldw	r5,-12(fp)
  80eed0:	1009883a 	mov	r4,r2
  80eed4:	0806e6c0 	call	806e6c <memcpy>
      ptr   += n;
  80eed8:	e0fffd17 	ldw	r3,-12(fp)
  80eedc:	e0bff617 	ldw	r2,-40(fp)
  80eee0:	1885883a 	add	r2,r3,r2
  80eee4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  80eee8:	e0fffe17 	ldw	r3,-8(fp)
  80eeec:	e0bff617 	ldw	r2,-40(fp)
  80eef0:	1885c83a 	sub	r2,r3,r2
  80eef4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80eef8:	e0fff917 	ldw	r3,-28(fp)
  80eefc:	e0bff617 	ldw	r2,-40(fp)
  80ef00:	1885883a 	add	r2,r3,r2
  80ef04:	10c1ffcc 	andi	r3,r2,2047
  80ef08:	e0bffc17 	ldw	r2,-16(fp)
  80ef0c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80ef10:	e0bffe17 	ldw	r2,-8(fp)
  80ef14:	00bfc716 	blt	zero,r2,80ee34 <__alt_mem_onchip_mem+0xff806e34>
  80ef18:	00000106 	br	80ef20 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  80ef1c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ef20:	0005303a 	rdctl	r2,status
  80ef24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ef28:	e0fffb17 	ldw	r3,-20(fp)
  80ef2c:	00bfff84 	movi	r2,-2
  80ef30:	1884703a 	and	r2,r3,r2
  80ef34:	1001703a 	wrctl	status,r2
  
  return context;
  80ef38:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80ef3c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80ef40:	e0bffc17 	ldw	r2,-16(fp)
  80ef44:	10800817 	ldw	r2,32(r2)
  80ef48:	10c00094 	ori	r3,r2,2
  80ef4c:	e0bffc17 	ldw	r2,-16(fp)
  80ef50:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80ef54:	e0bffc17 	ldw	r2,-16(fp)
  80ef58:	10800017 	ldw	r2,0(r2)
  80ef5c:	10800104 	addi	r2,r2,4
  80ef60:	1007883a 	mov	r3,r2
  80ef64:	e0bffc17 	ldw	r2,-16(fp)
  80ef68:	10800817 	ldw	r2,32(r2)
  80ef6c:	18800035 	stwio	r2,0(r3)
  80ef70:	e0bffa17 	ldw	r2,-24(fp)
  80ef74:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ef78:	e0bff817 	ldw	r2,-32(fp)
  80ef7c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80ef80:	e0bffe17 	ldw	r2,-8(fp)
  80ef84:	0080100e 	bge	zero,r2,80efc8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  80ef88:	e0bfff17 	ldw	r2,-4(fp)
  80ef8c:	1090000c 	andi	r2,r2,16384
  80ef90:	1000101e 	bne	r2,zero,80efd4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80ef94:	0001883a 	nop
  80ef98:	e0bffc17 	ldw	r2,-16(fp)
  80ef9c:	10c00d17 	ldw	r3,52(r2)
  80efa0:	e0bff517 	ldw	r2,-44(fp)
  80efa4:	1880051e 	bne	r3,r2,80efbc <altera_avalon_jtag_uart_write+0x1b8>
  80efa8:	e0bffc17 	ldw	r2,-16(fp)
  80efac:	10c00917 	ldw	r3,36(r2)
  80efb0:	e0bffc17 	ldw	r2,-16(fp)
  80efb4:	10800117 	ldw	r2,4(r2)
  80efb8:	18bff736 	bltu	r3,r2,80ef98 <__alt_mem_onchip_mem+0xff806f98>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  80efbc:	e0bffc17 	ldw	r2,-16(fp)
  80efc0:	10800917 	ldw	r2,36(r2)
  80efc4:	1000051e 	bne	r2,zero,80efdc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  80efc8:	e0bffe17 	ldw	r2,-8(fp)
  80efcc:	00bfd016 	blt	zero,r2,80ef10 <__alt_mem_onchip_mem+0xff806f10>
  80efd0:	00000306 	br	80efe0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  80efd4:	0001883a 	nop
  80efd8:	00000106 	br	80efe0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  80efdc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80efe0:	e0fffd17 	ldw	r3,-12(fp)
  80efe4:	e0bff717 	ldw	r2,-36(fp)
  80efe8:	18800426 	beq	r3,r2,80effc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  80efec:	e0fffd17 	ldw	r3,-12(fp)
  80eff0:	e0bff717 	ldw	r2,-36(fp)
  80eff4:	1885c83a 	sub	r2,r3,r2
  80eff8:	00000606 	br	80f014 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  80effc:	e0bfff17 	ldw	r2,-4(fp)
  80f000:	1090000c 	andi	r2,r2,16384
  80f004:	10000226 	beq	r2,zero,80f010 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  80f008:	00bffd44 	movi	r2,-11
  80f00c:	00000106 	br	80f014 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80f010:	00bffec4 	movi	r2,-5
}
  80f014:	e037883a 	mov	sp,fp
  80f018:	dfc00117 	ldw	ra,4(sp)
  80f01c:	df000017 	ldw	fp,0(sp)
  80f020:	dec00204 	addi	sp,sp,8
  80f024:	f800283a 	ret

0080f028 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  80f028:	defffa04 	addi	sp,sp,-24
  80f02c:	dfc00515 	stw	ra,20(sp)
  80f030:	df000415 	stw	fp,16(sp)
  80f034:	df000404 	addi	fp,sp,16
  80f038:	e13ffe15 	stw	r4,-8(fp)
  80f03c:	2805883a 	mov	r2,r5
  80f040:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80f044:	e0bffe17 	ldw	r2,-8(fp)
  80f048:	10800017 	ldw	r2,0(r2)
  80f04c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80f050:	008003f4 	movhi	r2,15
  80f054:	10909004 	addi	r2,r2,16960
  80f058:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80f05c:	e0bffe17 	ldw	r2,-8(fp)
  80f060:	10800803 	ldbu	r2,32(r2)
  80f064:	10803fcc 	andi	r2,r2,255
  80f068:	1080201c 	xori	r2,r2,128
  80f06c:	10bfe004 	addi	r2,r2,-128
  80f070:	1000151e 	bne	r2,zero,80f0c8 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80f074:	00000906 	br	80f09c <lcd_write_command+0x74>
    if (--i == 0)
  80f078:	e0bffc17 	ldw	r2,-16(fp)
  80f07c:	10bfffc4 	addi	r2,r2,-1
  80f080:	e0bffc15 	stw	r2,-16(fp)
  80f084:	e0bffc17 	ldw	r2,-16(fp)
  80f088:	1000041e 	bne	r2,zero,80f09c <lcd_write_command+0x74>
    {
      sp->broken = 1;
  80f08c:	e0bffe17 	ldw	r2,-8(fp)
  80f090:	00c00044 	movi	r3,1
  80f094:	10c00805 	stb	r3,32(r2)
      return;
  80f098:	00000c06 	br	80f0cc <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80f09c:	e0bffd17 	ldw	r2,-12(fp)
  80f0a0:	10800104 	addi	r2,r2,4
  80f0a4:	10800037 	ldwio	r2,0(r2)
  80f0a8:	1080200c 	andi	r2,r2,128
  80f0ac:	103ff21e 	bne	r2,zero,80f078 <__alt_mem_onchip_mem+0xff807078>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80f0b0:	01001904 	movi	r4,100
  80f0b4:	08113d80 	call	8113d8 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  80f0b8:	e0bffd17 	ldw	r2,-12(fp)
  80f0bc:	e0ffff03 	ldbu	r3,-4(fp)
  80f0c0:	10c00035 	stwio	r3,0(r2)
  80f0c4:	00000106 	br	80f0cc <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  80f0c8:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  80f0cc:	e037883a 	mov	sp,fp
  80f0d0:	dfc00117 	ldw	ra,4(sp)
  80f0d4:	df000017 	ldw	fp,0(sp)
  80f0d8:	dec00204 	addi	sp,sp,8
  80f0dc:	f800283a 	ret

0080f0e0 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  80f0e0:	defffa04 	addi	sp,sp,-24
  80f0e4:	dfc00515 	stw	ra,20(sp)
  80f0e8:	df000415 	stw	fp,16(sp)
  80f0ec:	df000404 	addi	fp,sp,16
  80f0f0:	e13ffe15 	stw	r4,-8(fp)
  80f0f4:	2805883a 	mov	r2,r5
  80f0f8:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80f0fc:	e0bffe17 	ldw	r2,-8(fp)
  80f100:	10800017 	ldw	r2,0(r2)
  80f104:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80f108:	008003f4 	movhi	r2,15
  80f10c:	10909004 	addi	r2,r2,16960
  80f110:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80f114:	e0bffe17 	ldw	r2,-8(fp)
  80f118:	10800803 	ldbu	r2,32(r2)
  80f11c:	10803fcc 	andi	r2,r2,255
  80f120:	1080201c 	xori	r2,r2,128
  80f124:	10bfe004 	addi	r2,r2,-128
  80f128:	10001d1e 	bne	r2,zero,80f1a0 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80f12c:	00000906 	br	80f154 <lcd_write_data+0x74>
    if (--i == 0)
  80f130:	e0bffc17 	ldw	r2,-16(fp)
  80f134:	10bfffc4 	addi	r2,r2,-1
  80f138:	e0bffc15 	stw	r2,-16(fp)
  80f13c:	e0bffc17 	ldw	r2,-16(fp)
  80f140:	1000041e 	bne	r2,zero,80f154 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  80f144:	e0bffe17 	ldw	r2,-8(fp)
  80f148:	00c00044 	movi	r3,1
  80f14c:	10c00805 	stb	r3,32(r2)
      return;
  80f150:	00001406 	br	80f1a4 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80f154:	e0bffd17 	ldw	r2,-12(fp)
  80f158:	10800104 	addi	r2,r2,4
  80f15c:	10800037 	ldwio	r2,0(r2)
  80f160:	1080200c 	andi	r2,r2,128
  80f164:	103ff21e 	bne	r2,zero,80f130 <__alt_mem_onchip_mem+0xff807130>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80f168:	01001904 	movi	r4,100
  80f16c:	08113d80 	call	8113d8 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  80f170:	e0bffd17 	ldw	r2,-12(fp)
  80f174:	10800204 	addi	r2,r2,8
  80f178:	1007883a 	mov	r3,r2
  80f17c:	e0bfff03 	ldbu	r2,-4(fp)
  80f180:	18800035 	stwio	r2,0(r3)

  sp->address++;
  80f184:	e0bffe17 	ldw	r2,-8(fp)
  80f188:	108008c3 	ldbu	r2,35(r2)
  80f18c:	10800044 	addi	r2,r2,1
  80f190:	1007883a 	mov	r3,r2
  80f194:	e0bffe17 	ldw	r2,-8(fp)
  80f198:	10c008c5 	stb	r3,35(r2)
  80f19c:	00000106 	br	80f1a4 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  80f1a0:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  80f1a4:	e037883a 	mov	sp,fp
  80f1a8:	dfc00117 	ldw	ra,4(sp)
  80f1ac:	df000017 	ldw	fp,0(sp)
  80f1b0:	dec00204 	addi	sp,sp,8
  80f1b4:	f800283a 	ret

0080f1b8 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  80f1b8:	defffc04 	addi	sp,sp,-16
  80f1bc:	dfc00315 	stw	ra,12(sp)
  80f1c0:	df000215 	stw	fp,8(sp)
  80f1c4:	df000204 	addi	fp,sp,8
  80f1c8:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  80f1cc:	01400044 	movi	r5,1
  80f1d0:	e13fff17 	ldw	r4,-4(fp)
  80f1d4:	080f0280 	call	80f028 <lcd_write_command>

  sp->x = 0;
  80f1d8:	e0bfff17 	ldw	r2,-4(fp)
  80f1dc:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  80f1e0:	e0bfff17 	ldw	r2,-4(fp)
  80f1e4:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  80f1e8:	e0bfff17 	ldw	r2,-4(fp)
  80f1ec:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80f1f0:	e03ffe15 	stw	zero,-8(fp)
  80f1f4:	00001b06 	br	80f264 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  80f1f8:	e0bffe17 	ldw	r2,-8(fp)
  80f1fc:	108018e4 	muli	r2,r2,99
  80f200:	10801004 	addi	r2,r2,64
  80f204:	e0ffff17 	ldw	r3,-4(fp)
  80f208:	1885883a 	add	r2,r3,r2
  80f20c:	01801444 	movi	r6,81
  80f210:	01400804 	movi	r5,32
  80f214:	1009883a 	mov	r4,r2
  80f218:	08016b80 	call	8016b8 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  80f21c:	e0bffe17 	ldw	r2,-8(fp)
  80f220:	108018e4 	muli	r2,r2,99
  80f224:	10800c04 	addi	r2,r2,48
  80f228:	e0ffff17 	ldw	r3,-4(fp)
  80f22c:	1885883a 	add	r2,r3,r2
  80f230:	01800404 	movi	r6,16
  80f234:	01400804 	movi	r5,32
  80f238:	1009883a 	mov	r4,r2
  80f23c:	08016b80 	call	8016b8 <memset>
    sp->line[y].width = 0;
  80f240:	e0ffff17 	ldw	r3,-4(fp)
  80f244:	e0bffe17 	ldw	r2,-8(fp)
  80f248:	108018e4 	muli	r2,r2,99
  80f24c:	1885883a 	add	r2,r3,r2
  80f250:	10802444 	addi	r2,r2,145
  80f254:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80f258:	e0bffe17 	ldw	r2,-8(fp)
  80f25c:	10800044 	addi	r2,r2,1
  80f260:	e0bffe15 	stw	r2,-8(fp)
  80f264:	e0bffe17 	ldw	r2,-8(fp)
  80f268:	10800090 	cmplti	r2,r2,2
  80f26c:	103fe21e 	bne	r2,zero,80f1f8 <__alt_mem_onchip_mem+0xff8071f8>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  80f270:	0001883a 	nop
  80f274:	e037883a 	mov	sp,fp
  80f278:	dfc00117 	ldw	ra,4(sp)
  80f27c:	df000017 	ldw	fp,0(sp)
  80f280:	dec00204 	addi	sp,sp,8
  80f284:	f800283a 	ret

0080f288 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  80f288:	defff704 	addi	sp,sp,-36
  80f28c:	dfc00815 	stw	ra,32(sp)
  80f290:	df000715 	stw	fp,28(sp)
  80f294:	df000704 	addi	fp,sp,28
  80f298:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  80f29c:	e0bfff17 	ldw	r2,-4(fp)
  80f2a0:	10800943 	ldbu	r2,37(r2)
  80f2a4:	10803fcc 	andi	r2,r2,255
  80f2a8:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80f2ac:	e03ff915 	stw	zero,-28(fp)
  80f2b0:	00006706 	br	80f450 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  80f2b4:	e0ffff17 	ldw	r3,-4(fp)
  80f2b8:	e0bff917 	ldw	r2,-28(fp)
  80f2bc:	108018e4 	muli	r2,r2,99
  80f2c0:	1885883a 	add	r2,r3,r2
  80f2c4:	10802444 	addi	r2,r2,145
  80f2c8:	10800003 	ldbu	r2,0(r2)
  80f2cc:	10803fcc 	andi	r2,r2,255
  80f2d0:	1080201c 	xori	r2,r2,128
  80f2d4:	10bfe004 	addi	r2,r2,-128
  80f2d8:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  80f2dc:	e0ffff17 	ldw	r3,-4(fp)
  80f2e0:	e0bff917 	ldw	r2,-28(fp)
  80f2e4:	108018e4 	muli	r2,r2,99
  80f2e8:	1885883a 	add	r2,r3,r2
  80f2ec:	10802484 	addi	r2,r2,146
  80f2f0:	10800003 	ldbu	r2,0(r2)
  80f2f4:	10c03fcc 	andi	r3,r2,255
  80f2f8:	e0bffc17 	ldw	r2,-16(fp)
  80f2fc:	1885383a 	mul	r2,r3,r2
  80f300:	1005d23a 	srai	r2,r2,8
  80f304:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  80f308:	e0fffb17 	ldw	r3,-20(fp)
  80f30c:	e0bffd17 	ldw	r2,-12(fp)
  80f310:	18800116 	blt	r3,r2,80f318 <lcd_repaint_screen+0x90>
      offset = 0;
  80f314:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80f318:	e03ffa15 	stw	zero,-24(fp)
  80f31c:	00004606 	br	80f438 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  80f320:	e0fffa17 	ldw	r3,-24(fp)
  80f324:	e0bffb17 	ldw	r2,-20(fp)
  80f328:	1885883a 	add	r2,r3,r2
  80f32c:	e17ffd17 	ldw	r5,-12(fp)
  80f330:	1009883a 	mov	r4,r2
  80f334:	080b0ac0 	call	80b0ac <__modsi3>
  80f338:	1009883a 	mov	r4,r2
  80f33c:	e0ffff17 	ldw	r3,-4(fp)
  80f340:	e0bff917 	ldw	r2,-28(fp)
  80f344:	108018e4 	muli	r2,r2,99
  80f348:	1885883a 	add	r2,r3,r2
  80f34c:	1105883a 	add	r2,r2,r4
  80f350:	10801004 	addi	r2,r2,64
  80f354:	10800003 	ldbu	r2,0(r2)
  80f358:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  80f35c:	e0ffff17 	ldw	r3,-4(fp)
  80f360:	e0bff917 	ldw	r2,-28(fp)
  80f364:	108018e4 	muli	r2,r2,99
  80f368:	1887883a 	add	r3,r3,r2
  80f36c:	e0bffa17 	ldw	r2,-24(fp)
  80f370:	1885883a 	add	r2,r3,r2
  80f374:	10800c04 	addi	r2,r2,48
  80f378:	10800003 	ldbu	r2,0(r2)
  80f37c:	10c03fcc 	andi	r3,r2,255
  80f380:	18c0201c 	xori	r3,r3,128
  80f384:	18ffe004 	addi	r3,r3,-128
  80f388:	e0bffe07 	ldb	r2,-8(fp)
  80f38c:	18802726 	beq	r3,r2,80f42c <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  80f390:	e0fff917 	ldw	r3,-28(fp)
  80f394:	d0a00d04 	addi	r2,gp,-32716
  80f398:	1885883a 	add	r2,r3,r2
  80f39c:	10800003 	ldbu	r2,0(r2)
  80f3a0:	1007883a 	mov	r3,r2
  80f3a4:	e0bffa17 	ldw	r2,-24(fp)
  80f3a8:	1885883a 	add	r2,r3,r2
  80f3ac:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  80f3b0:	e0fffe43 	ldbu	r3,-7(fp)
  80f3b4:	e0bfff17 	ldw	r2,-4(fp)
  80f3b8:	108008c3 	ldbu	r2,35(r2)
  80f3bc:	10803fcc 	andi	r2,r2,255
  80f3c0:	1080201c 	xori	r2,r2,128
  80f3c4:	10bfe004 	addi	r2,r2,-128
  80f3c8:	18800a26 	beq	r3,r2,80f3f4 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  80f3cc:	e0fffe43 	ldbu	r3,-7(fp)
  80f3d0:	00bfe004 	movi	r2,-128
  80f3d4:	1884b03a 	or	r2,r3,r2
  80f3d8:	10803fcc 	andi	r2,r2,255
  80f3dc:	100b883a 	mov	r5,r2
  80f3e0:	e13fff17 	ldw	r4,-4(fp)
  80f3e4:	080f0280 	call	80f028 <lcd_write_command>
          sp->address = address;
  80f3e8:	e0fffe43 	ldbu	r3,-7(fp)
  80f3ec:	e0bfff17 	ldw	r2,-4(fp)
  80f3f0:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  80f3f4:	e0bffe03 	ldbu	r2,-8(fp)
  80f3f8:	10803fcc 	andi	r2,r2,255
  80f3fc:	100b883a 	mov	r5,r2
  80f400:	e13fff17 	ldw	r4,-4(fp)
  80f404:	080f0e00 	call	80f0e0 <lcd_write_data>
        sp->line[y].visible[x] = c;
  80f408:	e0ffff17 	ldw	r3,-4(fp)
  80f40c:	e0bff917 	ldw	r2,-28(fp)
  80f410:	108018e4 	muli	r2,r2,99
  80f414:	1887883a 	add	r3,r3,r2
  80f418:	e0bffa17 	ldw	r2,-24(fp)
  80f41c:	1885883a 	add	r2,r3,r2
  80f420:	10800c04 	addi	r2,r2,48
  80f424:	e0fffe03 	ldbu	r3,-8(fp)
  80f428:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80f42c:	e0bffa17 	ldw	r2,-24(fp)
  80f430:	10800044 	addi	r2,r2,1
  80f434:	e0bffa15 	stw	r2,-24(fp)
  80f438:	e0bffa17 	ldw	r2,-24(fp)
  80f43c:	10800410 	cmplti	r2,r2,16
  80f440:	103fb71e 	bne	r2,zero,80f320 <__alt_mem_onchip_mem+0xff807320>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80f444:	e0bff917 	ldw	r2,-28(fp)
  80f448:	10800044 	addi	r2,r2,1
  80f44c:	e0bff915 	stw	r2,-28(fp)
  80f450:	e0bff917 	ldw	r2,-28(fp)
  80f454:	10800090 	cmplti	r2,r2,2
  80f458:	103f961e 	bne	r2,zero,80f2b4 <__alt_mem_onchip_mem+0xff8072b4>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  80f45c:	0001883a 	nop
  80f460:	e037883a 	mov	sp,fp
  80f464:	dfc00117 	ldw	ra,4(sp)
  80f468:	df000017 	ldw	fp,0(sp)
  80f46c:	dec00204 	addi	sp,sp,8
  80f470:	f800283a 	ret

0080f474 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  80f474:	defffc04 	addi	sp,sp,-16
  80f478:	dfc00315 	stw	ra,12(sp)
  80f47c:	df000215 	stw	fp,8(sp)
  80f480:	df000204 	addi	fp,sp,8
  80f484:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80f488:	e03ffe15 	stw	zero,-8(fp)
  80f48c:	00001d06 	br	80f504 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  80f490:	e0bffe17 	ldw	r2,-8(fp)
  80f494:	00800f16 	blt	zero,r2,80f4d4 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  80f498:	e0bffe17 	ldw	r2,-8(fp)
  80f49c:	108018e4 	muli	r2,r2,99
  80f4a0:	10801004 	addi	r2,r2,64
  80f4a4:	e0ffff17 	ldw	r3,-4(fp)
  80f4a8:	1889883a 	add	r4,r3,r2
  80f4ac:	e0bffe17 	ldw	r2,-8(fp)
  80f4b0:	10800044 	addi	r2,r2,1
  80f4b4:	108018e4 	muli	r2,r2,99
  80f4b8:	10801004 	addi	r2,r2,64
  80f4bc:	e0ffff17 	ldw	r3,-4(fp)
  80f4c0:	1885883a 	add	r2,r3,r2
  80f4c4:	01801404 	movi	r6,80
  80f4c8:	100b883a 	mov	r5,r2
  80f4cc:	0806e6c0 	call	806e6c <memcpy>
  80f4d0:	00000906 	br	80f4f8 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  80f4d4:	e0bffe17 	ldw	r2,-8(fp)
  80f4d8:	108018e4 	muli	r2,r2,99
  80f4dc:	10801004 	addi	r2,r2,64
  80f4e0:	e0ffff17 	ldw	r3,-4(fp)
  80f4e4:	1885883a 	add	r2,r3,r2
  80f4e8:	01801404 	movi	r6,80
  80f4ec:	01400804 	movi	r5,32
  80f4f0:	1009883a 	mov	r4,r2
  80f4f4:	08016b80 	call	8016b8 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80f4f8:	e0bffe17 	ldw	r2,-8(fp)
  80f4fc:	10800044 	addi	r2,r2,1
  80f500:	e0bffe15 	stw	r2,-8(fp)
  80f504:	e0bffe17 	ldw	r2,-8(fp)
  80f508:	10800090 	cmplti	r2,r2,2
  80f50c:	103fe01e 	bne	r2,zero,80f490 <__alt_mem_onchip_mem+0xff807490>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  80f510:	e0bfff17 	ldw	r2,-4(fp)
  80f514:	10800883 	ldbu	r2,34(r2)
  80f518:	10bfffc4 	addi	r2,r2,-1
  80f51c:	1007883a 	mov	r3,r2
  80f520:	e0bfff17 	ldw	r2,-4(fp)
  80f524:	10c00885 	stb	r3,34(r2)
}
  80f528:	0001883a 	nop
  80f52c:	e037883a 	mov	sp,fp
  80f530:	dfc00117 	ldw	ra,4(sp)
  80f534:	df000017 	ldw	fp,0(sp)
  80f538:	dec00204 	addi	sp,sp,8
  80f53c:	f800283a 	ret

0080f540 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  80f540:	defff904 	addi	sp,sp,-28
  80f544:	dfc00615 	stw	ra,24(sp)
  80f548:	df000515 	stw	fp,20(sp)
  80f54c:	df000504 	addi	fp,sp,20
  80f550:	e13ffe15 	stw	r4,-8(fp)
  80f554:	2805883a 	mov	r2,r5
  80f558:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  80f55c:	e03ffb15 	stw	zero,-20(fp)
  80f560:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  80f564:	e0bffe17 	ldw	r2,-8(fp)
  80f568:	10800a03 	ldbu	r2,40(r2)
  80f56c:	10803fcc 	andi	r2,r2,255
  80f570:	1080201c 	xori	r2,r2,128
  80f574:	10bfe004 	addi	r2,r2,-128
  80f578:	108016d8 	cmpnei	r2,r2,91
  80f57c:	1000411e 	bne	r2,zero,80f684 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  80f580:	e0bffe17 	ldw	r2,-8(fp)
  80f584:	10800a04 	addi	r2,r2,40
  80f588:	10800044 	addi	r2,r2,1
  80f58c:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  80f590:	00000c06 	br	80f5c4 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  80f594:	e0bffb17 	ldw	r2,-20(fp)
  80f598:	10c002a4 	muli	r3,r2,10
  80f59c:	e0bffd17 	ldw	r2,-12(fp)
  80f5a0:	11000044 	addi	r4,r2,1
  80f5a4:	e13ffd15 	stw	r4,-12(fp)
  80f5a8:	10800003 	ldbu	r2,0(r2)
  80f5ac:	10803fcc 	andi	r2,r2,255
  80f5b0:	1080201c 	xori	r2,r2,128
  80f5b4:	10bfe004 	addi	r2,r2,-128
  80f5b8:	10bff404 	addi	r2,r2,-48
  80f5bc:	1885883a 	add	r2,r3,r2
  80f5c0:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  80f5c4:	d0e01117 	ldw	r3,-32700(gp)
  80f5c8:	e0bffd17 	ldw	r2,-12(fp)
  80f5cc:	10800003 	ldbu	r2,0(r2)
  80f5d0:	10803fcc 	andi	r2,r2,255
  80f5d4:	1080201c 	xori	r2,r2,128
  80f5d8:	10bfe004 	addi	r2,r2,-128
  80f5dc:	10800044 	addi	r2,r2,1
  80f5e0:	1885883a 	add	r2,r3,r2
  80f5e4:	10800003 	ldbu	r2,0(r2)
  80f5e8:	10803fcc 	andi	r2,r2,255
  80f5ec:	1080010c 	andi	r2,r2,4
  80f5f0:	103fe81e 	bne	r2,zero,80f594 <__alt_mem_onchip_mem+0xff807594>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  80f5f4:	e0bffd17 	ldw	r2,-12(fp)
  80f5f8:	10800003 	ldbu	r2,0(r2)
  80f5fc:	10803fcc 	andi	r2,r2,255
  80f600:	1080201c 	xori	r2,r2,128
  80f604:	10bfe004 	addi	r2,r2,-128
  80f608:	10800ed8 	cmpnei	r2,r2,59
  80f60c:	10001f1e 	bne	r2,zero,80f68c <lcd_handle_escape+0x14c>
    {
      ptr++;
  80f610:	e0bffd17 	ldw	r2,-12(fp)
  80f614:	10800044 	addi	r2,r2,1
  80f618:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  80f61c:	00000c06 	br	80f650 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  80f620:	e0bffc17 	ldw	r2,-16(fp)
  80f624:	10c002a4 	muli	r3,r2,10
  80f628:	e0bffd17 	ldw	r2,-12(fp)
  80f62c:	11000044 	addi	r4,r2,1
  80f630:	e13ffd15 	stw	r4,-12(fp)
  80f634:	10800003 	ldbu	r2,0(r2)
  80f638:	10803fcc 	andi	r2,r2,255
  80f63c:	1080201c 	xori	r2,r2,128
  80f640:	10bfe004 	addi	r2,r2,-128
  80f644:	10bff404 	addi	r2,r2,-48
  80f648:	1885883a 	add	r2,r3,r2
  80f64c:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  80f650:	d0e01117 	ldw	r3,-32700(gp)
  80f654:	e0bffd17 	ldw	r2,-12(fp)
  80f658:	10800003 	ldbu	r2,0(r2)
  80f65c:	10803fcc 	andi	r2,r2,255
  80f660:	1080201c 	xori	r2,r2,128
  80f664:	10bfe004 	addi	r2,r2,-128
  80f668:	10800044 	addi	r2,r2,1
  80f66c:	1885883a 	add	r2,r3,r2
  80f670:	10800003 	ldbu	r2,0(r2)
  80f674:	10803fcc 	andi	r2,r2,255
  80f678:	1080010c 	andi	r2,r2,4
  80f67c:	103fe81e 	bne	r2,zero,80f620 <__alt_mem_onchip_mem+0xff807620>
  80f680:	00000206 	br	80f68c <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  80f684:	00bfffc4 	movi	r2,-1
  80f688:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  80f68c:	e0bfff07 	ldb	r2,-4(fp)
  80f690:	10c012a0 	cmpeqi	r3,r2,74
  80f694:	1800291e 	bne	r3,zero,80f73c <lcd_handle_escape+0x1fc>
  80f698:	10c012c8 	cmpgei	r3,r2,75
  80f69c:	1800031e 	bne	r3,zero,80f6ac <lcd_handle_escape+0x16c>
  80f6a0:	10801220 	cmpeqi	r2,r2,72
  80f6a4:	1000061e 	bne	r2,zero,80f6c0 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  80f6a8:	00004a06 	br	80f7d4 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  80f6ac:	10c012e0 	cmpeqi	r3,r2,75
  80f6b0:	1800281e 	bne	r3,zero,80f754 <lcd_handle_escape+0x214>
  80f6b4:	108019a0 	cmpeqi	r2,r2,102
  80f6b8:	1000011e 	bne	r2,zero,80f6c0 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  80f6bc:	00004506 	br	80f7d4 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  80f6c0:	e0bffc17 	ldw	r2,-16(fp)
  80f6c4:	0080050e 	bge	zero,r2,80f6dc <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  80f6c8:	e0bffc17 	ldw	r2,-16(fp)
  80f6cc:	10bfffc4 	addi	r2,r2,-1
  80f6d0:	1007883a 	mov	r3,r2
  80f6d4:	e0bffe17 	ldw	r2,-8(fp)
  80f6d8:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  80f6dc:	e0bffb17 	ldw	r2,-20(fp)
  80f6e0:	0080370e 	bge	zero,r2,80f7c0 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  80f6e4:	e0bffb17 	ldw	r2,-20(fp)
  80f6e8:	10bfffc4 	addi	r2,r2,-1
  80f6ec:	1007883a 	mov	r3,r2
  80f6f0:	e0bffe17 	ldw	r2,-8(fp)
  80f6f4:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  80f6f8:	e0bffe17 	ldw	r2,-8(fp)
  80f6fc:	10800883 	ldbu	r2,34(r2)
  80f700:	10803fcc 	andi	r2,r2,255
  80f704:	10800170 	cmpltui	r2,r2,5
  80f708:	1000061e 	bne	r2,zero,80f724 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  80f70c:	e0bffe17 	ldw	r2,-8(fp)
  80f710:	00c00104 	movi	r3,4
  80f714:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  80f718:	00000206 	br	80f724 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  80f71c:	e13ffe17 	ldw	r4,-8(fp)
  80f720:	080f4740 	call	80f474 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  80f724:	e0bffe17 	ldw	r2,-8(fp)
  80f728:	10800883 	ldbu	r2,34(r2)
  80f72c:	10803fcc 	andi	r2,r2,255
  80f730:	108000e8 	cmpgeui	r2,r2,3
  80f734:	103ff91e 	bne	r2,zero,80f71c <__alt_mem_onchip_mem+0xff80771c>
        lcd_scroll_up(sp);
    }
    break;
  80f738:	00002106 	br	80f7c0 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  80f73c:	e0bffb17 	ldw	r2,-20(fp)
  80f740:	10800098 	cmpnei	r2,r2,2
  80f744:	1000201e 	bne	r2,zero,80f7c8 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  80f748:	e13ffe17 	ldw	r4,-8(fp)
  80f74c:	080f1b80 	call	80f1b8 <lcd_clear_screen>
    break;
  80f750:	00001d06 	br	80f7c8 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  80f754:	e0bffb17 	ldw	r2,-20(fp)
  80f758:	00801d16 	blt	zero,r2,80f7d0 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80f75c:	e0bffe17 	ldw	r2,-8(fp)
  80f760:	10800843 	ldbu	r2,33(r2)
  80f764:	10803fcc 	andi	r2,r2,255
  80f768:	10801428 	cmpgeui	r2,r2,80
  80f76c:	1000181e 	bne	r2,zero,80f7d0 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  80f770:	e0bffe17 	ldw	r2,-8(fp)
  80f774:	10800883 	ldbu	r2,34(r2)
  80f778:	10803fcc 	andi	r2,r2,255
  80f77c:	108018e4 	muli	r2,r2,99
  80f780:	10801004 	addi	r2,r2,64
  80f784:	e0fffe17 	ldw	r3,-8(fp)
  80f788:	1887883a 	add	r3,r3,r2
  80f78c:	e0bffe17 	ldw	r2,-8(fp)
  80f790:	10800843 	ldbu	r2,33(r2)
  80f794:	10803fcc 	andi	r2,r2,255
  80f798:	1889883a 	add	r4,r3,r2
  80f79c:	e0bffe17 	ldw	r2,-8(fp)
  80f7a0:	10800843 	ldbu	r2,33(r2)
  80f7a4:	10803fcc 	andi	r2,r2,255
  80f7a8:	00c01404 	movi	r3,80
  80f7ac:	1885c83a 	sub	r2,r3,r2
  80f7b0:	100d883a 	mov	r6,r2
  80f7b4:	01400804 	movi	r5,32
  80f7b8:	08016b80 	call	8016b8 <memset>
    }
    break;
  80f7bc:	00000406 	br	80f7d0 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  80f7c0:	0001883a 	nop
  80f7c4:	00000306 	br	80f7d4 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  80f7c8:	0001883a 	nop
  80f7cc:	00000106 	br	80f7d4 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  80f7d0:	0001883a 	nop
  }
}
  80f7d4:	0001883a 	nop
  80f7d8:	e037883a 	mov	sp,fp
  80f7dc:	dfc00117 	ldw	ra,4(sp)
  80f7e0:	df000017 	ldw	fp,0(sp)
  80f7e4:	dec00204 	addi	sp,sp,8
  80f7e8:	f800283a 	ret

0080f7ec <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  80f7ec:	defff304 	addi	sp,sp,-52
  80f7f0:	dfc00c15 	stw	ra,48(sp)
  80f7f4:	df000b15 	stw	fp,44(sp)
  80f7f8:	df000b04 	addi	fp,sp,44
  80f7fc:	e13ffc15 	stw	r4,-16(fp)
  80f800:	e17ffd15 	stw	r5,-12(fp)
  80f804:	e1bffe15 	stw	r6,-8(fp)
  80f808:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  80f80c:	e0bffe17 	ldw	r2,-8(fp)
  80f810:	e0fffd17 	ldw	r3,-12(fp)
  80f814:	1885883a 	add	r2,r3,r2
  80f818:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  80f81c:	e0bffc17 	ldw	r2,-16(fp)
  80f820:	00c00044 	movi	r3,1
  80f824:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  80f828:	00009906 	br	80fa90 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  80f82c:	e0bffd17 	ldw	r2,-12(fp)
  80f830:	10800003 	ldbu	r2,0(r2)
  80f834:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  80f838:	e0bffc17 	ldw	r2,-16(fp)
  80f83c:	10800903 	ldbu	r2,36(r2)
  80f840:	10803fcc 	andi	r2,r2,255
  80f844:	1080201c 	xori	r2,r2,128
  80f848:	10bfe004 	addi	r2,r2,-128
  80f84c:	10003716 	blt	r2,zero,80f92c <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  80f850:	e0bffc17 	ldw	r2,-16(fp)
  80f854:	10800903 	ldbu	r2,36(r2)
  80f858:	10803fcc 	andi	r2,r2,255
  80f85c:	1080201c 	xori	r2,r2,128
  80f860:	10bfe004 	addi	r2,r2,-128
  80f864:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  80f868:	e0bffa17 	ldw	r2,-24(fp)
  80f86c:	1000031e 	bne	r2,zero,80f87c <altera_avalon_lcd_16207_write+0x90>
  80f870:	e0bff907 	ldb	r2,-28(fp)
  80f874:	108016d8 	cmpnei	r2,r2,91
  80f878:	10000d1e 	bne	r2,zero,80f8b0 <altera_avalon_lcd_16207_write+0xc4>
  80f87c:	e0bffa17 	ldw	r2,-24(fp)
  80f880:	10001826 	beq	r2,zero,80f8e4 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  80f884:	d0e01117 	ldw	r3,-32700(gp)
  80f888:	e0bff907 	ldb	r2,-28(fp)
  80f88c:	10800044 	addi	r2,r2,1
  80f890:	1885883a 	add	r2,r3,r2
  80f894:	10800003 	ldbu	r2,0(r2)
  80f898:	10803fcc 	andi	r2,r2,255
  80f89c:	1080010c 	andi	r2,r2,4
  80f8a0:	1000101e 	bne	r2,zero,80f8e4 <altera_avalon_lcd_16207_write+0xf8>
  80f8a4:	e0bff907 	ldb	r2,-28(fp)
  80f8a8:	10800ee0 	cmpeqi	r2,r2,59
  80f8ac:	10000d1e 	bne	r2,zero,80f8e4 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  80f8b0:	e0fffc17 	ldw	r3,-16(fp)
  80f8b4:	e0bffa17 	ldw	r2,-24(fp)
  80f8b8:	1885883a 	add	r2,r3,r2
  80f8bc:	10800a04 	addi	r2,r2,40
  80f8c0:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  80f8c4:	e0bff907 	ldb	r2,-28(fp)
  80f8c8:	100b883a 	mov	r5,r2
  80f8cc:	e13ffc17 	ldw	r4,-16(fp)
  80f8d0:	080f5400 	call	80f540 <lcd_handle_escape>

        sp->esccount = -1;
  80f8d4:	e0bffc17 	ldw	r2,-16(fp)
  80f8d8:	00ffffc4 	movi	r3,-1
  80f8dc:	10c00905 	stb	r3,36(r2)
  80f8e0:	00006806 	br	80fa84 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  80f8e4:	e0bffc17 	ldw	r2,-16(fp)
  80f8e8:	10800903 	ldbu	r2,36(r2)
  80f8ec:	10803fcc 	andi	r2,r2,255
  80f8f0:	108001e8 	cmpgeui	r2,r2,7
  80f8f4:	1000631e 	bne	r2,zero,80fa84 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  80f8f8:	e0fffc17 	ldw	r3,-16(fp)
  80f8fc:	e0bffa17 	ldw	r2,-24(fp)
  80f900:	1885883a 	add	r2,r3,r2
  80f904:	10800a04 	addi	r2,r2,40
  80f908:	e0fff903 	ldbu	r3,-28(fp)
  80f90c:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  80f910:	e0bffc17 	ldw	r2,-16(fp)
  80f914:	10800903 	ldbu	r2,36(r2)
  80f918:	10800044 	addi	r2,r2,1
  80f91c:	1007883a 	mov	r3,r2
  80f920:	e0bffc17 	ldw	r2,-16(fp)
  80f924:	10c00905 	stb	r3,36(r2)
  80f928:	00005606 	br	80fa84 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  80f92c:	e0bff907 	ldb	r2,-28(fp)
  80f930:	108006d8 	cmpnei	r2,r2,27
  80f934:	1000031e 	bne	r2,zero,80f944 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  80f938:	e0bffc17 	ldw	r2,-16(fp)
  80f93c:	10000905 	stb	zero,36(r2)
  80f940:	00005006 	br	80fa84 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  80f944:	e0bff907 	ldb	r2,-28(fp)
  80f948:	10800358 	cmpnei	r2,r2,13
  80f94c:	1000031e 	bne	r2,zero,80f95c <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  80f950:	e0bffc17 	ldw	r2,-16(fp)
  80f954:	10000845 	stb	zero,33(r2)
  80f958:	00004a06 	br	80fa84 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  80f95c:	e0bff907 	ldb	r2,-28(fp)
  80f960:	10800298 	cmpnei	r2,r2,10
  80f964:	1000101e 	bne	r2,zero,80f9a8 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  80f968:	e0bffc17 	ldw	r2,-16(fp)
  80f96c:	10000845 	stb	zero,33(r2)
      sp->y++;
  80f970:	e0bffc17 	ldw	r2,-16(fp)
  80f974:	10800883 	ldbu	r2,34(r2)
  80f978:	10800044 	addi	r2,r2,1
  80f97c:	1007883a 	mov	r3,r2
  80f980:	e0bffc17 	ldw	r2,-16(fp)
  80f984:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  80f988:	e0bffc17 	ldw	r2,-16(fp)
  80f98c:	10800883 	ldbu	r2,34(r2)
  80f990:	10803fcc 	andi	r2,r2,255
  80f994:	108000f0 	cmpltui	r2,r2,3
  80f998:	10003a1e 	bne	r2,zero,80fa84 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  80f99c:	e13ffc17 	ldw	r4,-16(fp)
  80f9a0:	080f4740 	call	80f474 <lcd_scroll_up>
  80f9a4:	00003706 	br	80fa84 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  80f9a8:	e0bff907 	ldb	r2,-28(fp)
  80f9ac:	10800218 	cmpnei	r2,r2,8
  80f9b0:	10000b1e 	bne	r2,zero,80f9e0 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  80f9b4:	e0bffc17 	ldw	r2,-16(fp)
  80f9b8:	10800843 	ldbu	r2,33(r2)
  80f9bc:	10803fcc 	andi	r2,r2,255
  80f9c0:	10003026 	beq	r2,zero,80fa84 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  80f9c4:	e0bffc17 	ldw	r2,-16(fp)
  80f9c8:	10800843 	ldbu	r2,33(r2)
  80f9cc:	10bfffc4 	addi	r2,r2,-1
  80f9d0:	1007883a 	mov	r3,r2
  80f9d4:	e0bffc17 	ldw	r2,-16(fp)
  80f9d8:	10c00845 	stb	r3,33(r2)
  80f9dc:	00002906 	br	80fa84 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  80f9e0:	d0e01117 	ldw	r3,-32700(gp)
  80f9e4:	e0bff907 	ldb	r2,-28(fp)
  80f9e8:	10800044 	addi	r2,r2,1
  80f9ec:	1885883a 	add	r2,r3,r2
  80f9f0:	10800003 	ldbu	r2,0(r2)
  80f9f4:	10803fcc 	andi	r2,r2,255
  80f9f8:	1080201c 	xori	r2,r2,128
  80f9fc:	10bfe004 	addi	r2,r2,-128
  80fa00:	108025cc 	andi	r2,r2,151
  80fa04:	10001f26 	beq	r2,zero,80fa84 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  80fa08:	e0bffc17 	ldw	r2,-16(fp)
  80fa0c:	10800883 	ldbu	r2,34(r2)
  80fa10:	10803fcc 	andi	r2,r2,255
  80fa14:	108000b0 	cmpltui	r2,r2,2
  80fa18:	1000021e 	bne	r2,zero,80fa24 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  80fa1c:	e13ffc17 	ldw	r4,-16(fp)
  80fa20:	080f4740 	call	80f474 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80fa24:	e0bffc17 	ldw	r2,-16(fp)
  80fa28:	10800843 	ldbu	r2,33(r2)
  80fa2c:	10803fcc 	andi	r2,r2,255
  80fa30:	10801428 	cmpgeui	r2,r2,80
  80fa34:	10000d1e 	bne	r2,zero,80fa6c <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  80fa38:	e0bffc17 	ldw	r2,-16(fp)
  80fa3c:	10800883 	ldbu	r2,34(r2)
  80fa40:	10c03fcc 	andi	r3,r2,255
  80fa44:	e0bffc17 	ldw	r2,-16(fp)
  80fa48:	10800843 	ldbu	r2,33(r2)
  80fa4c:	10803fcc 	andi	r2,r2,255
  80fa50:	e13ffc17 	ldw	r4,-16(fp)
  80fa54:	18c018e4 	muli	r3,r3,99
  80fa58:	20c7883a 	add	r3,r4,r3
  80fa5c:	1885883a 	add	r2,r3,r2
  80fa60:	10801004 	addi	r2,r2,64
  80fa64:	e0fff903 	ldbu	r3,-28(fp)
  80fa68:	10c00005 	stb	r3,0(r2)

      sp->x++;
  80fa6c:	e0bffc17 	ldw	r2,-16(fp)
  80fa70:	10800843 	ldbu	r2,33(r2)
  80fa74:	10800044 	addi	r2,r2,1
  80fa78:	1007883a 	mov	r3,r2
  80fa7c:	e0bffc17 	ldw	r2,-16(fp)
  80fa80:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  80fa84:	e0bffd17 	ldw	r2,-12(fp)
  80fa88:	10800044 	addi	r2,r2,1
  80fa8c:	e0bffd15 	stw	r2,-12(fp)
  80fa90:	e0fffd17 	ldw	r3,-12(fp)
  80fa94:	e0bff817 	ldw	r2,-32(fp)
  80fa98:	18bf6436 	bltu	r3,r2,80f82c <__alt_mem_onchip_mem+0xff80782c>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  80fa9c:	00800404 	movi	r2,16
  80faa0:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80faa4:	e03ff515 	stw	zero,-44(fp)
  80faa8:	00003706 	br	80fb88 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80faac:	00801404 	movi	r2,80
  80fab0:	e0bff715 	stw	r2,-36(fp)
  80fab4:	00001106 	br	80fafc <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  80fab8:	e0bff717 	ldw	r2,-36(fp)
  80fabc:	10bfffc4 	addi	r2,r2,-1
  80fac0:	e13ffc17 	ldw	r4,-16(fp)
  80fac4:	e0fff517 	ldw	r3,-44(fp)
  80fac8:	18c018e4 	muli	r3,r3,99
  80facc:	20c7883a 	add	r3,r4,r3
  80fad0:	1885883a 	add	r2,r3,r2
  80fad4:	10801004 	addi	r2,r2,64
  80fad8:	10800003 	ldbu	r2,0(r2)
  80fadc:	10803fcc 	andi	r2,r2,255
  80fae0:	1080201c 	xori	r2,r2,128
  80fae4:	10bfe004 	addi	r2,r2,-128
  80fae8:	10800820 	cmpeqi	r2,r2,32
  80faec:	10000626 	beq	r2,zero,80fb08 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80faf0:	e0bff717 	ldw	r2,-36(fp)
  80faf4:	10bfffc4 	addi	r2,r2,-1
  80faf8:	e0bff715 	stw	r2,-36(fp)
  80fafc:	e0bff717 	ldw	r2,-36(fp)
  80fb00:	00bfed16 	blt	zero,r2,80fab8 <__alt_mem_onchip_mem+0xff807ab8>
  80fb04:	00000106 	br	80fb0c <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  80fb08:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  80fb0c:	e0bff717 	ldw	r2,-36(fp)
  80fb10:	10800448 	cmpgei	r2,r2,17
  80fb14:	1000031e 	bne	r2,zero,80fb24 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  80fb18:	00800404 	movi	r2,16
  80fb1c:	e0bff715 	stw	r2,-36(fp)
  80fb20:	00000306 	br	80fb30 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  80fb24:	e0bff717 	ldw	r2,-36(fp)
  80fb28:	10800044 	addi	r2,r2,1
  80fb2c:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  80fb30:	e0bff717 	ldw	r2,-36(fp)
  80fb34:	1009883a 	mov	r4,r2
  80fb38:	e0fffc17 	ldw	r3,-16(fp)
  80fb3c:	e0bff517 	ldw	r2,-44(fp)
  80fb40:	108018e4 	muli	r2,r2,99
  80fb44:	1885883a 	add	r2,r3,r2
  80fb48:	10802444 	addi	r2,r2,145
  80fb4c:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  80fb50:	e0fff617 	ldw	r3,-40(fp)
  80fb54:	e0bff717 	ldw	r2,-36(fp)
  80fb58:	1880020e 	bge	r3,r2,80fb64 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  80fb5c:	e0bff717 	ldw	r2,-36(fp)
  80fb60:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  80fb64:	e0fffc17 	ldw	r3,-16(fp)
  80fb68:	e0bff517 	ldw	r2,-44(fp)
  80fb6c:	108018e4 	muli	r2,r2,99
  80fb70:	1885883a 	add	r2,r3,r2
  80fb74:	10802484 	addi	r2,r2,146
  80fb78:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80fb7c:	e0bff517 	ldw	r2,-44(fp)
  80fb80:	10800044 	addi	r2,r2,1
  80fb84:	e0bff515 	stw	r2,-44(fp)
  80fb88:	e0bff517 	ldw	r2,-44(fp)
  80fb8c:	10800090 	cmplti	r2,r2,2
  80fb90:	103fc61e 	bne	r2,zero,80faac <__alt_mem_onchip_mem+0xff807aac>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  80fb94:	e0bff617 	ldw	r2,-40(fp)
  80fb98:	10800448 	cmpgei	r2,r2,17
  80fb9c:	1000031e 	bne	r2,zero,80fbac <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  80fba0:	e0bffc17 	ldw	r2,-16(fp)
  80fba4:	10000985 	stb	zero,38(r2)
  80fba8:	00002e06 	br	80fc64 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  80fbac:	e0bff617 	ldw	r2,-40(fp)
  80fbb0:	1085883a 	add	r2,r2,r2
  80fbb4:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  80fbb8:	e0bff617 	ldw	r2,-40(fp)
  80fbbc:	1007883a 	mov	r3,r2
  80fbc0:	e0bffc17 	ldw	r2,-16(fp)
  80fbc4:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80fbc8:	e03ff515 	stw	zero,-44(fp)
  80fbcc:	00002206 	br	80fc58 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  80fbd0:	e0fffc17 	ldw	r3,-16(fp)
  80fbd4:	e0bff517 	ldw	r2,-44(fp)
  80fbd8:	108018e4 	muli	r2,r2,99
  80fbdc:	1885883a 	add	r2,r3,r2
  80fbe0:	10802444 	addi	r2,r2,145
  80fbe4:	10800003 	ldbu	r2,0(r2)
  80fbe8:	10803fcc 	andi	r2,r2,255
  80fbec:	1080201c 	xori	r2,r2,128
  80fbf0:	10bfe004 	addi	r2,r2,-128
  80fbf4:	10800450 	cmplti	r2,r2,17
  80fbf8:	1000141e 	bne	r2,zero,80fc4c <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  80fbfc:	e0fffc17 	ldw	r3,-16(fp)
  80fc00:	e0bff517 	ldw	r2,-44(fp)
  80fc04:	108018e4 	muli	r2,r2,99
  80fc08:	1885883a 	add	r2,r3,r2
  80fc0c:	10802444 	addi	r2,r2,145
  80fc10:	10800003 	ldbu	r2,0(r2)
  80fc14:	10803fcc 	andi	r2,r2,255
  80fc18:	1080201c 	xori	r2,r2,128
  80fc1c:	10bfe004 	addi	r2,r2,-128
  80fc20:	1004923a 	slli	r2,r2,8
  80fc24:	e17ff617 	ldw	r5,-40(fp)
  80fc28:	1009883a 	mov	r4,r2
  80fc2c:	080b0280 	call	80b028 <__divsi3>
  80fc30:	1009883a 	mov	r4,r2
  80fc34:	e0fffc17 	ldw	r3,-16(fp)
  80fc38:	e0bff517 	ldw	r2,-44(fp)
  80fc3c:	108018e4 	muli	r2,r2,99
  80fc40:	1885883a 	add	r2,r3,r2
  80fc44:	10802484 	addi	r2,r2,146
  80fc48:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80fc4c:	e0bff517 	ldw	r2,-44(fp)
  80fc50:	10800044 	addi	r2,r2,1
  80fc54:	e0bff515 	stw	r2,-44(fp)
  80fc58:	e0bff517 	ldw	r2,-44(fp)
  80fc5c:	10800090 	cmplti	r2,r2,2
  80fc60:	103fdb1e 	bne	r2,zero,80fbd0 <__alt_mem_onchip_mem+0xff807bd0>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  80fc64:	e0bffc17 	ldw	r2,-16(fp)
  80fc68:	10800943 	ldbu	r2,37(r2)
  80fc6c:	10803fcc 	andi	r2,r2,255
  80fc70:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  80fc74:	e13ffc17 	ldw	r4,-16(fp)
  80fc78:	080f2880 	call	80f288 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  80fc7c:	e0bffc17 	ldw	r2,-16(fp)
  80fc80:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  80fc84:	e0bffc17 	ldw	r2,-16(fp)
  80fc88:	10800943 	ldbu	r2,37(r2)
  80fc8c:	10c03fcc 	andi	r3,r2,255
  80fc90:	e0bffb17 	ldw	r2,-20(fp)
  80fc94:	18800426 	beq	r3,r2,80fca8 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  80fc98:	e0bffc17 	ldw	r2,-16(fp)
  80fc9c:	00c00044 	movi	r3,1
  80fca0:	10c009c5 	stb	r3,39(r2)
  }
  80fca4:	003fef06 	br	80fc64 <__alt_mem_onchip_mem+0xff807c64>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  80fca8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  80fcac:	e0bffe17 	ldw	r2,-8(fp)
}
  80fcb0:	e037883a 	mov	sp,fp
  80fcb4:	dfc00117 	ldw	ra,4(sp)
  80fcb8:	df000017 	ldw	fp,0(sp)
  80fcbc:	dec00204 	addi	sp,sp,8
  80fcc0:	f800283a 	ret

0080fcc4 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  80fcc4:	defffc04 	addi	sp,sp,-16
  80fcc8:	dfc00315 	stw	ra,12(sp)
  80fccc:	df000215 	stw	fp,8(sp)
  80fcd0:	df000204 	addi	fp,sp,8
  80fcd4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  80fcd8:	e0bfff17 	ldw	r2,-4(fp)
  80fcdc:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  80fce0:	e0bffe17 	ldw	r2,-8(fp)
  80fce4:	10800943 	ldbu	r2,37(r2)
  80fce8:	10803fcc 	andi	r2,r2,255
  80fcec:	10c00044 	addi	r3,r2,1
  80fcf0:	e0bffe17 	ldw	r2,-8(fp)
  80fcf4:	10800983 	ldbu	r2,38(r2)
  80fcf8:	10803fcc 	andi	r2,r2,255
  80fcfc:	18800316 	blt	r3,r2,80fd0c <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  80fd00:	e0bffe17 	ldw	r2,-8(fp)
  80fd04:	10000945 	stb	zero,37(r2)
  80fd08:	00000606 	br	80fd24 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  80fd0c:	e0bffe17 	ldw	r2,-8(fp)
  80fd10:	10800943 	ldbu	r2,37(r2)
  80fd14:	10800044 	addi	r2,r2,1
  80fd18:	1007883a 	mov	r3,r2
  80fd1c:	e0bffe17 	ldw	r2,-8(fp)
  80fd20:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  80fd24:	e0bffe17 	ldw	r2,-8(fp)
  80fd28:	10800983 	ldbu	r2,38(r2)
  80fd2c:	10803fcc 	andi	r2,r2,255
  80fd30:	10000826 	beq	r2,zero,80fd54 <alt_lcd_16207_timeout+0x90>
  80fd34:	e0bffe17 	ldw	r2,-8(fp)
  80fd38:	108009c3 	ldbu	r2,39(r2)
  80fd3c:	10803fcc 	andi	r2,r2,255
  80fd40:	1080201c 	xori	r2,r2,128
  80fd44:	10bfe004 	addi	r2,r2,-128
  80fd48:	1000021e 	bne	r2,zero,80fd54 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  80fd4c:	e13ffe17 	ldw	r4,-8(fp)
  80fd50:	080f2880 	call	80f288 <lcd_repaint_screen>

  return sp->period;
  80fd54:	e0bffe17 	ldw	r2,-8(fp)
  80fd58:	10800717 	ldw	r2,28(r2)
}
  80fd5c:	e037883a 	mov	sp,fp
  80fd60:	dfc00117 	ldw	ra,4(sp)
  80fd64:	df000017 	ldw	fp,0(sp)
  80fd68:	dec00204 	addi	sp,sp,8
  80fd6c:	f800283a 	ret

0080fd70 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  80fd70:	defffc04 	addi	sp,sp,-16
  80fd74:	dfc00315 	stw	ra,12(sp)
  80fd78:	df000215 	stw	fp,8(sp)
  80fd7c:	df000204 	addi	fp,sp,8
  80fd80:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  80fd84:	e0bfff17 	ldw	r2,-4(fp)
  80fd88:	10800017 	ldw	r2,0(r2)
  80fd8c:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  80fd90:	e0bfff17 	ldw	r2,-4(fp)
  80fd94:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  80fd98:	010ea604 	movi	r4,15000
  80fd9c:	08113d80 	call	8113d8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80fda0:	e0bffe17 	ldw	r2,-8(fp)
  80fda4:	00c00c04 	movi	r3,48
  80fda8:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  80fdac:	01040104 	movi	r4,4100
  80fdb0:	08113d80 	call	8113d8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80fdb4:	e0bffe17 	ldw	r2,-8(fp)
  80fdb8:	00c00c04 	movi	r3,48
  80fdbc:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  80fdc0:	0100fa04 	movi	r4,1000
  80fdc4:	08113d80 	call	8113d8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80fdc8:	e0bffe17 	ldw	r2,-8(fp)
  80fdcc:	00c00c04 	movi	r3,48
  80fdd0:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  80fdd4:	01400e04 	movi	r5,56
  80fdd8:	e13fff17 	ldw	r4,-4(fp)
  80fddc:	080f0280 	call	80f028 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  80fde0:	01400204 	movi	r5,8
  80fde4:	e13fff17 	ldw	r4,-4(fp)
  80fde8:	080f0280 	call	80f028 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  80fdec:	e13fff17 	ldw	r4,-4(fp)
  80fdf0:	080f1b80 	call	80f1b8 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  80fdf4:	01400184 	movi	r5,6
  80fdf8:	e13fff17 	ldw	r4,-4(fp)
  80fdfc:	080f0280 	call	80f028 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  80fe00:	01400304 	movi	r5,12
  80fe04:	e13fff17 	ldw	r4,-4(fp)
  80fe08:	080f0280 	call	80f028 <lcd_write_command>

  sp->esccount = -1;
  80fe0c:	e0bfff17 	ldw	r2,-4(fp)
  80fe10:	00ffffc4 	movi	r3,-1
  80fe14:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  80fe18:	e0bfff17 	ldw	r2,-4(fp)
  80fe1c:	10800a04 	addi	r2,r2,40
  80fe20:	01800204 	movi	r6,8
  80fe24:	000b883a 	mov	r5,zero
  80fe28:	1009883a 	mov	r4,r2
  80fe2c:	08016b80 	call	8016b8 <memset>

  sp->scrollpos = 0;
  80fe30:	e0bfff17 	ldw	r2,-4(fp)
  80fe34:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  80fe38:	e0bfff17 	ldw	r2,-4(fp)
  80fe3c:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  80fe40:	e0bfff17 	ldw	r2,-4(fp)
  80fe44:	100009c5 	stb	zero,39(r2)
  80fe48:	d0a76417 	ldw	r2,-25200(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  80fe4c:	01400284 	movi	r5,10
  80fe50:	1009883a 	mov	r4,r2
  80fe54:	080b1200 	call	80b120 <__udivsi3>
  80fe58:	1007883a 	mov	r3,r2
  80fe5c:	e0bfff17 	ldw	r2,-4(fp)
  80fe60:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  80fe64:	e0bfff17 	ldw	r2,-4(fp)
  80fe68:	10c00104 	addi	r3,r2,4
  80fe6c:	e0bfff17 	ldw	r2,-4(fp)
  80fe70:	10800717 	ldw	r2,28(r2)
  80fe74:	e1ffff17 	ldw	r7,-4(fp)
  80fe78:	01802074 	movhi	r6,129
  80fe7c:	31bf3104 	addi	r6,r6,-828
  80fe80:	100b883a 	mov	r5,r2
  80fe84:	1809883a 	mov	r4,r3
  80fe88:	08108d00 	call	8108d0 <alt_alarm_start>
}
  80fe8c:	0001883a 	nop
  80fe90:	e037883a 	mov	sp,fp
  80fe94:	dfc00117 	ldw	ra,4(sp)
  80fe98:	df000017 	ldw	fp,0(sp)
  80fe9c:	dec00204 	addi	sp,sp,8
  80fea0:	f800283a 	ret

0080fea4 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80fea4:	defffa04 	addi	sp,sp,-24
  80fea8:	dfc00515 	stw	ra,20(sp)
  80feac:	df000415 	stw	fp,16(sp)
  80feb0:	df000404 	addi	fp,sp,16
  80feb4:	e13ffd15 	stw	r4,-12(fp)
  80feb8:	e17ffe15 	stw	r5,-8(fp)
  80febc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  80fec0:	e0bffd17 	ldw	r2,-12(fp)
  80fec4:	10800017 	ldw	r2,0(r2)
  80fec8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  80fecc:	e0bffc17 	ldw	r2,-16(fp)
  80fed0:	10c00a04 	addi	r3,r2,40
  80fed4:	e0bffd17 	ldw	r2,-12(fp)
  80fed8:	10800217 	ldw	r2,8(r2)
  80fedc:	100f883a 	mov	r7,r2
  80fee0:	e1bfff17 	ldw	r6,-4(fp)
  80fee4:	e17ffe17 	ldw	r5,-8(fp)
  80fee8:	1809883a 	mov	r4,r3
  80feec:	080f7ec0 	call	80f7ec <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  80fef0:	e037883a 	mov	sp,fp
  80fef4:	dfc00117 	ldw	ra,4(sp)
  80fef8:	df000017 	ldw	fp,0(sp)
  80fefc:	dec00204 	addi	sp,sp,8
  80ff00:	f800283a 	ret

0080ff04 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80ff04:	defffa04 	addi	sp,sp,-24
  80ff08:	dfc00515 	stw	ra,20(sp)
  80ff0c:	df000415 	stw	fp,16(sp)
  80ff10:	df000404 	addi	fp,sp,16
  80ff14:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80ff18:	0007883a 	mov	r3,zero
  80ff1c:	e0bfff17 	ldw	r2,-4(fp)
  80ff20:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80ff24:	e0bfff17 	ldw	r2,-4(fp)
  80ff28:	10800104 	addi	r2,r2,4
  80ff2c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ff30:	0005303a 	rdctl	r2,status
  80ff34:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ff38:	e0fffd17 	ldw	r3,-12(fp)
  80ff3c:	00bfff84 	movi	r2,-2
  80ff40:	1884703a 	and	r2,r3,r2
  80ff44:	1001703a 	wrctl	status,r2
  
  return context;
  80ff48:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80ff4c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  80ff50:	08112d00 	call	8112d0 <alt_tick>
  80ff54:	e0bffc17 	ldw	r2,-16(fp)
  80ff58:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ff5c:	e0bffe17 	ldw	r2,-8(fp)
  80ff60:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80ff64:	0001883a 	nop
  80ff68:	e037883a 	mov	sp,fp
  80ff6c:	dfc00117 	ldw	ra,4(sp)
  80ff70:	df000017 	ldw	fp,0(sp)
  80ff74:	dec00204 	addi	sp,sp,8
  80ff78:	f800283a 	ret

0080ff7c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80ff7c:	defff804 	addi	sp,sp,-32
  80ff80:	dfc00715 	stw	ra,28(sp)
  80ff84:	df000615 	stw	fp,24(sp)
  80ff88:	df000604 	addi	fp,sp,24
  80ff8c:	e13ffc15 	stw	r4,-16(fp)
  80ff90:	e17ffd15 	stw	r5,-12(fp)
  80ff94:	e1bffe15 	stw	r6,-8(fp)
  80ff98:	e1ffff15 	stw	r7,-4(fp)
  80ff9c:	e0bfff17 	ldw	r2,-4(fp)
  80ffa0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80ffa4:	d0a76417 	ldw	r2,-25200(gp)
  80ffa8:	1000021e 	bne	r2,zero,80ffb4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  80ffac:	e0bffb17 	ldw	r2,-20(fp)
  80ffb0:	d0a76415 	stw	r2,-25200(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80ffb4:	e0bffc17 	ldw	r2,-16(fp)
  80ffb8:	10800104 	addi	r2,r2,4
  80ffbc:	00c001c4 	movi	r3,7
  80ffc0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80ffc4:	d8000015 	stw	zero,0(sp)
  80ffc8:	e1fffc17 	ldw	r7,-16(fp)
  80ffcc:	01802074 	movhi	r6,129
  80ffd0:	31bfc104 	addi	r6,r6,-252
  80ffd4:	e17ffe17 	ldw	r5,-8(fp)
  80ffd8:	e13ffd17 	ldw	r4,-12(fp)
  80ffdc:	0810e540 	call	810e54 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  80ffe0:	0001883a 	nop
  80ffe4:	e037883a 	mov	sp,fp
  80ffe8:	dfc00117 	ldw	ra,4(sp)
  80ffec:	df000017 	ldw	fp,0(sp)
  80fff0:	dec00204 	addi	sp,sp,8
  80fff4:	f800283a 	ret

0080fff8 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80fff8:	defffa04 	addi	sp,sp,-24
  80fffc:	dfc00515 	stw	ra,20(sp)
  810000:	df000415 	stw	fp,16(sp)
  810004:	df000404 	addi	fp,sp,16
  810008:	e13ffd15 	stw	r4,-12(fp)
  81000c:	e17ffe15 	stw	r5,-8(fp)
  810010:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  810014:	e0bffd17 	ldw	r2,-12(fp)
  810018:	10800017 	ldw	r2,0(r2)
  81001c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  810020:	e0bffc17 	ldw	r2,-16(fp)
  810024:	10c00a04 	addi	r3,r2,40
  810028:	e0bffd17 	ldw	r2,-12(fp)
  81002c:	10800217 	ldw	r2,8(r2)
  810030:	100f883a 	mov	r7,r2
  810034:	e1bfff17 	ldw	r6,-4(fp)
  810038:	e17ffe17 	ldw	r5,-8(fp)
  81003c:	1809883a 	mov	r4,r3
  810040:	081050c0 	call	81050c <altera_avalon_uart_read>
      fd->fd_flags);
}
  810044:	e037883a 	mov	sp,fp
  810048:	dfc00117 	ldw	ra,4(sp)
  81004c:	df000017 	ldw	fp,0(sp)
  810050:	dec00204 	addi	sp,sp,8
  810054:	f800283a 	ret

00810058 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  810058:	defffa04 	addi	sp,sp,-24
  81005c:	dfc00515 	stw	ra,20(sp)
  810060:	df000415 	stw	fp,16(sp)
  810064:	df000404 	addi	fp,sp,16
  810068:	e13ffd15 	stw	r4,-12(fp)
  81006c:	e17ffe15 	stw	r5,-8(fp)
  810070:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  810074:	e0bffd17 	ldw	r2,-12(fp)
  810078:	10800017 	ldw	r2,0(r2)
  81007c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  810080:	e0bffc17 	ldw	r2,-16(fp)
  810084:	10c00a04 	addi	r3,r2,40
  810088:	e0bffd17 	ldw	r2,-12(fp)
  81008c:	10800217 	ldw	r2,8(r2)
  810090:	100f883a 	mov	r7,r2
  810094:	e1bfff17 	ldw	r6,-4(fp)
  810098:	e17ffe17 	ldw	r5,-8(fp)
  81009c:	1809883a 	mov	r4,r3
  8100a0:	08107240 	call	810724 <altera_avalon_uart_write>
      fd->fd_flags);
}
  8100a4:	e037883a 	mov	sp,fp
  8100a8:	dfc00117 	ldw	ra,4(sp)
  8100ac:	df000017 	ldw	fp,0(sp)
  8100b0:	dec00204 	addi	sp,sp,8
  8100b4:	f800283a 	ret

008100b8 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  8100b8:	defffc04 	addi	sp,sp,-16
  8100bc:	dfc00315 	stw	ra,12(sp)
  8100c0:	df000215 	stw	fp,8(sp)
  8100c4:	df000204 	addi	fp,sp,8
  8100c8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8100cc:	e0bfff17 	ldw	r2,-4(fp)
  8100d0:	10800017 	ldw	r2,0(r2)
  8100d4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  8100d8:	e0bffe17 	ldw	r2,-8(fp)
  8100dc:	10c00a04 	addi	r3,r2,40
  8100e0:	e0bfff17 	ldw	r2,-4(fp)
  8100e4:	10800217 	ldw	r2,8(r2)
  8100e8:	100b883a 	mov	r5,r2
  8100ec:	1809883a 	mov	r4,r3
  8100f0:	081047c0 	call	81047c <altera_avalon_uart_close>
}
  8100f4:	e037883a 	mov	sp,fp
  8100f8:	dfc00117 	ldw	ra,4(sp)
  8100fc:	df000017 	ldw	fp,0(sp)
  810100:	dec00204 	addi	sp,sp,8
  810104:	f800283a 	ret

00810108 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  810108:	defff804 	addi	sp,sp,-32
  81010c:	dfc00715 	stw	ra,28(sp)
  810110:	df000615 	stw	fp,24(sp)
  810114:	df000604 	addi	fp,sp,24
  810118:	e13ffd15 	stw	r4,-12(fp)
  81011c:	e17ffe15 	stw	r5,-8(fp)
  810120:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  810124:	e0bffd17 	ldw	r2,-12(fp)
  810128:	10800017 	ldw	r2,0(r2)
  81012c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  810130:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  810134:	1000041e 	bne	r2,zero,810148 <altera_avalon_uart_init+0x40>
  810138:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  81013c:	1000021e 	bne	r2,zero,810148 <altera_avalon_uart_init+0x40>
  810140:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  810144:	10000226 	beq	r2,zero,810150 <altera_avalon_uart_init+0x48>
  810148:	00800044 	movi	r2,1
  81014c:	00000106 	br	810154 <altera_avalon_uart_init+0x4c>
  810150:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  810154:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  810158:	e0bffc17 	ldw	r2,-16(fp)
  81015c:	10000f1e 	bne	r2,zero,81019c <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  810160:	e0bffd17 	ldw	r2,-12(fp)
  810164:	00c32004 	movi	r3,3200
  810168:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  81016c:	e0bffb17 	ldw	r2,-20(fp)
  810170:	10800304 	addi	r2,r2,12
  810174:	e0fffd17 	ldw	r3,-12(fp)
  810178:	18c00117 	ldw	r3,4(r3)
  81017c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  810180:	d8000015 	stw	zero,0(sp)
  810184:	e1fffd17 	ldw	r7,-12(fp)
  810188:	01802074 	movhi	r6,129
  81018c:	31806d04 	addi	r6,r6,436
  810190:	e17fff17 	ldw	r5,-4(fp)
  810194:	e13ffe17 	ldw	r4,-8(fp)
  810198:	0810e540 	call	810e54 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  81019c:	0001883a 	nop
  8101a0:	e037883a 	mov	sp,fp
  8101a4:	dfc00117 	ldw	ra,4(sp)
  8101a8:	df000017 	ldw	fp,0(sp)
  8101ac:	dec00204 	addi	sp,sp,8
  8101b0:	f800283a 	ret

008101b4 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  8101b4:	defffa04 	addi	sp,sp,-24
  8101b8:	dfc00515 	stw	ra,20(sp)
  8101bc:	df000415 	stw	fp,16(sp)
  8101c0:	df000404 	addi	fp,sp,16
  8101c4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  8101c8:	e0bfff17 	ldw	r2,-4(fp)
  8101cc:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  8101d0:	e0bffc17 	ldw	r2,-16(fp)
  8101d4:	10800017 	ldw	r2,0(r2)
  8101d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  8101dc:	e0bffd17 	ldw	r2,-12(fp)
  8101e0:	10800204 	addi	r2,r2,8
  8101e4:	10800037 	ldwio	r2,0(r2)
  8101e8:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  8101ec:	e0bffd17 	ldw	r2,-12(fp)
  8101f0:	10800204 	addi	r2,r2,8
  8101f4:	0007883a 	mov	r3,zero
  8101f8:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  8101fc:	e0bffd17 	ldw	r2,-12(fp)
  810200:	10800204 	addi	r2,r2,8
  810204:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  810208:	e0bffe17 	ldw	r2,-8(fp)
  81020c:	1080200c 	andi	r2,r2,128
  810210:	10000326 	beq	r2,zero,810220 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  810214:	e17ffe17 	ldw	r5,-8(fp)
  810218:	e13ffc17 	ldw	r4,-16(fp)
  81021c:	08102500 	call	810250 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  810220:	e0bffe17 	ldw	r2,-8(fp)
  810224:	1081100c 	andi	r2,r2,1088
  810228:	10000326 	beq	r2,zero,810238 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  81022c:	e17ffe17 	ldw	r5,-8(fp)
  810230:	e13ffc17 	ldw	r4,-16(fp)
  810234:	08103340 	call	810334 <altera_avalon_uart_txirq>
  }
  

}
  810238:	0001883a 	nop
  81023c:	e037883a 	mov	sp,fp
  810240:	dfc00117 	ldw	ra,4(sp)
  810244:	df000017 	ldw	fp,0(sp)
  810248:	dec00204 	addi	sp,sp,8
  81024c:	f800283a 	ret

00810250 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  810250:	defffc04 	addi	sp,sp,-16
  810254:	df000315 	stw	fp,12(sp)
  810258:	df000304 	addi	fp,sp,12
  81025c:	e13ffe15 	stw	r4,-8(fp)
  810260:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  810264:	e0bfff17 	ldw	r2,-4(fp)
  810268:	108000cc 	andi	r2,r2,3
  81026c:	10002c1e 	bne	r2,zero,810320 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  810270:	e0bffe17 	ldw	r2,-8(fp)
  810274:	10800317 	ldw	r2,12(r2)
  810278:	e0bffe17 	ldw	r2,-8(fp)
  81027c:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  810280:	e0bffe17 	ldw	r2,-8(fp)
  810284:	10800317 	ldw	r2,12(r2)
  810288:	10800044 	addi	r2,r2,1
  81028c:	10800fcc 	andi	r2,r2,63
  810290:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  810294:	e0bffe17 	ldw	r2,-8(fp)
  810298:	10800317 	ldw	r2,12(r2)
  81029c:	e0fffe17 	ldw	r3,-8(fp)
  8102a0:	18c00017 	ldw	r3,0(r3)
  8102a4:	18c00037 	ldwio	r3,0(r3)
  8102a8:	1809883a 	mov	r4,r3
  8102ac:	e0fffe17 	ldw	r3,-8(fp)
  8102b0:	1885883a 	add	r2,r3,r2
  8102b4:	10800704 	addi	r2,r2,28
  8102b8:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  8102bc:	e0bffe17 	ldw	r2,-8(fp)
  8102c0:	e0fffd17 	ldw	r3,-12(fp)
  8102c4:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8102c8:	e0bffe17 	ldw	r2,-8(fp)
  8102cc:	10800317 	ldw	r2,12(r2)
  8102d0:	10800044 	addi	r2,r2,1
  8102d4:	10800fcc 	andi	r2,r2,63
  8102d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  8102dc:	e0bffe17 	ldw	r2,-8(fp)
  8102e0:	10c00217 	ldw	r3,8(r2)
  8102e4:	e0bffd17 	ldw	r2,-12(fp)
  8102e8:	18800e1e 	bne	r3,r2,810324 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8102ec:	e0bffe17 	ldw	r2,-8(fp)
  8102f0:	10c00117 	ldw	r3,4(r2)
  8102f4:	00bfdfc4 	movi	r2,-129
  8102f8:	1886703a 	and	r3,r3,r2
  8102fc:	e0bffe17 	ldw	r2,-8(fp)
  810300:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  810304:	e0bffe17 	ldw	r2,-8(fp)
  810308:	10800017 	ldw	r2,0(r2)
  81030c:	10800304 	addi	r2,r2,12
  810310:	e0fffe17 	ldw	r3,-8(fp)
  810314:	18c00117 	ldw	r3,4(r3)
  810318:	10c00035 	stwio	r3,0(r2)
  81031c:	00000106 	br	810324 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  810320:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  810324:	e037883a 	mov	sp,fp
  810328:	df000017 	ldw	fp,0(sp)
  81032c:	dec00104 	addi	sp,sp,4
  810330:	f800283a 	ret

00810334 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  810334:	defffb04 	addi	sp,sp,-20
  810338:	df000415 	stw	fp,16(sp)
  81033c:	df000404 	addi	fp,sp,16
  810340:	e13ffc15 	stw	r4,-16(fp)
  810344:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  810348:	e0bffc17 	ldw	r2,-16(fp)
  81034c:	10c00417 	ldw	r3,16(r2)
  810350:	e0bffc17 	ldw	r2,-16(fp)
  810354:	10800517 	ldw	r2,20(r2)
  810358:	18803226 	beq	r3,r2,810424 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  81035c:	e0bffc17 	ldw	r2,-16(fp)
  810360:	10800617 	ldw	r2,24(r2)
  810364:	1080008c 	andi	r2,r2,2
  810368:	10000326 	beq	r2,zero,810378 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  81036c:	e0bffd17 	ldw	r2,-12(fp)
  810370:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  810374:	10001d26 	beq	r2,zero,8103ec <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  810378:	e0bffc17 	ldw	r2,-16(fp)
  81037c:	10800417 	ldw	r2,16(r2)
  810380:	e0bffc17 	ldw	r2,-16(fp)
  810384:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  810388:	e0bffc17 	ldw	r2,-16(fp)
  81038c:	10800017 	ldw	r2,0(r2)
  810390:	10800104 	addi	r2,r2,4
  810394:	e0fffc17 	ldw	r3,-16(fp)
  810398:	18c00417 	ldw	r3,16(r3)
  81039c:	e13ffc17 	ldw	r4,-16(fp)
  8103a0:	20c7883a 	add	r3,r4,r3
  8103a4:	18c01704 	addi	r3,r3,92
  8103a8:	18c00003 	ldbu	r3,0(r3)
  8103ac:	18c03fcc 	andi	r3,r3,255
  8103b0:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  8103b4:	e0bffc17 	ldw	r2,-16(fp)
  8103b8:	10800417 	ldw	r2,16(r2)
  8103bc:	10800044 	addi	r2,r2,1
  8103c0:	e0fffc17 	ldw	r3,-16(fp)
  8103c4:	18800415 	stw	r2,16(r3)
  8103c8:	10c00fcc 	andi	r3,r2,63
  8103cc:	e0bffc17 	ldw	r2,-16(fp)
  8103d0:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  8103d4:	e0bffc17 	ldw	r2,-16(fp)
  8103d8:	10800117 	ldw	r2,4(r2)
  8103dc:	10c01014 	ori	r3,r2,64
  8103e0:	e0bffc17 	ldw	r2,-16(fp)
  8103e4:	10c00115 	stw	r3,4(r2)
  8103e8:	00000e06 	br	810424 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  8103ec:	e0bffc17 	ldw	r2,-16(fp)
  8103f0:	10800017 	ldw	r2,0(r2)
  8103f4:	10800204 	addi	r2,r2,8
  8103f8:	10800037 	ldwio	r2,0(r2)
  8103fc:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  810400:	e0bffd17 	ldw	r2,-12(fp)
  810404:	1082000c 	andi	r2,r2,2048
  810408:	1000061e 	bne	r2,zero,810424 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  81040c:	e0bffc17 	ldw	r2,-16(fp)
  810410:	10c00117 	ldw	r3,4(r2)
  810414:	00bfefc4 	movi	r2,-65
  810418:	1886703a 	and	r3,r3,r2
  81041c:	e0bffc17 	ldw	r2,-16(fp)
  810420:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  810424:	e0bffc17 	ldw	r2,-16(fp)
  810428:	10c00417 	ldw	r3,16(r2)
  81042c:	e0bffc17 	ldw	r2,-16(fp)
  810430:	10800517 	ldw	r2,20(r2)
  810434:	1880061e 	bne	r3,r2,810450 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  810438:	e0bffc17 	ldw	r2,-16(fp)
  81043c:	10c00117 	ldw	r3,4(r2)
  810440:	00beefc4 	movi	r2,-1089
  810444:	1886703a 	and	r3,r3,r2
  810448:	e0bffc17 	ldw	r2,-16(fp)
  81044c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  810450:	e0bffc17 	ldw	r2,-16(fp)
  810454:	10800017 	ldw	r2,0(r2)
  810458:	10800304 	addi	r2,r2,12
  81045c:	e0fffc17 	ldw	r3,-16(fp)
  810460:	18c00117 	ldw	r3,4(r3)
  810464:	10c00035 	stwio	r3,0(r2)
}
  810468:	0001883a 	nop
  81046c:	e037883a 	mov	sp,fp
  810470:	df000017 	ldw	fp,0(sp)
  810474:	dec00104 	addi	sp,sp,4
  810478:	f800283a 	ret

0081047c <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  81047c:	defffd04 	addi	sp,sp,-12
  810480:	df000215 	stw	fp,8(sp)
  810484:	df000204 	addi	fp,sp,8
  810488:	e13ffe15 	stw	r4,-8(fp)
  81048c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  810490:	00000506 	br	8104a8 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  810494:	e0bfff17 	ldw	r2,-4(fp)
  810498:	1090000c 	andi	r2,r2,16384
  81049c:	10000226 	beq	r2,zero,8104a8 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  8104a0:	00bffd44 	movi	r2,-11
  8104a4:	00000606 	br	8104c0 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  8104a8:	e0bffe17 	ldw	r2,-8(fp)
  8104ac:	10c00417 	ldw	r3,16(r2)
  8104b0:	e0bffe17 	ldw	r2,-8(fp)
  8104b4:	10800517 	ldw	r2,20(r2)
  8104b8:	18bff61e 	bne	r3,r2,810494 <__alt_mem_onchip_mem+0xff808494>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  8104bc:	0005883a 	mov	r2,zero
}
  8104c0:	e037883a 	mov	sp,fp
  8104c4:	df000017 	ldw	fp,0(sp)
  8104c8:	dec00104 	addi	sp,sp,4
  8104cc:	f800283a 	ret

008104d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8104d0:	defffe04 	addi	sp,sp,-8
  8104d4:	dfc00115 	stw	ra,4(sp)
  8104d8:	df000015 	stw	fp,0(sp)
  8104dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8104e0:	d0a00b17 	ldw	r2,-32724(gp)
  8104e4:	10000326 	beq	r2,zero,8104f4 <alt_get_errno+0x24>
  8104e8:	d0a00b17 	ldw	r2,-32724(gp)
  8104ec:	103ee83a 	callr	r2
  8104f0:	00000106 	br	8104f8 <alt_get_errno+0x28>
  8104f4:	d0a75904 	addi	r2,gp,-25244
}
  8104f8:	e037883a 	mov	sp,fp
  8104fc:	dfc00117 	ldw	ra,4(sp)
  810500:	df000017 	ldw	fp,0(sp)
  810504:	dec00204 	addi	sp,sp,8
  810508:	f800283a 	ret

0081050c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  81050c:	defff204 	addi	sp,sp,-56
  810510:	dfc00d15 	stw	ra,52(sp)
  810514:	df000c15 	stw	fp,48(sp)
  810518:	df000c04 	addi	fp,sp,48
  81051c:	e13ffc15 	stw	r4,-16(fp)
  810520:	e17ffd15 	stw	r5,-12(fp)
  810524:	e1bffe15 	stw	r6,-8(fp)
  810528:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  81052c:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  810530:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  810534:	e0bfff17 	ldw	r2,-4(fp)
  810538:	1090000c 	andi	r2,r2,16384
  81053c:	1005003a 	cmpeq	r2,r2,zero
  810540:	10803fcc 	andi	r2,r2,255
  810544:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  810548:	00001306 	br	810598 <altera_avalon_uart_read+0x8c>
    {
      count++;
  81054c:	e0bff517 	ldw	r2,-44(fp)
  810550:	10800044 	addi	r2,r2,1
  810554:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  810558:	e0bffd17 	ldw	r2,-12(fp)
  81055c:	10c00044 	addi	r3,r2,1
  810560:	e0fffd15 	stw	r3,-12(fp)
  810564:	e0fffc17 	ldw	r3,-16(fp)
  810568:	18c00217 	ldw	r3,8(r3)
  81056c:	e13ffc17 	ldw	r4,-16(fp)
  810570:	20c7883a 	add	r3,r4,r3
  810574:	18c00704 	addi	r3,r3,28
  810578:	18c00003 	ldbu	r3,0(r3)
  81057c:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  810580:	e0bffc17 	ldw	r2,-16(fp)
  810584:	10800217 	ldw	r2,8(r2)
  810588:	10800044 	addi	r2,r2,1
  81058c:	10c00fcc 	andi	r3,r2,63
  810590:	e0bffc17 	ldw	r2,-16(fp)
  810594:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  810598:	e0fff517 	ldw	r3,-44(fp)
  81059c:	e0bffe17 	ldw	r2,-8(fp)
  8105a0:	1880050e 	bge	r3,r2,8105b8 <altera_avalon_uart_read+0xac>
  8105a4:	e0bffc17 	ldw	r2,-16(fp)
  8105a8:	10c00217 	ldw	r3,8(r2)
  8105ac:	e0bffc17 	ldw	r2,-16(fp)
  8105b0:	10800317 	ldw	r2,12(r2)
  8105b4:	18bfe51e 	bne	r3,r2,81054c <__alt_mem_onchip_mem+0xff80854c>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  8105b8:	e0bff517 	ldw	r2,-44(fp)
  8105bc:	1000251e 	bne	r2,zero,810654 <altera_avalon_uart_read+0x148>
  8105c0:	e0bffc17 	ldw	r2,-16(fp)
  8105c4:	10c00217 	ldw	r3,8(r2)
  8105c8:	e0bffc17 	ldw	r2,-16(fp)
  8105cc:	10800317 	ldw	r2,12(r2)
  8105d0:	1880201e 	bne	r3,r2,810654 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  8105d4:	e0bff617 	ldw	r2,-40(fp)
  8105d8:	1000071e 	bne	r2,zero,8105f8 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  8105dc:	08104d00 	call	8104d0 <alt_get_errno>
  8105e0:	1007883a 	mov	r3,r2
  8105e4:	008002c4 	movi	r2,11
  8105e8:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  8105ec:	00800044 	movi	r2,1
  8105f0:	e0bff405 	stb	r2,-48(fp)
        break;
  8105f4:	00001b06 	br	810664 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8105f8:	0005303a 	rdctl	r2,status
  8105fc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810600:	e0fff917 	ldw	r3,-28(fp)
  810604:	00bfff84 	movi	r2,-2
  810608:	1884703a 	and	r2,r3,r2
  81060c:	1001703a 	wrctl	status,r2
  
  return context;
  810610:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  810614:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  810618:	e0bffc17 	ldw	r2,-16(fp)
  81061c:	10800117 	ldw	r2,4(r2)
  810620:	10c02014 	ori	r3,r2,128
  810624:	e0bffc17 	ldw	r2,-16(fp)
  810628:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  81062c:	e0bffc17 	ldw	r2,-16(fp)
  810630:	10800017 	ldw	r2,0(r2)
  810634:	10800304 	addi	r2,r2,12
  810638:	e0fffc17 	ldw	r3,-16(fp)
  81063c:	18c00117 	ldw	r3,4(r3)
  810640:	10c00035 	stwio	r3,0(r2)
  810644:	e0bff817 	ldw	r2,-32(fp)
  810648:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81064c:	e0bffa17 	ldw	r2,-24(fp)
  810650:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  810654:	e0bff517 	ldw	r2,-44(fp)
  810658:	1000021e 	bne	r2,zero,810664 <altera_avalon_uart_read+0x158>
  81065c:	e0bffe17 	ldw	r2,-8(fp)
  810660:	103fcd1e 	bne	r2,zero,810598 <__alt_mem_onchip_mem+0xff808598>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810664:	0005303a 	rdctl	r2,status
  810668:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81066c:	e0fffb17 	ldw	r3,-20(fp)
  810670:	00bfff84 	movi	r2,-2
  810674:	1884703a 	and	r2,r3,r2
  810678:	1001703a 	wrctl	status,r2
  
  return context;
  81067c:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  810680:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  810684:	e0bffc17 	ldw	r2,-16(fp)
  810688:	10800117 	ldw	r2,4(r2)
  81068c:	10c02014 	ori	r3,r2,128
  810690:	e0bffc17 	ldw	r2,-16(fp)
  810694:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  810698:	e0bffc17 	ldw	r2,-16(fp)
  81069c:	10800017 	ldw	r2,0(r2)
  8106a0:	10800304 	addi	r2,r2,12
  8106a4:	e0fffc17 	ldw	r3,-16(fp)
  8106a8:	18c00117 	ldw	r3,4(r3)
  8106ac:	10c00035 	stwio	r3,0(r2)
  8106b0:	e0bff817 	ldw	r2,-32(fp)
  8106b4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8106b8:	e0bff717 	ldw	r2,-36(fp)
  8106bc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  8106c0:	e0bff403 	ldbu	r2,-48(fp)
  8106c4:	10000226 	beq	r2,zero,8106d0 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  8106c8:	00bffd44 	movi	r2,-11
  8106cc:	00000106 	br	8106d4 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  8106d0:	e0bff517 	ldw	r2,-44(fp)
  }
}
  8106d4:	e037883a 	mov	sp,fp
  8106d8:	dfc00117 	ldw	ra,4(sp)
  8106dc:	df000017 	ldw	fp,0(sp)
  8106e0:	dec00204 	addi	sp,sp,8
  8106e4:	f800283a 	ret

008106e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8106e8:	defffe04 	addi	sp,sp,-8
  8106ec:	dfc00115 	stw	ra,4(sp)
  8106f0:	df000015 	stw	fp,0(sp)
  8106f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8106f8:	d0a00b17 	ldw	r2,-32724(gp)
  8106fc:	10000326 	beq	r2,zero,81070c <alt_get_errno+0x24>
  810700:	d0a00b17 	ldw	r2,-32724(gp)
  810704:	103ee83a 	callr	r2
  810708:	00000106 	br	810710 <alt_get_errno+0x28>
  81070c:	d0a75904 	addi	r2,gp,-25244
}
  810710:	e037883a 	mov	sp,fp
  810714:	dfc00117 	ldw	ra,4(sp)
  810718:	df000017 	ldw	fp,0(sp)
  81071c:	dec00204 	addi	sp,sp,8
  810720:	f800283a 	ret

00810724 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  810724:	defff204 	addi	sp,sp,-56
  810728:	dfc00d15 	stw	ra,52(sp)
  81072c:	df000c15 	stw	fp,48(sp)
  810730:	df000c04 	addi	fp,sp,48
  810734:	e13ffc15 	stw	r4,-16(fp)
  810738:	e17ffd15 	stw	r5,-12(fp)
  81073c:	e1bffe15 	stw	r6,-8(fp)
  810740:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  810744:	e0bffe17 	ldw	r2,-8(fp)
  810748:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  81074c:	e0bfff17 	ldw	r2,-4(fp)
  810750:	1090000c 	andi	r2,r2,16384
  810754:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  810758:	00003c06 	br	81084c <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  81075c:	e0bffc17 	ldw	r2,-16(fp)
  810760:	10800517 	ldw	r2,20(r2)
  810764:	10800044 	addi	r2,r2,1
  810768:	10800fcc 	andi	r2,r2,63
  81076c:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  810770:	e0bffc17 	ldw	r2,-16(fp)
  810774:	10c00417 	ldw	r3,16(r2)
  810778:	e0bff717 	ldw	r2,-36(fp)
  81077c:	1880221e 	bne	r3,r2,810808 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  810780:	e0bff517 	ldw	r2,-44(fp)
  810784:	10000526 	beq	r2,zero,81079c <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  810788:	08106e80 	call	8106e8 <alt_get_errno>
  81078c:	1007883a 	mov	r3,r2
  810790:	008002c4 	movi	r2,11
  810794:	18800015 	stw	r2,0(r3)
        break;
  810798:	00002e06 	br	810854 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81079c:	0005303a 	rdctl	r2,status
  8107a0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8107a4:	e0fff917 	ldw	r3,-28(fp)
  8107a8:	00bfff84 	movi	r2,-2
  8107ac:	1884703a 	and	r2,r3,r2
  8107b0:	1001703a 	wrctl	status,r2
  
  return context;
  8107b4:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  8107b8:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8107bc:	e0bffc17 	ldw	r2,-16(fp)
  8107c0:	10800117 	ldw	r2,4(r2)
  8107c4:	10c11014 	ori	r3,r2,1088
  8107c8:	e0bffc17 	ldw	r2,-16(fp)
  8107cc:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8107d0:	e0bffc17 	ldw	r2,-16(fp)
  8107d4:	10800017 	ldw	r2,0(r2)
  8107d8:	10800304 	addi	r2,r2,12
  8107dc:	e0fffc17 	ldw	r3,-16(fp)
  8107e0:	18c00117 	ldw	r3,4(r3)
  8107e4:	10c00035 	stwio	r3,0(r2)
  8107e8:	e0bff817 	ldw	r2,-32(fp)
  8107ec:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8107f0:	e0bff617 	ldw	r2,-40(fp)
  8107f4:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  8107f8:	e0bffc17 	ldw	r2,-16(fp)
  8107fc:	10c00417 	ldw	r3,16(r2)
  810800:	e0bff717 	ldw	r2,-36(fp)
  810804:	18bffc26 	beq	r3,r2,8107f8 <__alt_mem_onchip_mem+0xff8087f8>
      }
    }

    count--;
  810808:	e0bff417 	ldw	r2,-48(fp)
  81080c:	10bfffc4 	addi	r2,r2,-1
  810810:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  810814:	e0bffc17 	ldw	r2,-16(fp)
  810818:	10c00517 	ldw	r3,20(r2)
  81081c:	e0bffd17 	ldw	r2,-12(fp)
  810820:	11000044 	addi	r4,r2,1
  810824:	e13ffd15 	stw	r4,-12(fp)
  810828:	10800003 	ldbu	r2,0(r2)
  81082c:	1009883a 	mov	r4,r2
  810830:	e0bffc17 	ldw	r2,-16(fp)
  810834:	10c5883a 	add	r2,r2,r3
  810838:	10801704 	addi	r2,r2,92
  81083c:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  810840:	e0bffc17 	ldw	r2,-16(fp)
  810844:	e0fff717 	ldw	r3,-36(fp)
  810848:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  81084c:	e0bff417 	ldw	r2,-48(fp)
  810850:	103fc21e 	bne	r2,zero,81075c <__alt_mem_onchip_mem+0xff80875c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810854:	0005303a 	rdctl	r2,status
  810858:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81085c:	e0fffb17 	ldw	r3,-20(fp)
  810860:	00bfff84 	movi	r2,-2
  810864:	1884703a 	and	r2,r3,r2
  810868:	1001703a 	wrctl	status,r2
  
  return context;
  81086c:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  810870:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  810874:	e0bffc17 	ldw	r2,-16(fp)
  810878:	10800117 	ldw	r2,4(r2)
  81087c:	10c11014 	ori	r3,r2,1088
  810880:	e0bffc17 	ldw	r2,-16(fp)
  810884:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  810888:	e0bffc17 	ldw	r2,-16(fp)
  81088c:	10800017 	ldw	r2,0(r2)
  810890:	10800304 	addi	r2,r2,12
  810894:	e0fffc17 	ldw	r3,-16(fp)
  810898:	18c00117 	ldw	r3,4(r3)
  81089c:	10c00035 	stwio	r3,0(r2)
  8108a0:	e0bff817 	ldw	r2,-32(fp)
  8108a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8108a8:	e0bffa17 	ldw	r2,-24(fp)
  8108ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  8108b0:	e0fffe17 	ldw	r3,-8(fp)
  8108b4:	e0bff417 	ldw	r2,-48(fp)
  8108b8:	1885c83a 	sub	r2,r3,r2
}
  8108bc:	e037883a 	mov	sp,fp
  8108c0:	dfc00117 	ldw	ra,4(sp)
  8108c4:	df000017 	ldw	fp,0(sp)
  8108c8:	dec00204 	addi	sp,sp,8
  8108cc:	f800283a 	ret

008108d0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  8108d0:	defff504 	addi	sp,sp,-44
  8108d4:	df000a15 	stw	fp,40(sp)
  8108d8:	df000a04 	addi	fp,sp,40
  8108dc:	e13ffc15 	stw	r4,-16(fp)
  8108e0:	e17ffd15 	stw	r5,-12(fp)
  8108e4:	e1bffe15 	stw	r6,-8(fp)
  8108e8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  8108ec:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8108f0:	d0a76417 	ldw	r2,-25200(gp)
  
  if (alt_ticks_per_second ())
  8108f4:	10003c26 	beq	r2,zero,8109e8 <alt_alarm_start+0x118>
  {
    if (alarm)
  8108f8:	e0bffc17 	ldw	r2,-16(fp)
  8108fc:	10003826 	beq	r2,zero,8109e0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  810900:	e0bffc17 	ldw	r2,-16(fp)
  810904:	e0fffe17 	ldw	r3,-8(fp)
  810908:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  81090c:	e0bffc17 	ldw	r2,-16(fp)
  810910:	e0ffff17 	ldw	r3,-4(fp)
  810914:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810918:	0005303a 	rdctl	r2,status
  81091c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810920:	e0fff917 	ldw	r3,-28(fp)
  810924:	00bfff84 	movi	r2,-2
  810928:	1884703a 	and	r2,r3,r2
  81092c:	1001703a 	wrctl	status,r2
  
  return context;
  810930:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  810934:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  810938:	d0a76517 	ldw	r2,-25196(gp)
      
      current_nticks = alt_nticks();
  81093c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  810940:	e0fffd17 	ldw	r3,-12(fp)
  810944:	e0bff617 	ldw	r2,-40(fp)
  810948:	1885883a 	add	r2,r3,r2
  81094c:	10c00044 	addi	r3,r2,1
  810950:	e0bffc17 	ldw	r2,-16(fp)
  810954:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  810958:	e0bffc17 	ldw	r2,-16(fp)
  81095c:	10c00217 	ldw	r3,8(r2)
  810960:	e0bff617 	ldw	r2,-40(fp)
  810964:	1880042e 	bgeu	r3,r2,810978 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  810968:	e0bffc17 	ldw	r2,-16(fp)
  81096c:	00c00044 	movi	r3,1
  810970:	10c00405 	stb	r3,16(r2)
  810974:	00000206 	br	810980 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  810978:	e0bffc17 	ldw	r2,-16(fp)
  81097c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  810980:	e0bffc17 	ldw	r2,-16(fp)
  810984:	d0e00f04 	addi	r3,gp,-32708
  810988:	e0fffa15 	stw	r3,-24(fp)
  81098c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  810990:	e0bffb17 	ldw	r2,-20(fp)
  810994:	e0fffa17 	ldw	r3,-24(fp)
  810998:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  81099c:	e0bffa17 	ldw	r2,-24(fp)
  8109a0:	10c00017 	ldw	r3,0(r2)
  8109a4:	e0bffb17 	ldw	r2,-20(fp)
  8109a8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8109ac:	e0bffa17 	ldw	r2,-24(fp)
  8109b0:	10800017 	ldw	r2,0(r2)
  8109b4:	e0fffb17 	ldw	r3,-20(fp)
  8109b8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  8109bc:	e0bffa17 	ldw	r2,-24(fp)
  8109c0:	e0fffb17 	ldw	r3,-20(fp)
  8109c4:	10c00015 	stw	r3,0(r2)
  8109c8:	e0bff817 	ldw	r2,-32(fp)
  8109cc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8109d0:	e0bff717 	ldw	r2,-36(fp)
  8109d4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  8109d8:	0005883a 	mov	r2,zero
  8109dc:	00000306 	br	8109ec <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  8109e0:	00bffa84 	movi	r2,-22
  8109e4:	00000106 	br	8109ec <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  8109e8:	00bfde84 	movi	r2,-134
  }
}
  8109ec:	e037883a 	mov	sp,fp
  8109f0:	df000017 	ldw	fp,0(sp)
  8109f4:	dec00104 	addi	sp,sp,4
  8109f8:	f800283a 	ret

008109fc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  8109fc:	defffe04 	addi	sp,sp,-8
  810a00:	df000115 	stw	fp,4(sp)
  810a04:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  810a08:	e03fff15 	stw	zero,-4(fp)
  810a0c:	00000506 	br	810a24 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  810a10:	e0bfff17 	ldw	r2,-4(fp)
  810a14:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  810a18:	e0bfff17 	ldw	r2,-4(fp)
  810a1c:	10800804 	addi	r2,r2,32
  810a20:	e0bfff15 	stw	r2,-4(fp)
  810a24:	e0bfff17 	ldw	r2,-4(fp)
  810a28:	10820030 	cmpltui	r2,r2,2048
  810a2c:	103ff81e 	bne	r2,zero,810a10 <__alt_mem_onchip_mem+0xff808a10>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  810a30:	0001883a 	nop
  810a34:	e037883a 	mov	sp,fp
  810a38:	df000017 	ldw	fp,0(sp)
  810a3c:	dec00104 	addi	sp,sp,4
  810a40:	f800283a 	ret

00810a44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810a44:	defffe04 	addi	sp,sp,-8
  810a48:	dfc00115 	stw	ra,4(sp)
  810a4c:	df000015 	stw	fp,0(sp)
  810a50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810a54:	d0a00b17 	ldw	r2,-32724(gp)
  810a58:	10000326 	beq	r2,zero,810a68 <alt_get_errno+0x24>
  810a5c:	d0a00b17 	ldw	r2,-32724(gp)
  810a60:	103ee83a 	callr	r2
  810a64:	00000106 	br	810a6c <alt_get_errno+0x28>
  810a68:	d0a75904 	addi	r2,gp,-25244
}
  810a6c:	e037883a 	mov	sp,fp
  810a70:	dfc00117 	ldw	ra,4(sp)
  810a74:	df000017 	ldw	fp,0(sp)
  810a78:	dec00204 	addi	sp,sp,8
  810a7c:	f800283a 	ret

00810a80 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  810a80:	defffa04 	addi	sp,sp,-24
  810a84:	dfc00515 	stw	ra,20(sp)
  810a88:	df000415 	stw	fp,16(sp)
  810a8c:	df000404 	addi	fp,sp,16
  810a90:	e13ffe15 	stw	r4,-8(fp)
  810a94:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  810a98:	e0bffe17 	ldw	r2,-8(fp)
  810a9c:	10000326 	beq	r2,zero,810aac <alt_dev_llist_insert+0x2c>
  810aa0:	e0bffe17 	ldw	r2,-8(fp)
  810aa4:	10800217 	ldw	r2,8(r2)
  810aa8:	1000061e 	bne	r2,zero,810ac4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  810aac:	0810a440 	call	810a44 <alt_get_errno>
  810ab0:	1007883a 	mov	r3,r2
  810ab4:	00800584 	movi	r2,22
  810ab8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  810abc:	00bffa84 	movi	r2,-22
  810ac0:	00001306 	br	810b10 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  810ac4:	e0bffe17 	ldw	r2,-8(fp)
  810ac8:	e0ffff17 	ldw	r3,-4(fp)
  810acc:	e0fffc15 	stw	r3,-16(fp)
  810ad0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  810ad4:	e0bffd17 	ldw	r2,-12(fp)
  810ad8:	e0fffc17 	ldw	r3,-16(fp)
  810adc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  810ae0:	e0bffc17 	ldw	r2,-16(fp)
  810ae4:	10c00017 	ldw	r3,0(r2)
  810ae8:	e0bffd17 	ldw	r2,-12(fp)
  810aec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  810af0:	e0bffc17 	ldw	r2,-16(fp)
  810af4:	10800017 	ldw	r2,0(r2)
  810af8:	e0fffd17 	ldw	r3,-12(fp)
  810afc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  810b00:	e0bffc17 	ldw	r2,-16(fp)
  810b04:	e0fffd17 	ldw	r3,-12(fp)
  810b08:	10c00015 	stw	r3,0(r2)

  return 0;  
  810b0c:	0005883a 	mov	r2,zero
}
  810b10:	e037883a 	mov	sp,fp
  810b14:	dfc00117 	ldw	ra,4(sp)
  810b18:	df000017 	ldw	fp,0(sp)
  810b1c:	dec00204 	addi	sp,sp,8
  810b20:	f800283a 	ret

00810b24 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  810b24:	defffd04 	addi	sp,sp,-12
  810b28:	dfc00215 	stw	ra,8(sp)
  810b2c:	df000115 	stw	fp,4(sp)
  810b30:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  810b34:	00802074 	movhi	r2,129
  810b38:	10869004 	addi	r2,r2,6720
  810b3c:	e0bfff15 	stw	r2,-4(fp)
  810b40:	00000606 	br	810b5c <_do_ctors+0x38>
        (*ctor) (); 
  810b44:	e0bfff17 	ldw	r2,-4(fp)
  810b48:	10800017 	ldw	r2,0(r2)
  810b4c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  810b50:	e0bfff17 	ldw	r2,-4(fp)
  810b54:	10bfff04 	addi	r2,r2,-4
  810b58:	e0bfff15 	stw	r2,-4(fp)
  810b5c:	e0ffff17 	ldw	r3,-4(fp)
  810b60:	00802074 	movhi	r2,129
  810b64:	10869104 	addi	r2,r2,6724
  810b68:	18bff62e 	bgeu	r3,r2,810b44 <__alt_mem_onchip_mem+0xff808b44>
        (*ctor) (); 
}
  810b6c:	0001883a 	nop
  810b70:	e037883a 	mov	sp,fp
  810b74:	dfc00117 	ldw	ra,4(sp)
  810b78:	df000017 	ldw	fp,0(sp)
  810b7c:	dec00204 	addi	sp,sp,8
  810b80:	f800283a 	ret

00810b84 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  810b84:	defffd04 	addi	sp,sp,-12
  810b88:	dfc00215 	stw	ra,8(sp)
  810b8c:	df000115 	stw	fp,4(sp)
  810b90:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  810b94:	00802074 	movhi	r2,129
  810b98:	10869004 	addi	r2,r2,6720
  810b9c:	e0bfff15 	stw	r2,-4(fp)
  810ba0:	00000606 	br	810bbc <_do_dtors+0x38>
        (*dtor) (); 
  810ba4:	e0bfff17 	ldw	r2,-4(fp)
  810ba8:	10800017 	ldw	r2,0(r2)
  810bac:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  810bb0:	e0bfff17 	ldw	r2,-4(fp)
  810bb4:	10bfff04 	addi	r2,r2,-4
  810bb8:	e0bfff15 	stw	r2,-4(fp)
  810bbc:	e0ffff17 	ldw	r3,-4(fp)
  810bc0:	00802074 	movhi	r2,129
  810bc4:	10869104 	addi	r2,r2,6724
  810bc8:	18bff62e 	bgeu	r3,r2,810ba4 <__alt_mem_onchip_mem+0xff808ba4>
        (*dtor) (); 
}
  810bcc:	0001883a 	nop
  810bd0:	e037883a 	mov	sp,fp
  810bd4:	dfc00117 	ldw	ra,4(sp)
  810bd8:	df000017 	ldw	fp,0(sp)
  810bdc:	dec00204 	addi	sp,sp,8
  810be0:	f800283a 	ret

00810be4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  810be4:	defffa04 	addi	sp,sp,-24
  810be8:	dfc00515 	stw	ra,20(sp)
  810bec:	df000415 	stw	fp,16(sp)
  810bf0:	df000404 	addi	fp,sp,16
  810bf4:	e13ffe15 	stw	r4,-8(fp)
  810bf8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  810bfc:	e0bfff17 	ldw	r2,-4(fp)
  810c00:	10800017 	ldw	r2,0(r2)
  810c04:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  810c08:	e13ffe17 	ldw	r4,-8(fp)
  810c0c:	0801c940 	call	801c94 <strlen>
  810c10:	10800044 	addi	r2,r2,1
  810c14:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  810c18:	00000d06 	br	810c50 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  810c1c:	e0bffc17 	ldw	r2,-16(fp)
  810c20:	10800217 	ldw	r2,8(r2)
  810c24:	e0fffd17 	ldw	r3,-12(fp)
  810c28:	180d883a 	mov	r6,r3
  810c2c:	e17ffe17 	ldw	r5,-8(fp)
  810c30:	1009883a 	mov	r4,r2
  810c34:	08116fc0 	call	8116fc <memcmp>
  810c38:	1000021e 	bne	r2,zero,810c44 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  810c3c:	e0bffc17 	ldw	r2,-16(fp)
  810c40:	00000706 	br	810c60 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  810c44:	e0bffc17 	ldw	r2,-16(fp)
  810c48:	10800017 	ldw	r2,0(r2)
  810c4c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  810c50:	e0fffc17 	ldw	r3,-16(fp)
  810c54:	e0bfff17 	ldw	r2,-4(fp)
  810c58:	18bff01e 	bne	r3,r2,810c1c <__alt_mem_onchip_mem+0xff808c1c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  810c5c:	0005883a 	mov	r2,zero
}
  810c60:	e037883a 	mov	sp,fp
  810c64:	dfc00117 	ldw	ra,4(sp)
  810c68:	df000017 	ldw	fp,0(sp)
  810c6c:	dec00204 	addi	sp,sp,8
  810c70:	f800283a 	ret

00810c74 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  810c74:	defffb04 	addi	sp,sp,-20
  810c78:	dfc00415 	stw	ra,16(sp)
  810c7c:	df000315 	stw	fp,12(sp)
  810c80:	df000304 	addi	fp,sp,12
  810c84:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  810c88:	d0a00617 	ldw	r2,-32744(gp)
  810c8c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  810c90:	00003106 	br	810d58 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  810c94:	e0bffd17 	ldw	r2,-12(fp)
  810c98:	10800217 	ldw	r2,8(r2)
  810c9c:	1009883a 	mov	r4,r2
  810ca0:	0801c940 	call	801c94 <strlen>
  810ca4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  810ca8:	e0bffd17 	ldw	r2,-12(fp)
  810cac:	10c00217 	ldw	r3,8(r2)
  810cb0:	e0bffe17 	ldw	r2,-8(fp)
  810cb4:	10bfffc4 	addi	r2,r2,-1
  810cb8:	1885883a 	add	r2,r3,r2
  810cbc:	10800003 	ldbu	r2,0(r2)
  810cc0:	10803fcc 	andi	r2,r2,255
  810cc4:	1080201c 	xori	r2,r2,128
  810cc8:	10bfe004 	addi	r2,r2,-128
  810ccc:	10800bd8 	cmpnei	r2,r2,47
  810cd0:	1000031e 	bne	r2,zero,810ce0 <alt_find_file+0x6c>
    {
      len -= 1;
  810cd4:	e0bffe17 	ldw	r2,-8(fp)
  810cd8:	10bfffc4 	addi	r2,r2,-1
  810cdc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  810ce0:	e0bffe17 	ldw	r2,-8(fp)
  810ce4:	e0ffff17 	ldw	r3,-4(fp)
  810ce8:	1885883a 	add	r2,r3,r2
  810cec:	10800003 	ldbu	r2,0(r2)
  810cf0:	10803fcc 	andi	r2,r2,255
  810cf4:	1080201c 	xori	r2,r2,128
  810cf8:	10bfe004 	addi	r2,r2,-128
  810cfc:	10800be0 	cmpeqi	r2,r2,47
  810d00:	1000081e 	bne	r2,zero,810d24 <alt_find_file+0xb0>
  810d04:	e0bffe17 	ldw	r2,-8(fp)
  810d08:	e0ffff17 	ldw	r3,-4(fp)
  810d0c:	1885883a 	add	r2,r3,r2
  810d10:	10800003 	ldbu	r2,0(r2)
  810d14:	10803fcc 	andi	r2,r2,255
  810d18:	1080201c 	xori	r2,r2,128
  810d1c:	10bfe004 	addi	r2,r2,-128
  810d20:	10000a1e 	bne	r2,zero,810d4c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  810d24:	e0bffd17 	ldw	r2,-12(fp)
  810d28:	10800217 	ldw	r2,8(r2)
  810d2c:	e0fffe17 	ldw	r3,-8(fp)
  810d30:	180d883a 	mov	r6,r3
  810d34:	e17fff17 	ldw	r5,-4(fp)
  810d38:	1009883a 	mov	r4,r2
  810d3c:	08116fc0 	call	8116fc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  810d40:	1000021e 	bne	r2,zero,810d4c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  810d44:	e0bffd17 	ldw	r2,-12(fp)
  810d48:	00000706 	br	810d68 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  810d4c:	e0bffd17 	ldw	r2,-12(fp)
  810d50:	10800017 	ldw	r2,0(r2)
  810d54:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  810d58:	e0fffd17 	ldw	r3,-12(fp)
  810d5c:	d0a00604 	addi	r2,gp,-32744
  810d60:	18bfcc1e 	bne	r3,r2,810c94 <__alt_mem_onchip_mem+0xff808c94>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  810d64:	0005883a 	mov	r2,zero
}
  810d68:	e037883a 	mov	sp,fp
  810d6c:	dfc00117 	ldw	ra,4(sp)
  810d70:	df000017 	ldw	fp,0(sp)
  810d74:	dec00204 	addi	sp,sp,8
  810d78:	f800283a 	ret

00810d7c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  810d7c:	defffc04 	addi	sp,sp,-16
  810d80:	df000315 	stw	fp,12(sp)
  810d84:	df000304 	addi	fp,sp,12
  810d88:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  810d8c:	00bffa04 	movi	r2,-24
  810d90:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  810d94:	e03ffd15 	stw	zero,-12(fp)
  810d98:	00001906 	br	810e00 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  810d9c:	00802074 	movhi	r2,129
  810da0:	108a4604 	addi	r2,r2,10520
  810da4:	e0fffd17 	ldw	r3,-12(fp)
  810da8:	18c00324 	muli	r3,r3,12
  810dac:	10c5883a 	add	r2,r2,r3
  810db0:	10800017 	ldw	r2,0(r2)
  810db4:	10000f1e 	bne	r2,zero,810df4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  810db8:	00802074 	movhi	r2,129
  810dbc:	108a4604 	addi	r2,r2,10520
  810dc0:	e0fffd17 	ldw	r3,-12(fp)
  810dc4:	18c00324 	muli	r3,r3,12
  810dc8:	10c5883a 	add	r2,r2,r3
  810dcc:	e0ffff17 	ldw	r3,-4(fp)
  810dd0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  810dd4:	d0e00a17 	ldw	r3,-32728(gp)
  810dd8:	e0bffd17 	ldw	r2,-12(fp)
  810ddc:	1880020e 	bge	r3,r2,810de8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  810de0:	e0bffd17 	ldw	r2,-12(fp)
  810de4:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
  810de8:	e0bffd17 	ldw	r2,-12(fp)
  810dec:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  810df0:	00000606 	br	810e0c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  810df4:	e0bffd17 	ldw	r2,-12(fp)
  810df8:	10800044 	addi	r2,r2,1
  810dfc:	e0bffd15 	stw	r2,-12(fp)
  810e00:	e0bffd17 	ldw	r2,-12(fp)
  810e04:	10800810 	cmplti	r2,r2,32
  810e08:	103fe41e 	bne	r2,zero,810d9c <__alt_mem_onchip_mem+0xff808d9c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  810e0c:	e0bffe17 	ldw	r2,-8(fp)
}
  810e10:	e037883a 	mov	sp,fp
  810e14:	df000017 	ldw	fp,0(sp)
  810e18:	dec00104 	addi	sp,sp,4
  810e1c:	f800283a 	ret

00810e20 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  810e20:	defffe04 	addi	sp,sp,-8
  810e24:	dfc00115 	stw	ra,4(sp)
  810e28:	df000015 	stw	fp,0(sp)
  810e2c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  810e30:	01440004 	movi	r5,4096
  810e34:	0009883a 	mov	r4,zero
  810e38:	08115840 	call	811584 <alt_icache_flush>
#endif
}
  810e3c:	0001883a 	nop
  810e40:	e037883a 	mov	sp,fp
  810e44:	dfc00117 	ldw	ra,4(sp)
  810e48:	df000017 	ldw	fp,0(sp)
  810e4c:	dec00204 	addi	sp,sp,8
  810e50:	f800283a 	ret

00810e54 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  810e54:	defff904 	addi	sp,sp,-28
  810e58:	dfc00615 	stw	ra,24(sp)
  810e5c:	df000515 	stw	fp,20(sp)
  810e60:	df000504 	addi	fp,sp,20
  810e64:	e13ffc15 	stw	r4,-16(fp)
  810e68:	e17ffd15 	stw	r5,-12(fp)
  810e6c:	e1bffe15 	stw	r6,-8(fp)
  810e70:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  810e74:	e0800217 	ldw	r2,8(fp)
  810e78:	d8800015 	stw	r2,0(sp)
  810e7c:	e1ffff17 	ldw	r7,-4(fp)
  810e80:	e1bffe17 	ldw	r6,-8(fp)
  810e84:	e17ffd17 	ldw	r5,-12(fp)
  810e88:	e13ffc17 	ldw	r4,-16(fp)
  810e8c:	08110040 	call	811004 <alt_iic_isr_register>
}  
  810e90:	e037883a 	mov	sp,fp
  810e94:	dfc00117 	ldw	ra,4(sp)
  810e98:	df000017 	ldw	fp,0(sp)
  810e9c:	dec00204 	addi	sp,sp,8
  810ea0:	f800283a 	ret

00810ea4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  810ea4:	defff904 	addi	sp,sp,-28
  810ea8:	df000615 	stw	fp,24(sp)
  810eac:	df000604 	addi	fp,sp,24
  810eb0:	e13ffe15 	stw	r4,-8(fp)
  810eb4:	e17fff15 	stw	r5,-4(fp)
  810eb8:	e0bfff17 	ldw	r2,-4(fp)
  810ebc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810ec0:	0005303a 	rdctl	r2,status
  810ec4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810ec8:	e0fffb17 	ldw	r3,-20(fp)
  810ecc:	00bfff84 	movi	r2,-2
  810ed0:	1884703a 	and	r2,r3,r2
  810ed4:	1001703a 	wrctl	status,r2
  
  return context;
  810ed8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  810edc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  810ee0:	00c00044 	movi	r3,1
  810ee4:	e0bffa17 	ldw	r2,-24(fp)
  810ee8:	1884983a 	sll	r2,r3,r2
  810eec:	1007883a 	mov	r3,r2
  810ef0:	d0a76317 	ldw	r2,-25204(gp)
  810ef4:	1884b03a 	or	r2,r3,r2
  810ef8:	d0a76315 	stw	r2,-25204(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  810efc:	d0a76317 	ldw	r2,-25204(gp)
  810f00:	100170fa 	wrctl	ienable,r2
  810f04:	e0bffc17 	ldw	r2,-16(fp)
  810f08:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810f0c:	e0bffd17 	ldw	r2,-12(fp)
  810f10:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  810f14:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  810f18:	0001883a 	nop
}
  810f1c:	e037883a 	mov	sp,fp
  810f20:	df000017 	ldw	fp,0(sp)
  810f24:	dec00104 	addi	sp,sp,4
  810f28:	f800283a 	ret

00810f2c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  810f2c:	defff904 	addi	sp,sp,-28
  810f30:	df000615 	stw	fp,24(sp)
  810f34:	df000604 	addi	fp,sp,24
  810f38:	e13ffe15 	stw	r4,-8(fp)
  810f3c:	e17fff15 	stw	r5,-4(fp)
  810f40:	e0bfff17 	ldw	r2,-4(fp)
  810f44:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810f48:	0005303a 	rdctl	r2,status
  810f4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810f50:	e0fffb17 	ldw	r3,-20(fp)
  810f54:	00bfff84 	movi	r2,-2
  810f58:	1884703a 	and	r2,r3,r2
  810f5c:	1001703a 	wrctl	status,r2
  
  return context;
  810f60:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  810f64:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  810f68:	00c00044 	movi	r3,1
  810f6c:	e0bffa17 	ldw	r2,-24(fp)
  810f70:	1884983a 	sll	r2,r3,r2
  810f74:	0084303a 	nor	r2,zero,r2
  810f78:	1007883a 	mov	r3,r2
  810f7c:	d0a76317 	ldw	r2,-25204(gp)
  810f80:	1884703a 	and	r2,r3,r2
  810f84:	d0a76315 	stw	r2,-25204(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  810f88:	d0a76317 	ldw	r2,-25204(gp)
  810f8c:	100170fa 	wrctl	ienable,r2
  810f90:	e0bffc17 	ldw	r2,-16(fp)
  810f94:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810f98:	e0bffd17 	ldw	r2,-12(fp)
  810f9c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  810fa0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  810fa4:	0001883a 	nop
}
  810fa8:	e037883a 	mov	sp,fp
  810fac:	df000017 	ldw	fp,0(sp)
  810fb0:	dec00104 	addi	sp,sp,4
  810fb4:	f800283a 	ret

00810fb8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  810fb8:	defffc04 	addi	sp,sp,-16
  810fbc:	df000315 	stw	fp,12(sp)
  810fc0:	df000304 	addi	fp,sp,12
  810fc4:	e13ffe15 	stw	r4,-8(fp)
  810fc8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  810fcc:	000530fa 	rdctl	r2,ienable
  810fd0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  810fd4:	00c00044 	movi	r3,1
  810fd8:	e0bfff17 	ldw	r2,-4(fp)
  810fdc:	1884983a 	sll	r2,r3,r2
  810fe0:	1007883a 	mov	r3,r2
  810fe4:	e0bffd17 	ldw	r2,-12(fp)
  810fe8:	1884703a 	and	r2,r3,r2
  810fec:	1004c03a 	cmpne	r2,r2,zero
  810ff0:	10803fcc 	andi	r2,r2,255
}
  810ff4:	e037883a 	mov	sp,fp
  810ff8:	df000017 	ldw	fp,0(sp)
  810ffc:	dec00104 	addi	sp,sp,4
  811000:	f800283a 	ret

00811004 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  811004:	defff504 	addi	sp,sp,-44
  811008:	dfc00a15 	stw	ra,40(sp)
  81100c:	df000915 	stw	fp,36(sp)
  811010:	df000904 	addi	fp,sp,36
  811014:	e13ffc15 	stw	r4,-16(fp)
  811018:	e17ffd15 	stw	r5,-12(fp)
  81101c:	e1bffe15 	stw	r6,-8(fp)
  811020:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  811024:	00bffa84 	movi	r2,-22
  811028:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  81102c:	e0bffd17 	ldw	r2,-12(fp)
  811030:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  811034:	e0bff817 	ldw	r2,-32(fp)
  811038:	10800808 	cmpgei	r2,r2,32
  81103c:	1000271e 	bne	r2,zero,8110dc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811040:	0005303a 	rdctl	r2,status
  811044:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811048:	e0fffb17 	ldw	r3,-20(fp)
  81104c:	00bfff84 	movi	r2,-2
  811050:	1884703a 	and	r2,r3,r2
  811054:	1001703a 	wrctl	status,r2
  
  return context;
  811058:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  81105c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  811060:	00802074 	movhi	r2,129
  811064:	1096b904 	addi	r2,r2,23268
  811068:	e0fff817 	ldw	r3,-32(fp)
  81106c:	180690fa 	slli	r3,r3,3
  811070:	10c5883a 	add	r2,r2,r3
  811074:	e0fffe17 	ldw	r3,-8(fp)
  811078:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  81107c:	00802074 	movhi	r2,129
  811080:	1096b904 	addi	r2,r2,23268
  811084:	e0fff817 	ldw	r3,-32(fp)
  811088:	180690fa 	slli	r3,r3,3
  81108c:	10c5883a 	add	r2,r2,r3
  811090:	10800104 	addi	r2,r2,4
  811094:	e0ffff17 	ldw	r3,-4(fp)
  811098:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  81109c:	e0bffe17 	ldw	r2,-8(fp)
  8110a0:	10000526 	beq	r2,zero,8110b8 <alt_iic_isr_register+0xb4>
  8110a4:	e0bff817 	ldw	r2,-32(fp)
  8110a8:	100b883a 	mov	r5,r2
  8110ac:	e13ffc17 	ldw	r4,-16(fp)
  8110b0:	0810ea40 	call	810ea4 <alt_ic_irq_enable>
  8110b4:	00000406 	br	8110c8 <alt_iic_isr_register+0xc4>
  8110b8:	e0bff817 	ldw	r2,-32(fp)
  8110bc:	100b883a 	mov	r5,r2
  8110c0:	e13ffc17 	ldw	r4,-16(fp)
  8110c4:	0810f2c0 	call	810f2c <alt_ic_irq_disable>
  8110c8:	e0bff715 	stw	r2,-36(fp)
  8110cc:	e0bffa17 	ldw	r2,-24(fp)
  8110d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8110d4:	e0bff917 	ldw	r2,-28(fp)
  8110d8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8110dc:	e0bff717 	ldw	r2,-36(fp)
}
  8110e0:	e037883a 	mov	sp,fp
  8110e4:	dfc00117 	ldw	ra,4(sp)
  8110e8:	df000017 	ldw	fp,0(sp)
  8110ec:	dec00204 	addi	sp,sp,8
  8110f0:	f800283a 	ret

008110f4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8110f4:	defff904 	addi	sp,sp,-28
  8110f8:	dfc00615 	stw	ra,24(sp)
  8110fc:	df000515 	stw	fp,20(sp)
  811100:	df000504 	addi	fp,sp,20
  811104:	e13ffc15 	stw	r4,-16(fp)
  811108:	e17ffd15 	stw	r5,-12(fp)
  81110c:	e1bffe15 	stw	r6,-8(fp)
  811110:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  811114:	e1bfff17 	ldw	r6,-4(fp)
  811118:	e17ffe17 	ldw	r5,-8(fp)
  81111c:	e13ffd17 	ldw	r4,-12(fp)
  811120:	080df080 	call	80df08 <open>
  811124:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  811128:	e0bffb17 	ldw	r2,-20(fp)
  81112c:	10001c16 	blt	r2,zero,8111a0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  811130:	00802074 	movhi	r2,129
  811134:	108a4604 	addi	r2,r2,10520
  811138:	e0fffb17 	ldw	r3,-20(fp)
  81113c:	18c00324 	muli	r3,r3,12
  811140:	10c5883a 	add	r2,r2,r3
  811144:	10c00017 	ldw	r3,0(r2)
  811148:	e0bffc17 	ldw	r2,-16(fp)
  81114c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  811150:	00802074 	movhi	r2,129
  811154:	108a4604 	addi	r2,r2,10520
  811158:	e0fffb17 	ldw	r3,-20(fp)
  81115c:	18c00324 	muli	r3,r3,12
  811160:	10c5883a 	add	r2,r2,r3
  811164:	10800104 	addi	r2,r2,4
  811168:	10c00017 	ldw	r3,0(r2)
  81116c:	e0bffc17 	ldw	r2,-16(fp)
  811170:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  811174:	00802074 	movhi	r2,129
  811178:	108a4604 	addi	r2,r2,10520
  81117c:	e0fffb17 	ldw	r3,-20(fp)
  811180:	18c00324 	muli	r3,r3,12
  811184:	10c5883a 	add	r2,r2,r3
  811188:	10800204 	addi	r2,r2,8
  81118c:	10c00017 	ldw	r3,0(r2)
  811190:	e0bffc17 	ldw	r2,-16(fp)
  811194:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  811198:	e13ffb17 	ldw	r4,-20(fp)
  81119c:	080e1940 	call	80e194 <alt_release_fd>
  }
} 
  8111a0:	0001883a 	nop
  8111a4:	e037883a 	mov	sp,fp
  8111a8:	dfc00117 	ldw	ra,4(sp)
  8111ac:	df000017 	ldw	fp,0(sp)
  8111b0:	dec00204 	addi	sp,sp,8
  8111b4:	f800283a 	ret

008111b8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8111b8:	defffb04 	addi	sp,sp,-20
  8111bc:	dfc00415 	stw	ra,16(sp)
  8111c0:	df000315 	stw	fp,12(sp)
  8111c4:	df000304 	addi	fp,sp,12
  8111c8:	e13ffd15 	stw	r4,-12(fp)
  8111cc:	e17ffe15 	stw	r5,-8(fp)
  8111d0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8111d4:	01c07fc4 	movi	r7,511
  8111d8:	01800044 	movi	r6,1
  8111dc:	e17ffd17 	ldw	r5,-12(fp)
  8111e0:	01002074 	movhi	r4,129
  8111e4:	210a4904 	addi	r4,r4,10532
  8111e8:	08110f40 	call	8110f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8111ec:	01c07fc4 	movi	r7,511
  8111f0:	000d883a 	mov	r6,zero
  8111f4:	e17ffe17 	ldw	r5,-8(fp)
  8111f8:	01002074 	movhi	r4,129
  8111fc:	210a4604 	addi	r4,r4,10520
  811200:	08110f40 	call	8110f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  811204:	01c07fc4 	movi	r7,511
  811208:	01800044 	movi	r6,1
  81120c:	e17fff17 	ldw	r5,-4(fp)
  811210:	01002074 	movhi	r4,129
  811214:	210a4c04 	addi	r4,r4,10544
  811218:	08110f40 	call	8110f4 <alt_open_fd>
}  
  81121c:	0001883a 	nop
  811220:	e037883a 	mov	sp,fp
  811224:	dfc00117 	ldw	ra,4(sp)
  811228:	df000017 	ldw	fp,0(sp)
  81122c:	dec00204 	addi	sp,sp,8
  811230:	f800283a 	ret

00811234 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  811234:	defffa04 	addi	sp,sp,-24
  811238:	df000515 	stw	fp,20(sp)
  81123c:	df000504 	addi	fp,sp,20
  811240:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811244:	0005303a 	rdctl	r2,status
  811248:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81124c:	e0fffc17 	ldw	r3,-16(fp)
  811250:	00bfff84 	movi	r2,-2
  811254:	1884703a 	and	r2,r3,r2
  811258:	1001703a 	wrctl	status,r2
  
  return context;
  81125c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  811260:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  811264:	e0bfff17 	ldw	r2,-4(fp)
  811268:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  81126c:	e0bffd17 	ldw	r2,-12(fp)
  811270:	10800017 	ldw	r2,0(r2)
  811274:	e0fffd17 	ldw	r3,-12(fp)
  811278:	18c00117 	ldw	r3,4(r3)
  81127c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  811280:	e0bffd17 	ldw	r2,-12(fp)
  811284:	10800117 	ldw	r2,4(r2)
  811288:	e0fffd17 	ldw	r3,-12(fp)
  81128c:	18c00017 	ldw	r3,0(r3)
  811290:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  811294:	e0bffd17 	ldw	r2,-12(fp)
  811298:	e0fffd17 	ldw	r3,-12(fp)
  81129c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  8112a0:	e0bffd17 	ldw	r2,-12(fp)
  8112a4:	e0fffd17 	ldw	r3,-12(fp)
  8112a8:	10c00015 	stw	r3,0(r2)
  8112ac:	e0bffb17 	ldw	r2,-20(fp)
  8112b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8112b4:	e0bffe17 	ldw	r2,-8(fp)
  8112b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  8112bc:	0001883a 	nop
  8112c0:	e037883a 	mov	sp,fp
  8112c4:	df000017 	ldw	fp,0(sp)
  8112c8:	dec00104 	addi	sp,sp,4
  8112cc:	f800283a 	ret

008112d0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8112d0:	defffb04 	addi	sp,sp,-20
  8112d4:	dfc00415 	stw	ra,16(sp)
  8112d8:	df000315 	stw	fp,12(sp)
  8112dc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  8112e0:	d0a00f17 	ldw	r2,-32708(gp)
  8112e4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  8112e8:	d0a76517 	ldw	r2,-25196(gp)
  8112ec:	10800044 	addi	r2,r2,1
  8112f0:	d0a76515 	stw	r2,-25196(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8112f4:	00002e06 	br	8113b0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  8112f8:	e0bffd17 	ldw	r2,-12(fp)
  8112fc:	10800017 	ldw	r2,0(r2)
  811300:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  811304:	e0bffd17 	ldw	r2,-12(fp)
  811308:	10800403 	ldbu	r2,16(r2)
  81130c:	10803fcc 	andi	r2,r2,255
  811310:	10000426 	beq	r2,zero,811324 <alt_tick+0x54>
  811314:	d0a76517 	ldw	r2,-25196(gp)
  811318:	1000021e 	bne	r2,zero,811324 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  81131c:	e0bffd17 	ldw	r2,-12(fp)
  811320:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  811324:	e0bffd17 	ldw	r2,-12(fp)
  811328:	10800217 	ldw	r2,8(r2)
  81132c:	d0e76517 	ldw	r3,-25196(gp)
  811330:	18801d36 	bltu	r3,r2,8113a8 <alt_tick+0xd8>
  811334:	e0bffd17 	ldw	r2,-12(fp)
  811338:	10800403 	ldbu	r2,16(r2)
  81133c:	10803fcc 	andi	r2,r2,255
  811340:	1000191e 	bne	r2,zero,8113a8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  811344:	e0bffd17 	ldw	r2,-12(fp)
  811348:	10800317 	ldw	r2,12(r2)
  81134c:	e0fffd17 	ldw	r3,-12(fp)
  811350:	18c00517 	ldw	r3,20(r3)
  811354:	1809883a 	mov	r4,r3
  811358:	103ee83a 	callr	r2
  81135c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  811360:	e0bfff17 	ldw	r2,-4(fp)
  811364:	1000031e 	bne	r2,zero,811374 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  811368:	e13ffd17 	ldw	r4,-12(fp)
  81136c:	08112340 	call	811234 <alt_alarm_stop>
  811370:	00000d06 	br	8113a8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  811374:	e0bffd17 	ldw	r2,-12(fp)
  811378:	10c00217 	ldw	r3,8(r2)
  81137c:	e0bfff17 	ldw	r2,-4(fp)
  811380:	1887883a 	add	r3,r3,r2
  811384:	e0bffd17 	ldw	r2,-12(fp)
  811388:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  81138c:	e0bffd17 	ldw	r2,-12(fp)
  811390:	10c00217 	ldw	r3,8(r2)
  811394:	d0a76517 	ldw	r2,-25196(gp)
  811398:	1880032e 	bgeu	r3,r2,8113a8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  81139c:	e0bffd17 	ldw	r2,-12(fp)
  8113a0:	00c00044 	movi	r3,1
  8113a4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  8113a8:	e0bffe17 	ldw	r2,-8(fp)
  8113ac:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8113b0:	e0fffd17 	ldw	r3,-12(fp)
  8113b4:	d0a00f04 	addi	r2,gp,-32708
  8113b8:	18bfcf1e 	bne	r3,r2,8112f8 <__alt_mem_onchip_mem+0xff8092f8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  8113bc:	0001883a 	nop
}
  8113c0:	0001883a 	nop
  8113c4:	e037883a 	mov	sp,fp
  8113c8:	dfc00117 	ldw	ra,4(sp)
  8113cc:	df000017 	ldw	fp,0(sp)
  8113d0:	dec00204 	addi	sp,sp,8
  8113d4:	f800283a 	ret

008113d8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  8113d8:	defffd04 	addi	sp,sp,-12
  8113dc:	dfc00215 	stw	ra,8(sp)
  8113e0:	df000115 	stw	fp,4(sp)
  8113e4:	df000104 	addi	fp,sp,4
  8113e8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  8113ec:	e13fff17 	ldw	r4,-4(fp)
  8113f0:	081142c0 	call	81142c <alt_busy_sleep>
}
  8113f4:	e037883a 	mov	sp,fp
  8113f8:	dfc00117 	ldw	ra,4(sp)
  8113fc:	df000017 	ldw	fp,0(sp)
  811400:	dec00204 	addi	sp,sp,8
  811404:	f800283a 	ret

00811408 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  811408:	deffff04 	addi	sp,sp,-4
  81140c:	df000015 	stw	fp,0(sp)
  811410:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  811414:	000170fa 	wrctl	ienable,zero
}
  811418:	0001883a 	nop
  81141c:	e037883a 	mov	sp,fp
  811420:	df000017 	ldw	fp,0(sp)
  811424:	dec00104 	addi	sp,sp,4
  811428:	f800283a 	ret

0081142c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  81142c:	defffa04 	addi	sp,sp,-24
  811430:	dfc00515 	stw	ra,20(sp)
  811434:	df000415 	stw	fp,16(sp)
  811438:	df000404 	addi	fp,sp,16
  81143c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  811440:	008000c4 	movi	r2,3
  811444:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  811448:	e0fffd17 	ldw	r3,-12(fp)
  81144c:	008003f4 	movhi	r2,15
  811450:	10909004 	addi	r2,r2,16960
  811454:	1885383a 	mul	r2,r3,r2
  811458:	100b883a 	mov	r5,r2
  81145c:	0100bef4 	movhi	r4,763
  811460:	213c2004 	addi	r4,r4,-3968
  811464:	080b1200 	call	80b120 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  811468:	100b883a 	mov	r5,r2
  81146c:	01200034 	movhi	r4,32768
  811470:	213fffc4 	addi	r4,r4,-1
  811474:	080b1200 	call	80b120 <__udivsi3>
  811478:	100b883a 	mov	r5,r2
  81147c:	e13fff17 	ldw	r4,-4(fp)
  811480:	080b1200 	call	80b120 <__udivsi3>
  811484:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  811488:	e0bffe17 	ldw	r2,-8(fp)
  81148c:	10002a26 	beq	r2,zero,811538 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  811490:	e03ffc15 	stw	zero,-16(fp)
  811494:	00001706 	br	8114f4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  811498:	00a00034 	movhi	r2,32768
  81149c:	10bfffc4 	addi	r2,r2,-1
  8114a0:	10bfffc4 	addi	r2,r2,-1
  8114a4:	103ffe1e 	bne	r2,zero,8114a0 <__alt_mem_onchip_mem+0xff8094a0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  8114a8:	e0fffd17 	ldw	r3,-12(fp)
  8114ac:	008003f4 	movhi	r2,15
  8114b0:	10909004 	addi	r2,r2,16960
  8114b4:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  8114b8:	100b883a 	mov	r5,r2
  8114bc:	0100bef4 	movhi	r4,763
  8114c0:	213c2004 	addi	r4,r4,-3968
  8114c4:	080b1200 	call	80b120 <__udivsi3>
  8114c8:	100b883a 	mov	r5,r2
  8114cc:	01200034 	movhi	r4,32768
  8114d0:	213fffc4 	addi	r4,r4,-1
  8114d4:	080b1200 	call	80b120 <__udivsi3>
  8114d8:	1007883a 	mov	r3,r2
  8114dc:	e0bfff17 	ldw	r2,-4(fp)
  8114e0:	10c5c83a 	sub	r2,r2,r3
  8114e4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  8114e8:	e0bffc17 	ldw	r2,-16(fp)
  8114ec:	10800044 	addi	r2,r2,1
  8114f0:	e0bffc15 	stw	r2,-16(fp)
  8114f4:	e0fffc17 	ldw	r3,-16(fp)
  8114f8:	e0bffe17 	ldw	r2,-8(fp)
  8114fc:	18bfe616 	blt	r3,r2,811498 <__alt_mem_onchip_mem+0xff809498>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  811500:	e0fffd17 	ldw	r3,-12(fp)
  811504:	008003f4 	movhi	r2,15
  811508:	10909004 	addi	r2,r2,16960
  81150c:	1885383a 	mul	r2,r3,r2
  811510:	100b883a 	mov	r5,r2
  811514:	0100bef4 	movhi	r4,763
  811518:	213c2004 	addi	r4,r4,-3968
  81151c:	080b1200 	call	80b120 <__udivsi3>
  811520:	1007883a 	mov	r3,r2
  811524:	e0bfff17 	ldw	r2,-4(fp)
  811528:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  81152c:	10bfffc4 	addi	r2,r2,-1
  811530:	103ffe1e 	bne	r2,zero,81152c <__alt_mem_onchip_mem+0xff80952c>
  811534:	00000d06 	br	81156c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  811538:	e0fffd17 	ldw	r3,-12(fp)
  81153c:	008003f4 	movhi	r2,15
  811540:	10909004 	addi	r2,r2,16960
  811544:	1885383a 	mul	r2,r3,r2
  811548:	100b883a 	mov	r5,r2
  81154c:	0100bef4 	movhi	r4,763
  811550:	213c2004 	addi	r4,r4,-3968
  811554:	080b1200 	call	80b120 <__udivsi3>
  811558:	1007883a 	mov	r3,r2
  81155c:	e0bfff17 	ldw	r2,-4(fp)
  811560:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  811564:	10bfffc4 	addi	r2,r2,-1
  811568:	00bffe16 	blt	zero,r2,811564 <__alt_mem_onchip_mem+0xff809564>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  81156c:	0005883a 	mov	r2,zero
}
  811570:	e037883a 	mov	sp,fp
  811574:	dfc00117 	ldw	ra,4(sp)
  811578:	df000017 	ldw	fp,0(sp)
  81157c:	dec00204 	addi	sp,sp,8
  811580:	f800283a 	ret

00811584 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  811584:	defffb04 	addi	sp,sp,-20
  811588:	df000415 	stw	fp,16(sp)
  81158c:	df000404 	addi	fp,sp,16
  811590:	e13ffe15 	stw	r4,-8(fp)
  811594:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  811598:	e0bfff17 	ldw	r2,-4(fp)
  81159c:	10840070 	cmpltui	r2,r2,4097
  8115a0:	1000021e 	bne	r2,zero,8115ac <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  8115a4:	00840004 	movi	r2,4096
  8115a8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  8115ac:	e0fffe17 	ldw	r3,-8(fp)
  8115b0:	e0bfff17 	ldw	r2,-4(fp)
  8115b4:	1885883a 	add	r2,r3,r2
  8115b8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8115bc:	e0bffe17 	ldw	r2,-8(fp)
  8115c0:	e0bffc15 	stw	r2,-16(fp)
  8115c4:	00000506 	br	8115dc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  8115c8:	e0bffc17 	ldw	r2,-16(fp)
  8115cc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8115d0:	e0bffc17 	ldw	r2,-16(fp)
  8115d4:	10800804 	addi	r2,r2,32
  8115d8:	e0bffc15 	stw	r2,-16(fp)
  8115dc:	e0fffc17 	ldw	r3,-16(fp)
  8115e0:	e0bffd17 	ldw	r2,-12(fp)
  8115e4:	18bff836 	bltu	r3,r2,8115c8 <__alt_mem_onchip_mem+0xff8095c8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  8115e8:	e0bffe17 	ldw	r2,-8(fp)
  8115ec:	108007cc 	andi	r2,r2,31
  8115f0:	10000226 	beq	r2,zero,8115fc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  8115f4:	e0bffc17 	ldw	r2,-16(fp)
  8115f8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8115fc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  811600:	0001883a 	nop
  811604:	e037883a 	mov	sp,fp
  811608:	df000017 	ldw	fp,0(sp)
  81160c:	dec00104 	addi	sp,sp,4
  811610:	f800283a 	ret

00811614 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  811614:	defffe04 	addi	sp,sp,-8
  811618:	df000115 	stw	fp,4(sp)
  81161c:	df000104 	addi	fp,sp,4
  811620:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  811624:	e0bfff17 	ldw	r2,-4(fp)
  811628:	10bffe84 	addi	r2,r2,-6
  81162c:	10c00428 	cmpgeui	r3,r2,16
  811630:	18001a1e 	bne	r3,zero,81169c <alt_exception_cause_generated_bad_addr+0x88>
  811634:	100690ba 	slli	r3,r2,2
  811638:	00802074 	movhi	r2,129
  81163c:	10859304 	addi	r2,r2,5708
  811640:	1885883a 	add	r2,r3,r2
  811644:	10800017 	ldw	r2,0(r2)
  811648:	1000683a 	jmp	r2
  81164c:	0081168c 	andi	r2,zero,1114
  811650:	0081168c 	andi	r2,zero,1114
  811654:	0081169c 	xori	r2,zero,1114
  811658:	0081169c 	xori	r2,zero,1114
  81165c:	0081169c 	xori	r2,zero,1114
  811660:	0081168c 	andi	r2,zero,1114
  811664:	00811694 	movui	r2,1114
  811668:	0081169c 	xori	r2,zero,1114
  81166c:	0081168c 	andi	r2,zero,1114
  811670:	0081168c 	andi	r2,zero,1114
  811674:	0081169c 	xori	r2,zero,1114
  811678:	0081168c 	andi	r2,zero,1114
  81167c:	00811694 	movui	r2,1114
  811680:	0081169c 	xori	r2,zero,1114
  811684:	0081169c 	xori	r2,zero,1114
  811688:	0081168c 	andi	r2,zero,1114
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  81168c:	00800044 	movi	r2,1
  811690:	00000306 	br	8116a0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  811694:	0005883a 	mov	r2,zero
  811698:	00000106 	br	8116a0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  81169c:	0005883a 	mov	r2,zero
  }
}
  8116a0:	e037883a 	mov	sp,fp
  8116a4:	df000017 	ldw	fp,0(sp)
  8116a8:	dec00104 	addi	sp,sp,4
  8116ac:	f800283a 	ret

008116b0 <atexit>:
  8116b0:	200b883a 	mov	r5,r4
  8116b4:	000f883a 	mov	r7,zero
  8116b8:	000d883a 	mov	r6,zero
  8116bc:	0009883a 	mov	r4,zero
  8116c0:	08117781 	jmpi	811778 <__register_exitproc>

008116c4 <exit>:
  8116c4:	defffe04 	addi	sp,sp,-8
  8116c8:	000b883a 	mov	r5,zero
  8116cc:	dc000015 	stw	r16,0(sp)
  8116d0:	dfc00115 	stw	ra,4(sp)
  8116d4:	2021883a 	mov	r16,r4
  8116d8:	08118900 	call	811890 <__call_exitprocs>
  8116dc:	00802074 	movhi	r2,129
  8116e0:	108f4804 	addi	r2,r2,15648
  8116e4:	11000017 	ldw	r4,0(r2)
  8116e8:	20800f17 	ldw	r2,60(r4)
  8116ec:	10000126 	beq	r2,zero,8116f4 <exit+0x30>
  8116f0:	103ee83a 	callr	r2
  8116f4:	8009883a 	mov	r4,r16
  8116f8:	0811a100 	call	811a10 <_exit>

008116fc <memcmp>:
  8116fc:	01c000c4 	movi	r7,3
  811700:	3980192e 	bgeu	r7,r6,811768 <memcmp+0x6c>
  811704:	2144b03a 	or	r2,r4,r5
  811708:	11c4703a 	and	r2,r2,r7
  81170c:	10000f26 	beq	r2,zero,81174c <memcmp+0x50>
  811710:	20800003 	ldbu	r2,0(r4)
  811714:	28c00003 	ldbu	r3,0(r5)
  811718:	10c0151e 	bne	r2,r3,811770 <memcmp+0x74>
  81171c:	31bfff84 	addi	r6,r6,-2
  811720:	01ffffc4 	movi	r7,-1
  811724:	00000406 	br	811738 <memcmp+0x3c>
  811728:	20800003 	ldbu	r2,0(r4)
  81172c:	28c00003 	ldbu	r3,0(r5)
  811730:	31bfffc4 	addi	r6,r6,-1
  811734:	10c00e1e 	bne	r2,r3,811770 <memcmp+0x74>
  811738:	21000044 	addi	r4,r4,1
  81173c:	29400044 	addi	r5,r5,1
  811740:	31fff91e 	bne	r6,r7,811728 <__alt_mem_onchip_mem+0xff809728>
  811744:	0005883a 	mov	r2,zero
  811748:	f800283a 	ret
  81174c:	20c00017 	ldw	r3,0(r4)
  811750:	28800017 	ldw	r2,0(r5)
  811754:	18bfee1e 	bne	r3,r2,811710 <__alt_mem_onchip_mem+0xff809710>
  811758:	31bfff04 	addi	r6,r6,-4
  81175c:	21000104 	addi	r4,r4,4
  811760:	29400104 	addi	r5,r5,4
  811764:	39bff936 	bltu	r7,r6,81174c <__alt_mem_onchip_mem+0xff80974c>
  811768:	303fe91e 	bne	r6,zero,811710 <__alt_mem_onchip_mem+0xff809710>
  81176c:	003ff506 	br	811744 <__alt_mem_onchip_mem+0xff809744>
  811770:	10c5c83a 	sub	r2,r2,r3
  811774:	f800283a 	ret

00811778 <__register_exitproc>:
  811778:	defffa04 	addi	sp,sp,-24
  81177c:	dc000315 	stw	r16,12(sp)
  811780:	04002074 	movhi	r16,129
  811784:	840f4804 	addi	r16,r16,15648
  811788:	80c00017 	ldw	r3,0(r16)
  81178c:	dc400415 	stw	r17,16(sp)
  811790:	dfc00515 	stw	ra,20(sp)
  811794:	18805217 	ldw	r2,328(r3)
  811798:	2023883a 	mov	r17,r4
  81179c:	10003726 	beq	r2,zero,81187c <__register_exitproc+0x104>
  8117a0:	10c00117 	ldw	r3,4(r2)
  8117a4:	010007c4 	movi	r4,31
  8117a8:	20c00e16 	blt	r4,r3,8117e4 <__register_exitproc+0x6c>
  8117ac:	1a000044 	addi	r8,r3,1
  8117b0:	8800221e 	bne	r17,zero,81183c <__register_exitproc+0xc4>
  8117b4:	18c00084 	addi	r3,r3,2
  8117b8:	18c7883a 	add	r3,r3,r3
  8117bc:	18c7883a 	add	r3,r3,r3
  8117c0:	12000115 	stw	r8,4(r2)
  8117c4:	10c7883a 	add	r3,r2,r3
  8117c8:	19400015 	stw	r5,0(r3)
  8117cc:	0005883a 	mov	r2,zero
  8117d0:	dfc00517 	ldw	ra,20(sp)
  8117d4:	dc400417 	ldw	r17,16(sp)
  8117d8:	dc000317 	ldw	r16,12(sp)
  8117dc:	dec00604 	addi	sp,sp,24
  8117e0:	f800283a 	ret
  8117e4:	00800034 	movhi	r2,0
  8117e8:	10800004 	addi	r2,r2,0
  8117ec:	10002626 	beq	r2,zero,811888 <__register_exitproc+0x110>
  8117f0:	01006404 	movi	r4,400
  8117f4:	d9400015 	stw	r5,0(sp)
  8117f8:	d9800115 	stw	r6,4(sp)
  8117fc:	d9c00215 	stw	r7,8(sp)
  811800:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  811804:	d9400017 	ldw	r5,0(sp)
  811808:	d9800117 	ldw	r6,4(sp)
  81180c:	d9c00217 	ldw	r7,8(sp)
  811810:	10001d26 	beq	r2,zero,811888 <__register_exitproc+0x110>
  811814:	81000017 	ldw	r4,0(r16)
  811818:	10000115 	stw	zero,4(r2)
  81181c:	02000044 	movi	r8,1
  811820:	22405217 	ldw	r9,328(r4)
  811824:	0007883a 	mov	r3,zero
  811828:	12400015 	stw	r9,0(r2)
  81182c:	20805215 	stw	r2,328(r4)
  811830:	10006215 	stw	zero,392(r2)
  811834:	10006315 	stw	zero,396(r2)
  811838:	883fde26 	beq	r17,zero,8117b4 <__alt_mem_onchip_mem+0xff8097b4>
  81183c:	18c9883a 	add	r4,r3,r3
  811840:	2109883a 	add	r4,r4,r4
  811844:	1109883a 	add	r4,r2,r4
  811848:	21802215 	stw	r6,136(r4)
  81184c:	01800044 	movi	r6,1
  811850:	12406217 	ldw	r9,392(r2)
  811854:	30cc983a 	sll	r6,r6,r3
  811858:	4992b03a 	or	r9,r9,r6
  81185c:	12406215 	stw	r9,392(r2)
  811860:	21c04215 	stw	r7,264(r4)
  811864:	01000084 	movi	r4,2
  811868:	893fd21e 	bne	r17,r4,8117b4 <__alt_mem_onchip_mem+0xff8097b4>
  81186c:	11006317 	ldw	r4,396(r2)
  811870:	218cb03a 	or	r6,r4,r6
  811874:	11806315 	stw	r6,396(r2)
  811878:	003fce06 	br	8117b4 <__alt_mem_onchip_mem+0xff8097b4>
  81187c:	18805304 	addi	r2,r3,332
  811880:	18805215 	stw	r2,328(r3)
  811884:	003fc606 	br	8117a0 <__alt_mem_onchip_mem+0xff8097a0>
  811888:	00bfffc4 	movi	r2,-1
  81188c:	003fd006 	br	8117d0 <__alt_mem_onchip_mem+0xff8097d0>

00811890 <__call_exitprocs>:
  811890:	defff504 	addi	sp,sp,-44
  811894:	df000915 	stw	fp,36(sp)
  811898:	dd400615 	stw	r21,24(sp)
  81189c:	dc800315 	stw	r18,12(sp)
  8118a0:	dfc00a15 	stw	ra,40(sp)
  8118a4:	ddc00815 	stw	r23,32(sp)
  8118a8:	dd800715 	stw	r22,28(sp)
  8118ac:	dd000515 	stw	r20,20(sp)
  8118b0:	dcc00415 	stw	r19,16(sp)
  8118b4:	dc400215 	stw	r17,8(sp)
  8118b8:	dc000115 	stw	r16,4(sp)
  8118bc:	d9000015 	stw	r4,0(sp)
  8118c0:	2839883a 	mov	fp,r5
  8118c4:	04800044 	movi	r18,1
  8118c8:	057fffc4 	movi	r21,-1
  8118cc:	00802074 	movhi	r2,129
  8118d0:	108f4804 	addi	r2,r2,15648
  8118d4:	12000017 	ldw	r8,0(r2)
  8118d8:	45005217 	ldw	r20,328(r8)
  8118dc:	44c05204 	addi	r19,r8,328
  8118e0:	a0001c26 	beq	r20,zero,811954 <__call_exitprocs+0xc4>
  8118e4:	a0800117 	ldw	r2,4(r20)
  8118e8:	15ffffc4 	addi	r23,r2,-1
  8118ec:	b8000d16 	blt	r23,zero,811924 <__call_exitprocs+0x94>
  8118f0:	14000044 	addi	r16,r2,1
  8118f4:	8421883a 	add	r16,r16,r16
  8118f8:	8421883a 	add	r16,r16,r16
  8118fc:	84402004 	addi	r17,r16,128
  811900:	a463883a 	add	r17,r20,r17
  811904:	a421883a 	add	r16,r20,r16
  811908:	e0001e26 	beq	fp,zero,811984 <__call_exitprocs+0xf4>
  81190c:	80804017 	ldw	r2,256(r16)
  811910:	e0801c26 	beq	fp,r2,811984 <__call_exitprocs+0xf4>
  811914:	bdffffc4 	addi	r23,r23,-1
  811918:	843fff04 	addi	r16,r16,-4
  81191c:	8c7fff04 	addi	r17,r17,-4
  811920:	bd7ff91e 	bne	r23,r21,811908 <__alt_mem_onchip_mem+0xff809908>
  811924:	00800034 	movhi	r2,0
  811928:	10800004 	addi	r2,r2,0
  81192c:	10000926 	beq	r2,zero,811954 <__call_exitprocs+0xc4>
  811930:	a0800117 	ldw	r2,4(r20)
  811934:	1000301e 	bne	r2,zero,8119f8 <__call_exitprocs+0x168>
  811938:	a0800017 	ldw	r2,0(r20)
  81193c:	10003226 	beq	r2,zero,811a08 <__call_exitprocs+0x178>
  811940:	a009883a 	mov	r4,r20
  811944:	98800015 	stw	r2,0(r19)
  811948:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  81194c:	9d000017 	ldw	r20,0(r19)
  811950:	a03fe41e 	bne	r20,zero,8118e4 <__alt_mem_onchip_mem+0xff8098e4>
  811954:	dfc00a17 	ldw	ra,40(sp)
  811958:	df000917 	ldw	fp,36(sp)
  81195c:	ddc00817 	ldw	r23,32(sp)
  811960:	dd800717 	ldw	r22,28(sp)
  811964:	dd400617 	ldw	r21,24(sp)
  811968:	dd000517 	ldw	r20,20(sp)
  81196c:	dcc00417 	ldw	r19,16(sp)
  811970:	dc800317 	ldw	r18,12(sp)
  811974:	dc400217 	ldw	r17,8(sp)
  811978:	dc000117 	ldw	r16,4(sp)
  81197c:	dec00b04 	addi	sp,sp,44
  811980:	f800283a 	ret
  811984:	a0800117 	ldw	r2,4(r20)
  811988:	80c00017 	ldw	r3,0(r16)
  81198c:	10bfffc4 	addi	r2,r2,-1
  811990:	15c01426 	beq	r2,r23,8119e4 <__call_exitprocs+0x154>
  811994:	80000015 	stw	zero,0(r16)
  811998:	183fde26 	beq	r3,zero,811914 <__alt_mem_onchip_mem+0xff809914>
  81199c:	95c8983a 	sll	r4,r18,r23
  8119a0:	a0806217 	ldw	r2,392(r20)
  8119a4:	a5800117 	ldw	r22,4(r20)
  8119a8:	2084703a 	and	r2,r4,r2
  8119ac:	10000b26 	beq	r2,zero,8119dc <__call_exitprocs+0x14c>
  8119b0:	a0806317 	ldw	r2,396(r20)
  8119b4:	2088703a 	and	r4,r4,r2
  8119b8:	20000c1e 	bne	r4,zero,8119ec <__call_exitprocs+0x15c>
  8119bc:	89400017 	ldw	r5,0(r17)
  8119c0:	d9000017 	ldw	r4,0(sp)
  8119c4:	183ee83a 	callr	r3
  8119c8:	a0800117 	ldw	r2,4(r20)
  8119cc:	15bfbf1e 	bne	r2,r22,8118cc <__alt_mem_onchip_mem+0xff8098cc>
  8119d0:	98800017 	ldw	r2,0(r19)
  8119d4:	153fcf26 	beq	r2,r20,811914 <__alt_mem_onchip_mem+0xff809914>
  8119d8:	003fbc06 	br	8118cc <__alt_mem_onchip_mem+0xff8098cc>
  8119dc:	183ee83a 	callr	r3
  8119e0:	003ff906 	br	8119c8 <__alt_mem_onchip_mem+0xff8099c8>
  8119e4:	a5c00115 	stw	r23,4(r20)
  8119e8:	003feb06 	br	811998 <__alt_mem_onchip_mem+0xff809998>
  8119ec:	89000017 	ldw	r4,0(r17)
  8119f0:	183ee83a 	callr	r3
  8119f4:	003ff406 	br	8119c8 <__alt_mem_onchip_mem+0xff8099c8>
  8119f8:	a0800017 	ldw	r2,0(r20)
  8119fc:	a027883a 	mov	r19,r20
  811a00:	1029883a 	mov	r20,r2
  811a04:	003fb606 	br	8118e0 <__alt_mem_onchip_mem+0xff8098e0>
  811a08:	0005883a 	mov	r2,zero
  811a0c:	003ffb06 	br	8119fc <__alt_mem_onchip_mem+0xff8099fc>

00811a10 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  811a10:	defffd04 	addi	sp,sp,-12
  811a14:	df000215 	stw	fp,8(sp)
  811a18:	df000204 	addi	fp,sp,8
  811a1c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  811a20:	0001883a 	nop
  811a24:	e0bfff17 	ldw	r2,-4(fp)
  811a28:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  811a2c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  811a30:	10000226 	beq	r2,zero,811a3c <_exit+0x2c>
    ALT_SIM_FAIL();
  811a34:	002af070 	cmpltui	zero,zero,43969
  811a38:	00000106 	br	811a40 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  811a3c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  811a40:	003fff06 	br	811a40 <__alt_mem_onchip_mem+0xff809a40>
